
r633_dm1-12-Omnias-42.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  000030d0  00003164  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b7  0080014c  0080014c  000031b0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  00003220  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004856  00000000  00000000  00003518  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bf5  00000000  00000000  00007d6e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003395  00000000  00000000  00008963  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007b4  00000000  00000000  0000bcf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001491  00000000  00000000  0000c4ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000037b9  00000000  00000000  0000d93d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  000110f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 04 02 	jmp	0x408	; 0x408 <__ctors_end>
       4:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
       8:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__vector_2>
       c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      10:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      14:	0c 94 d1 05 	jmp	0xba2	; 0xba2 <__vector_5>
      18:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      1c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      20:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      24:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      28:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      2c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      30:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      34:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      38:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_14>
      3c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      40:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      44:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      48:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      4c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      50:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      54:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      58:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      5c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      60:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      64:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      68:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>
      6c:	0c 94 21 02 	jmp	0x442	; 0x442 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	31 39       	cpi	r19, 0x91	; 145
      72:	36 39       	cpi	r19, 0x96	; 150
      74:	30 37       	cpi	r19, 0x70	; 112
      76:	32 30       	cpi	r19, 0x02	; 2
      78:	30 32       	cpi	r19, 0x20	; 32
      7a:	36 36       	cpi	r19, 0x66	; 102
	...

0000007d <rgb_led_colors>:
      7d:	01 05 04 14 10 11 15                                .......

00000084 <pwm_tops>:
      84:	ff 3f b1 33 34 26 01 36 78 25 7a 34 f3 26 f4 2e     .?.34&.6x%z4.&..
      94:	63 32 88 33 5d 33 62 32 db 30 f6 2e 79 31 cd 2e     c2.3]3b2.0..y1..
      a4:	94 2f 9d 2c 80 2c ee 2b 09 2b ea 29 49 2a c1 28     ./.,.,.+.+.)I*.(
      b4:	7c 28 c6 26 26 26 5c 25 73 24 73 23 65 22 f4 21     |(.&&&\%s$s#e".!
      c4:	ca 20 9f 1f f7 1e c9 1d 0e 1d e6 1b 23 1b 08 1a     . ..........#...
      d4:	f8 18 3a 18 39 17 43 16 58 15 42 14 3d 13 76 12     ..:.9.C.X.B.=.v.
      e4:	62 11 62 10 74 0f 96 0e 86 0d 8c 0c a6 0b 9d 0a     b.b.t...........
      f4:	ab 09 b6 08 c1 07 cd 06 dc 05 dc 04 e4 03 f3 02     ................
     104:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     114:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     124:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     134:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     144:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     154:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     164:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     174:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     184:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     194:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01 ff 01     ................
     1a4:	ff 01 ff 01 ff 01 ff 01 ff 01 ff 01                 ............

000001b0 <pwm2_levels>:
	...
     2b4:	05 00 0d 00 15 00 1d 00 27 00 31 00 3c 00 47 00     ........'.1.<.G.
     2c4:	53 00 5f 00 6c 00 7a 00 89 00 98 00 a7 00 b8 00     S._.l.z.........
     2d4:	c9 00 da 00 ec 00 ff 00                             ........

000002dc <pwm1_levels>:
     2dc:	01 00 01 00 01 00 02 00 02 00 03 00 03 00 04 00     ................
     2ec:	05 00 06 00 07 00 08 00 09 00 0a 00 0c 00 0d 00     ................
     2fc:	0f 00 10 00 12 00 14 00 16 00 18 00 1b 00 1d 00     ................
     30c:	20 00 22 00 25 00 28 00 2b 00 2e 00 31 00 35 00      .".%.(.+...1.5.
     31c:	38 00 3b 00 3f 00 42 00 46 00 49 00 4d 00 50 00     8.;.?.B.F.I.M.P.
     32c:	53 00 57 00 5a 00 5d 00 60 00 62 00 64 00 67 00     S.W.Z.].`.b.d.g.
     33c:	68 00 69 00 6a 00 6b 00 6a 00 69 00 68 00 65 00     h.i.j.k.j.i.h.e.
     34c:	62 00 5e 00 59 00 53 00 4c 00 43 00 39 00 2e 00     b.^.Y.S.L.C.9...
     35c:	21 00 23 00 25 00 27 00 29 00 2b 00 2e 00 30 00     !.#.%.'.).+...0.
     36c:	33 00 35 00 38 00 3b 00 3e 00 41 00 44 00 48 00     3.5.8.;.>.A.D.H.
     37c:	4b 00 4f 00 53 00 56 00 5b 00 5f 00 63 00 68 00     K.O.S.V.[._.c.h.
     38c:	6c 00 71 00 76 00 7b 00 81 00 87 00 8c 00 92 00     l.q.v.{.........
     39c:	99 00 9f 00 a6 00 ac 00 b3 00 bb 00 c2 00 ca 00     ................
     3ac:	d2 00 da 00 e3 00 ec 00 f5 00 fe 00 08 01 12 01     ................
     3bc:	1c 01 27 01 32 01 3d 01 48 01 54 01 60 01 6d 01     ..'.2.=.H.T.`.m.
     3cc:	7a 01 87 01 95 01 a3 01 b1 01 c0 01 cf 01 df 01     z...............
     3dc:	ef 01 ff 01 f5 01 e5 01 d5 01 c5 01 b1 01 9d 01     ................
     3ec:	87 01 71 01 59 01 41 01 27 01 0b 01 ed 00 cf 00     ..q.Y.A.'.......
     3fc:	b1 00 8f 00 6c 00 4a 00 26 00 00 00                 ....l.J.&...

00000408 <__ctors_end>:
     408:	11 24       	eor	r1, r1
     40a:	1f be       	out	0x3f, r1	; 63
     40c:	cf ef       	ldi	r28, 0xFF	; 255
     40e:	d4 e0       	ldi	r29, 0x04	; 4
     410:	de bf       	out	0x3e, r29	; 62
     412:	cd bf       	out	0x3d, r28	; 61

00000414 <__do_copy_data>:
     414:	11 e0       	ldi	r17, 0x01	; 1
     416:	a0 e0       	ldi	r26, 0x00	; 0
     418:	b1 e0       	ldi	r27, 0x01	; 1
     41a:	e0 ed       	ldi	r30, 0xD0	; 208
     41c:	f0 e3       	ldi	r31, 0x30	; 48
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__do_copy_data+0x10>
     420:	05 90       	lpm	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	ac 34       	cpi	r26, 0x4C	; 76
     426:	b1 07       	cpc	r27, r17
     428:	d9 f7       	brne	.-10     	; 0x420 <__do_copy_data+0xc>

0000042a <__do_clear_bss>:
     42a:	22 e0       	ldi	r18, 0x02	; 2
     42c:	ac e4       	ldi	r26, 0x4C	; 76
     42e:	b1 e0       	ldi	r27, 0x01	; 1
     430:	01 c0       	rjmp	.+2      	; 0x434 <.do_clear_bss_start>

00000432 <.do_clear_bss_loop>:
     432:	1d 92       	st	X+, r1

00000434 <.do_clear_bss_start>:
     434:	a3 30       	cpi	r26, 0x03	; 3
     436:	b2 07       	cpc	r27, r18
     438:	e1 f7       	brne	.-8      	; 0x432 <.do_clear_bss_loop>
     43a:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <main>
     43e:	0c 94 66 18 	jmp	0x30cc	; 0x30cc <_exit>

00000442 <__bad_interrupt>:
     442:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000446 <ramp_config_save>:

void rgb_led_voltage_readout(uint8_t bright) {
    uint8_t color = voltage_to_rgb();
    if (bright) color = color << 1;
    rgb_led_set(color);
}
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	00 d0       	rcall	.+0      	; 0x44c <ramp_config_save+0x6>
     44c:	00 d0       	rcall	.+0      	; 0x44e <ramp_config_save+0x8>
     44e:	00 d0       	rcall	.+0      	; 0x450 <ramp_config_save+0xa>
     450:	cd b7       	in	r28, 0x3d	; 61
     452:	de b7       	in	r29, 0x3e	; 62
     454:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ramp_style>
     458:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <current_state>
     45c:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <current_state+0x1>
     460:	2a 52       	subi	r18, 0x2A	; 42
     462:	3c 40       	sbci	r19, 0x0C	; 12
     464:	09 f4       	brne	.+2      	; 0x468 <ramp_config_save+0x22>
     466:	92 e0       	ldi	r25, 0x02	; 2
     468:	84 30       	cpi	r24, 0x04	; 4
     46a:	19 f4       	brne	.+6      	; 0x472 <ramp_config_save+0x2c>
     46c:	60 93 7a 01 	sts	0x017A, r22	; 0x80017a <ramp_2c_style_simple>
     470:	21 c0       	rjmp	.+66     	; 0x4b4 <ramp_config_save+0x6e>
     472:	66 23       	and	r22, r22
     474:	f9 f0       	breq	.+62     	; 0x4b4 <ramp_config_save+0x6e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	19 f4       	brne	.+6      	; 0x480 <ramp_config_save+0x3a>
     47a:	27 e9       	ldi	r18, 0x97	; 151
     47c:	26 1b       	sub	r18, r22
     47e:	62 2f       	mov	r22, r18
     480:	26 e0       	ldi	r18, 0x06	; 6
     482:	e3 e2       	ldi	r30, 0x23	; 35
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	de 01       	movw	r26, r28
     488:	11 96       	adiw	r26, 0x01	; 1
     48a:	01 90       	ld	r0, Z+
     48c:	0d 92       	st	X+, r0
     48e:	2a 95       	dec	r18
     490:	e1 f7       	brne	.-8      	; 0x48a <ramp_config_save+0x44>
     492:	e8 2f       	mov	r30, r24
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	31 97       	sbiw	r30, 0x01	; 1
     498:	ee 0f       	add	r30, r30
     49a:	ff 1f       	adc	r31, r31
     49c:	21 e0       	ldi	r18, 0x01	; 1
     49e:	30 e0       	ldi	r19, 0x00	; 0
     4a0:	2c 0f       	add	r18, r28
     4a2:	3d 1f       	adc	r19, r29
     4a4:	e2 0f       	add	r30, r18
     4a6:	f3 1f       	adc	r31, r19
     4a8:	01 90       	ld	r0, Z+
     4aa:	f0 81       	ld	r31, Z
     4ac:	e0 2d       	mov	r30, r0
     4ae:	e9 0f       	add	r30, r25
     4b0:	f1 1d       	adc	r31, r1
     4b2:	60 83       	st	Z, r22
     4b4:	26 96       	adiw	r28, 0x06	; 6
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	de bf       	out	0x3e, r29	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	df 91       	pop	r29
     4c2:	cf 91       	pop	r28
     4c4:	08 95       	ret

000004c6 <ramp_extras_config_save>:
     4c6:	81 30       	cpi	r24, 0x01	; 1
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <ramp_extras_config_save+0xa>
     4ca:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <manual_memory>
     4ce:	08 95       	ret
     4d0:	82 30       	cpi	r24, 0x02	; 2
     4d2:	19 f4       	brne	.+6      	; 0x4da <ramp_extras_config_save+0x14>
     4d4:	60 93 7b 01 	sts	0x017B, r22	; 0x80017b <manual_memory_timer>
     4d8:	08 95       	ret
     4da:	83 30       	cpi	r24, 0x03	; 3
     4dc:	19 f4       	brne	.+6      	; 0x4e4 <ramp_extras_config_save+0x1e>
     4de:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <dont_ramp_after_moon>
     4e2:	08 95       	ret
     4e4:	84 30       	cpi	r24, 0x04	; 4
     4e6:	11 f4       	brne	.+4      	; 0x4ec <ramp_extras_config_save+0x26>
     4e8:	60 93 1b 01 	sts	0x011B, r22	; 0x80011b <ramp_2c_style>
     4ec:	08 95       	ret

000004ee <globals_config_save>:
     4ee:	60 93 1e 01 	sts	0x011E, r22	; 0x80011e <jump_start_level>
     4f2:	08 95       	ret

000004f4 <version_check_state>:
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	08 95       	ret

000004f8 <voltage_config_save>:
     4f8:	61 11       	cpse	r22, r1
     4fa:	60 93 21 01 	sts	0x0121, r22	; 0x800121 <voltage_correction>
     4fe:	08 95       	ret

00000500 <thermal_config_save>:
     500:	66 23       	and	r22, r22
     502:	89 f0       	breq	.+34     	; 0x526 <thermal_config_save+0x26>
     504:	81 30       	cpi	r24, 0x01	; 1
     506:	61 f4       	brne	.+24     	; 0x520 <thermal_config_save+0x20>
     508:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <temperature>
     50c:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <therm_cal_offset>
     510:	89 1b       	sub	r24, r25
     512:	68 1b       	sub	r22, r24
     514:	60 93 85 01 	sts	0x0185, r22	; 0x800185 <therm_cal_offset>
     518:	82 e0       	ldi	r24, 0x02	; 2
     51a:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_reset>
     51e:	03 c0       	rjmp	.+6      	; 0x526 <thermal_config_save+0x26>
     520:	63 5e       	subi	r22, 0xE3	; 227
     522:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <therm_ceil>
     526:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <therm_ceil>
     52a:	87 34       	cpi	r24, 0x47	; 71
     52c:	18 f0       	brcs	.+6      	; 0x534 <thermal_config_save+0x34>
     52e:	86 e4       	ldi	r24, 0x46	; 70
     530:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <therm_ceil>
     534:	08 95       	ret

00000536 <autolock_config_save>:
     536:	60 93 72 01 	sts	0x0172, r22	; 0x800172 <autolock_time>
     53a:	08 95       	ret

0000053c <_delay_zero>:
     53c:	8c ef       	ldi	r24, 0xFC	; 252
     53e:	93 e0       	ldi	r25, 0x03	; 3
     540:	01 97       	sbiw	r24, 0x01	; 1
     542:	f1 f7       	brne	.-4      	; 0x540 <_delay_zero+0x4>
     544:	08 95       	ret

00000546 <_set_state>:
     546:	ff 92       	push	r15
     548:	0f 93       	push	r16
     54a:	1f 93       	push	r17
     54c:	cf 93       	push	r28
     54e:	df 93       	push	r29
     550:	ec 01       	movw	r28, r24
     552:	8b 01       	movw	r16, r22
     554:	f2 2e       	mov	r15, r18
     556:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <current_state>
     55a:	30 91 ac 01 	lds	r19, 0x01AC	; 0x8001ac <current_state+0x1>
     55e:	23 2b       	or	r18, r19
     560:	31 f0       	breq	.+12     	; 0x56e <_set_state+0x28>
     562:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <current_state>
     566:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <current_state+0x1>
     56a:	84 2f       	mov	r24, r20
     56c:	09 95       	icall
     56e:	d0 93 ac 01 	sts	0x01AC, r29	; 0x8001ac <current_state+0x1>
     572:	c0 93 ab 01 	sts	0x01AB, r28	; 0x8001ab <current_state>
     576:	cd 2b       	or	r28, r29
     578:	39 f0       	breq	.+14     	; 0x588 <_set_state+0x42>
     57a:	e0 91 ab 01 	lds	r30, 0x01AB	; 0x8001ab <current_state>
     57e:	f0 91 ac 01 	lds	r31, 0x01AC	; 0x8001ac <current_state+0x1>
     582:	b8 01       	movw	r22, r16
     584:	8f 2d       	mov	r24, r15
     586:	09 95       	icall
     588:	81 e0       	ldi	r24, 0x01	; 1
     58a:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <nice_delay_interrupt>
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	1f 91       	pop	r17
     594:	0f 91       	pop	r16
     596:	ff 90       	pop	r15
     598:	08 95       	ret

0000059a <push_state>:
     59a:	dc 01       	movw	r26, r24
     59c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <state_stack_len>
     5a0:	98 30       	cpi	r25, 0x08	; 8
     5a2:	98 f4       	brcc	.+38     	; 0x5ca <push_state+0x30>
     5a4:	e9 2f       	mov	r30, r25
     5a6:	f0 e0       	ldi	r31, 0x00	; 0
     5a8:	ee 0f       	add	r30, r30
     5aa:	ff 1f       	adc	r31, r31
     5ac:	ed 50       	subi	r30, 0x0D	; 13
     5ae:	fe 4f       	sbci	r31, 0xFE	; 254
     5b0:	b1 83       	std	Z+1, r27	; 0x01
     5b2:	a0 83       	st	Z, r26
     5b4:	9f 5f       	subi	r25, 0xFF	; 255
     5b6:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <state_stack_len>
     5ba:	28 e0       	ldi	r18, 0x08	; 8
     5bc:	49 e0       	ldi	r20, 0x09	; 9
     5be:	cd 01       	movw	r24, r26
     5c0:	0e 94 a3 02 	call	0x546	; 0x546 <_set_state>
     5c4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <state_stack_len>
     5c8:	08 95       	ret
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	08 95       	ret

000005ce <pop_state>:
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <state_stack_len>
     5d6:	ee 23       	and	r30, r30
     5d8:	59 f0       	breq	.+22     	; 0x5f0 <pop_state+0x22>
     5da:	e1 50       	subi	r30, 0x01	; 1
     5dc:	e0 93 84 01 	sts	0x0184, r30	; 0x800184 <state_stack_len>
     5e0:	f0 e0       	ldi	r31, 0x00	; 0
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ed 50       	subi	r30, 0x0D	; 13
     5e8:	fe 4f       	sbci	r31, 0xFE	; 254
     5ea:	c0 81       	ld	r28, Z
     5ec:	d1 81       	ldd	r29, Z+1	; 0x01
     5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <pop_state+0x26>
     5f0:	c0 e0       	ldi	r28, 0x00	; 0
     5f2:	d0 e0       	ldi	r29, 0x00	; 0
     5f4:	e0 91 84 01 	lds	r30, 0x0184	; 0x800184 <state_stack_len>
     5f8:	ee 23       	and	r30, r30
     5fa:	49 f0       	breq	.+18     	; 0x60e <pop_state+0x40>
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	31 97       	sbiw	r30, 0x01	; 1
     600:	ee 0f       	add	r30, r30
     602:	ff 1f       	adc	r31, r31
     604:	ed 50       	subi	r30, 0x0D	; 13
     606:	fe 4f       	sbci	r31, 0xFE	; 254
     608:	80 81       	ld	r24, Z
     60a:	91 81       	ldd	r25, Z+1	; 0x01
     60c:	02 c0       	rjmp	.+4      	; 0x612 <pop_state+0x44>
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	2a e0       	ldi	r18, 0x0A	; 10
     614:	49 e0       	ldi	r20, 0x09	; 9
     616:	60 e0       	ldi	r22, 0x00	; 0
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	0e 94 a3 02 	call	0x546	; 0x546 <_set_state>
     61e:	ce 01       	movw	r24, r28
     620:	df 91       	pop	r29
     622:	cf 91       	pop	r28
     624:	08 95       	ret

00000626 <set_state>:
     626:	0f 93       	push	r16
     628:	1f 93       	push	r17
     62a:	cf 93       	push	r28
     62c:	df 93       	push	r29
     62e:	ec 01       	movw	r28, r24
     630:	8b 01       	movw	r16, r22
     632:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pop_state>
     636:	b8 01       	movw	r22, r16
     638:	ce 01       	movw	r24, r28
     63a:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	1f 91       	pop	r17
     644:	0f 91       	pop	r16
     646:	08 95       	ret

00000648 <battcheck_state>:
     648:	cf 93       	push	r28
     64a:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <simple_ui_active>
     64e:	c1 11       	cpse	r28, r1
     650:	1b c0       	rjmp	.+54     	; 0x688 <battcheck_state+0x40>
     652:	81 3c       	cpi	r24, 0xC1	; 193
     654:	39 f4       	brne	.+14     	; 0x664 <battcheck_state+0x1c>
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	86 e2       	ldi	r24, 0x26	; 38
     65c:	9d e0       	ldi	r25, 0x0D	; 13
     65e:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
     662:	15 c0       	rjmp	.+42     	; 0x68e <battcheck_state+0x46>
     664:	82 3c       	cpi	r24, 0xC2	; 194
     666:	39 f4       	brne	.+14     	; 0x676 <battcheck_state+0x2e>
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	8a e4       	ldi	r24, 0x4A	; 74
     66e:	93 e0       	ldi	r25, 0x03	; 3
     670:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
     674:	0c c0       	rjmp	.+24     	; 0x68e <battcheck_state+0x46>
     676:	87 3b       	cpi	r24, 0xB7	; 183
     678:	49 f4       	brne	.+18     	; 0x68c <battcheck_state+0x44>
     67a:	60 e0       	ldi	r22, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	8c e3       	ldi	r24, 0x3C	; 60
     680:	9c e0       	ldi	r25, 0x0C	; 12
     682:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
     686:	03 c0       	rjmp	.+6      	; 0x68e <battcheck_state+0x46>
     688:	c1 e0       	ldi	r28, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <battcheck_state+0x46>
     68c:	c1 e0       	ldi	r28, 0x01	; 1
     68e:	8c 2f       	mov	r24, r28
     690:	cf 91       	pop	r28
     692:	08 95       	ret

00000694 <tempcheck_state>:
     694:	81 3c       	cpi	r24, 0xC1	; 193
     696:	41 f4       	brne	.+16     	; 0x6a8 <tempcheck_state+0x14>
     698:	60 e0       	ldi	r22, 0x00	; 0
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	86 e2       	ldi	r24, 0x26	; 38
     69e:	9d e0       	ldi	r25, 0x0D	; 13
     6a0:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
     6a4:	80 e0       	ldi	r24, 0x00	; 0
     6a6:	08 95       	ret
     6a8:	82 3c       	cpi	r24, 0xC2	; 194
     6aa:	41 f4       	brne	.+16     	; 0x6bc <tempcheck_state+0x28>
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	8e ec       	ldi	r24, 0xCE	; 206
     6b2:	9e e0       	ldi	r25, 0x0E	; 14
     6b4:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
     6b8:	80 e0       	ldi	r24, 0x00	; 0
     6ba:	08 95       	ret
     6bc:	87 3b       	cpi	r24, 0xB7	; 183
     6be:	41 f4       	brne	.+16     	; 0x6d0 <tempcheck_state+0x3c>
     6c0:	60 e0       	ldi	r22, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	82 e4       	ldi	r24, 0x42	; 66
     6c6:	9c e0       	ldi	r25, 0x0C	; 12
     6c8:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
     6cc:	80 e0       	ldi	r24, 0x00	; 0
     6ce:	08 95       	ret
     6d0:	81 e0       	ldi	r24, 0x01	; 1
     6d2:	08 95       	ret

000006d4 <set_state_deferred>:
     6d4:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <deferred_state+0x1>
     6d8:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <deferred_state>
     6dc:	70 93 b5 01 	sts	0x01B5, r23	; 0x8001b5 <deferred_state_arg+0x1>
     6e0:	60 93 b4 01 	sts	0x01B4, r22	; 0x8001b4 <deferred_state_arg>
     6e4:	08 95       	ret

000006e6 <append_emission>:
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	01 c0       	rjmp	.+2      	; 0x6ec <append_emission+0x6>
     6ea:	9f 5f       	subi	r25, 0xFF	; 255
     6ec:	90 31       	cpi	r25, 0x10	; 16
     6ee:	68 f4       	brcc	.+26     	; 0x70a <append_emission+0x24>
     6f0:	29 2f       	mov	r18, r25
     6f2:	30 e0       	ldi	r19, 0x00	; 0
     6f4:	f9 01       	movw	r30, r18
     6f6:	ee 0f       	add	r30, r30
     6f8:	ff 1f       	adc	r31, r31
     6fa:	2e 0f       	add	r18, r30
     6fc:	3f 1f       	adc	r19, r31
     6fe:	f9 01       	movw	r30, r18
     700:	ea 54       	subi	r30, 0x4A	; 74
     702:	fe 4f       	sbci	r31, 0xFE	; 254
     704:	20 81       	ld	r18, Z
     706:	21 11       	cpse	r18, r1
     708:	f0 cf       	rjmp	.-32     	; 0x6ea <append_emission+0x4>
     70a:	90 31       	cpi	r25, 0x10	; 16
     70c:	60 f4       	brcc	.+24     	; 0x726 <append_emission+0x40>
     70e:	29 2f       	mov	r18, r25
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	ee 0f       	add	r30, r30
     716:	ff 1f       	adc	r31, r31
     718:	e2 0f       	add	r30, r18
     71a:	f3 1f       	adc	r31, r19
     71c:	ea 54       	subi	r30, 0x4A	; 74
     71e:	fe 4f       	sbci	r31, 0xFE	; 254
     720:	80 83       	st	Z, r24
     722:	72 83       	std	Z+2, r23	; 0x02
     724:	61 83       	std	Z+1, r22	; 0x01
     726:	08 95       	ret

00000728 <delete_first_emission>:
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	1c c0       	rjmp	.+56     	; 0x764 <delete_first_emission+0x3c>
     72c:	82 2f       	mov	r24, r18
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	dc 01       	movw	r26, r24
     732:	11 96       	adiw	r26, 0x01	; 1
     734:	ad 01       	movw	r20, r26
     736:	44 0f       	add	r20, r20
     738:	55 1f       	adc	r21, r21
     73a:	a4 0f       	add	r26, r20
     73c:	b5 1f       	adc	r27, r21
     73e:	aa 54       	subi	r26, 0x4A	; 74
     740:	be 4f       	sbci	r27, 0xFE	; 254
     742:	3c 91       	ld	r19, X
     744:	fc 01       	movw	r30, r24
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	8e 0f       	add	r24, r30
     74c:	9f 1f       	adc	r25, r31
     74e:	fc 01       	movw	r30, r24
     750:	ea 54       	subi	r30, 0x4A	; 74
     752:	fe 4f       	sbci	r31, 0xFE	; 254
     754:	30 83       	st	Z, r19
     756:	11 96       	adiw	r26, 0x01	; 1
     758:	8d 91       	ld	r24, X+
     75a:	9c 91       	ld	r25, X
     75c:	12 97       	sbiw	r26, 0x02	; 2
     75e:	92 83       	std	Z+2, r25	; 0x02
     760:	81 83       	std	Z+1, r24	; 0x01
     762:	2f 5f       	subi	r18, 0xFF	; 255
     764:	2f 30       	cpi	r18, 0x0F	; 15
     766:	10 f3       	brcs	.-60     	; 0x72c <delete_first_emission+0x4>
     768:	82 2f       	mov	r24, r18
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	fc 01       	movw	r30, r24
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e8 0f       	add	r30, r24
     774:	f9 1f       	adc	r31, r25
     776:	ea 54       	subi	r30, 0x4A	; 74
     778:	fe 4f       	sbci	r31, 0xFE	; 254
     77a:	10 82       	st	Z, r1
     77c:	12 82       	std	Z+2, r1	; 0x02
     77e:	11 82       	std	Z+1, r1	; 0x01
     780:	08 95       	ret

00000782 <emit_now>:
     782:	0f 93       	push	r16
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	d8 2f       	mov	r29, r24
     78c:	8b 01       	movw	r16, r22
     78e:	c0 91 84 01 	lds	r28, 0x0184	; 0x800184 <state_stack_len>
     792:	c1 50       	subi	r28, 0x01	; 1
     794:	0e c0       	rjmp	.+28     	; 0x7b2 <emit_now+0x30>
     796:	ec 2f       	mov	r30, r28
     798:	ee 0f       	add	r30, r30
     79a:	ff 0b       	sbc	r31, r31
     79c:	ed 50       	subi	r30, 0x0D	; 13
     79e:	fe 4f       	sbci	r31, 0xFE	; 254
     7a0:	01 90       	ld	r0, Z+
     7a2:	f0 81       	ld	r31, Z
     7a4:	e0 2d       	mov	r30, r0
     7a6:	b8 01       	movw	r22, r16
     7a8:	8d 2f       	mov	r24, r29
     7aa:	09 95       	icall
     7ac:	88 23       	and	r24, r24
     7ae:	29 f0       	breq	.+10     	; 0x7ba <emit_now+0x38>
     7b0:	c1 50       	subi	r28, 0x01	; 1
     7b2:	cc 23       	and	r28, r28
     7b4:	84 f7       	brge	.-32     	; 0x796 <emit_now+0x14>
     7b6:	81 e0       	ldi	r24, 0x01	; 1
     7b8:	01 c0       	rjmp	.+2      	; 0x7bc <emit_now+0x3a>
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	08 95       	ret

000007c6 <process_emissions>:
     7c6:	08 c0       	rjmp	.+16     	; 0x7d8 <process_emissions+0x12>
     7c8:	60 91 b7 01 	lds	r22, 0x01B7	; 0x8001b7 <emissions+0x1>
     7cc:	70 91 b8 01 	lds	r23, 0x01B8	; 0x8001b8 <emissions+0x2>
     7d0:	0e 94 c1 03 	call	0x782	; 0x782 <emit_now>
     7d4:	0e 94 94 03 	call	0x728	; 0x728 <delete_first_emission>
     7d8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <emissions>
     7dc:	81 11       	cpse	r24, r1
     7de:	f4 cf       	rjmp	.-24     	; 0x7c8 <process_emissions+0x2>
     7e0:	08 95       	ret

000007e2 <emit>:
     7e2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <append_emission>
     7e6:	08 95       	ret

000007e8 <emit_current_event>:
     7e8:	bc 01       	movw	r22, r24
     7ea:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <current_event>
     7ee:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     7f2:	08 95       	ret

000007f4 <empty_event_sequence>:
     7f4:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <current_event>
     7f8:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <ticks_since_last_event+0x1>
     7fc:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <ticks_since_last_event>
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <nice_delay_interrupt>
     806:	08 95       	ret

00000808 <push_event>:
     808:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <current_event>
     80c:	90 68       	ori	r25, 0x80	; 128
     80e:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <current_event>
     812:	80 31       	cpi	r24, 0x10	; 16
     814:	71 f4       	brne	.+28     	; 0x832 <push_event+0x2a>
     816:	90 61       	ori	r25, 0x10	; 16
     818:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <current_event>
     81c:	29 2f       	mov	r18, r25
     81e:	2f 70       	andi	r18, 0x0F	; 15
     820:	30 e0       	ldi	r19, 0x00	; 0
     822:	2f 30       	cpi	r18, 0x0F	; 15
     824:	31 05       	cpc	r19, r1
     826:	94 f4       	brge	.+36     	; 0x84c <push_event+0x44>
     828:	9f 5f       	subi	r25, 0xFF	; 255
     82a:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <current_event>
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	08 95       	ret
     832:	81 11       	cpse	r24, r1
     834:	0d c0       	rjmp	.+26     	; 0x850 <push_event+0x48>
     836:	89 2f       	mov	r24, r25
     838:	8f 7e       	andi	r24, 0xEF	; 239
     83a:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <current_event>
     83e:	95 ff       	sbrs	r25, 5
     840:	09 c0       	rjmp	.+18     	; 0x854 <push_event+0x4c>
     842:	80 64       	ori	r24, 0x40	; 64
     844:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <current_event>
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	08 95       	ret
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	08 95       	ret
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	08 95       	ret
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	08 95       	ret

00000858 <delay_4ms>:
     858:	0f c0       	rjmp	.+30     	; 0x878 <delay_4ms+0x20>
     85a:	f8 94       	cli
     85c:	88 ed       	ldi	r24, 0xD8	; 216
     85e:	8f bd       	out	0x2f, r24	; 47
     860:	22 e0       	ldi	r18, 0x02	; 2
     862:	23 bf       	out	0x33, r18	; 51
     864:	78 94       	sei
     866:	e8 ea       	ldi	r30, 0xA8	; 168
     868:	f7 e0       	ldi	r31, 0x07	; 7
     86a:	31 97       	sbiw	r30, 0x01	; 1
     86c:	f1 f7       	brne	.-4      	; 0x86a <delay_4ms+0x12>
     86e:	f8 94       	cli
     870:	8f bd       	out	0x2f, r24	; 47
     872:	13 be       	out	0x33, r1	; 51
     874:	78 94       	sei
     876:	89 2f       	mov	r24, r25
     878:	9f ef       	ldi	r25, 0xFF	; 255
     87a:	98 0f       	add	r25, r24
     87c:	81 11       	cpse	r24, r1
     87e:	ed cf       	rjmp	.-38     	; 0x85a <delay_4ms+0x2>
     880:	08 95       	ret

00000882 <__vector_14>:
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	8f 93       	push	r24
     892:	9f 93       	push	r25
     894:	af 93       	push	r26
     896:	bf 93       	push	r27
     898:	ef 93       	push	r30
     89a:	ff 93       	push	r31
     89c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <adc_sample_count>
     8a0:	88 23       	and	r24, r24
     8a2:	e9 f0       	breq	.+58     	; 0x8de <__vector_14+0x5c>
     8a4:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <adc_channel>
     8a8:	20 b1       	in	r18, 0x00	; 0
     8aa:	31 b1       	in	r19, 0x01	; 1
     8ac:	f0 e0       	ldi	r31, 0x00	; 0
     8ae:	ee 0f       	add	r30, r30
     8b0:	ff 1f       	adc	r31, r31
     8b2:	df 01       	movw	r26, r30
     8b4:	a1 51       	subi	r26, 0x11	; 17
     8b6:	be 4f       	sbci	r27, 0xFE	; 254
     8b8:	2d 93       	st	X+, r18
     8ba:	3c 93       	st	X, r19
     8bc:	e8 51       	subi	r30, 0x18	; 24
     8be:	fe 4f       	sbci	r31, 0xFE	; 254
     8c0:	80 81       	ld	r24, Z
     8c2:	91 81       	ldd	r25, Z+1	; 0x01
     8c4:	82 17       	cp	r24, r18
     8c6:	93 07       	cpc	r25, r19
     8c8:	08 f4       	brcc	.+2      	; 0x8cc <__vector_14+0x4a>
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	28 17       	cp	r18, r24
     8ce:	39 07       	cpc	r19, r25
     8d0:	08 f4       	brcc	.+2      	; 0x8d4 <__vector_14+0x52>
     8d2:	01 97       	sbiw	r24, 0x01	; 1
     8d4:	91 83       	std	Z+1, r25	; 0x01
     8d6:	80 83       	st	Z, r24
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <irq_adc>
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <adc_sample_count>
     8e4:	ff 91       	pop	r31
     8e6:	ef 91       	pop	r30
     8e8:	bf 91       	pop	r27
     8ea:	af 91       	pop	r26
     8ec:	9f 91       	pop	r25
     8ee:	8f 91       	pop	r24
     8f0:	3f 91       	pop	r19
     8f2:	2f 91       	pop	r18
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <adc_deferred>:
     8fe:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <irq_adc>
     902:	20 b1       	in	r18, 0x00	; 0
     904:	22 95       	swap	r18
     906:	26 95       	lsr	r18
     908:	26 95       	lsr	r18
     90a:	23 70       	andi	r18, 0x03	; 3
     90c:	81 b1       	in	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	88 0f       	add	r24, r24
     912:	99 1f       	adc	r25, r25
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	82 0f       	add	r24, r18
     91a:	91 1d       	adc	r25, r1
     91c:	90 91 7f 01 	lds	r25, 0x017F	; 0x80017f <pseudo_rand_seed>
     920:	89 0f       	add	r24, r25
     922:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <pseudo_rand_seed>
     926:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <adc_deferred_enable>
     92a:	88 23       	and	r24, r24
     92c:	09 f4       	brne	.+2      	; 0x930 <adc_deferred+0x32>
     92e:	34 c1       	rjmp	.+616    	; 0xb98 <adc_deferred+0x29a>
     930:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <adc_deferred_enable>
     934:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <adc_channel>
     938:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <go_to_standby>
     93c:	99 23       	and	r25, r25
     93e:	29 f0       	breq	.+10     	; 0x94a <adc_deferred+0x4c>
     940:	93 b1       	in	r25, 0x03	; 3
     942:	9f 77       	andi	r25, 0x7F	; 127
     944:	93 b9       	out	0x03, r25	; 3
     946:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_channel>
     94a:	81 11       	cpse	r24, r1
     94c:	40 c0       	rjmp	.+128    	; 0x9ce <adc_deferred+0xd0>
     94e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc_reset>
     952:	88 23       	and	r24, r24
     954:	49 f0       	breq	.+18     	; 0x968 <adc_deferred+0x6a>
     956:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <adc_raw>
     95a:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <adc_raw+0x1>
     95e:	90 93 e9 01 	sts	0x01E9, r25	; 0x8001e9 <adc_smooth+0x1>
     962:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <adc_smooth>
     966:	04 c0       	rjmp	.+8      	; 0x970 <adc_deferred+0x72>
     968:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <adc_smooth>
     96c:	90 91 e9 01 	lds	r25, 0x01E9	; 0x8001e9 <adc_smooth+0x1>
     970:	40 96       	adiw	r24, 0x10	; 16
     972:	80 7e       	andi	r24, 0xE0	; 224
     974:	96 95       	lsr	r25
     976:	87 95       	ror	r24
     978:	61 ec       	ldi	r22, 0xC1	; 193
     97a:	72 e0       	ldi	r23, 0x02	; 2
     97c:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
     980:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <voltage_correction>
     984:	68 0f       	add	r22, r24
     986:	67 50       	subi	r22, 0x07	; 7
     988:	60 93 86 01 	sts	0x0186, r22	; 0x800186 <voltage>
     98c:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <lvp_timer.2106>
     990:	88 23       	and	r24, r24
     992:	21 f0       	breq	.+8      	; 0x99c <adc_deferred+0x9e>
     994:	81 50       	subi	r24, 0x01	; 1
     996:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <lvp_timer.2106>
     99a:	0a c0       	rjmp	.+20     	; 0x9b0 <adc_deferred+0xb2>
     99c:	6d 31       	cpi	r22, 0x1D	; 29
     99e:	40 f4       	brcc	.+16     	; 0x9b0 <adc_deferred+0xb2>
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     9aa:	85 e0       	ldi	r24, 0x05	; 5
     9ac:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <lvp_timer.2106>
     9b0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
     9b4:	81 11       	cpse	r24, r1
     9b6:	e7 c0       	rjmp	.+462    	; 0xb86 <adc_deferred+0x288>
     9b8:	8e e8       	ldi	r24, 0x8E	; 142
     9ba:	84 b9       	out	0x04, r24	; 4
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <adc_channel>
     9c2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <adc_sample_count>
     9c6:	83 b1       	in	r24, 0x03	; 3
     9c8:	88 64       	ori	r24, 0x48	; 72
     9ca:	83 b9       	out	0x03, r24	; 3
     9cc:	dc c0       	rjmp	.+440    	; 0xb86 <adc_deferred+0x288>
     9ce:	81 30       	cpi	r24, 0x01	; 1
     9d0:	09 f0       	breq	.+2      	; 0x9d4 <adc_deferred+0xd6>
     9d2:	d9 c0       	rjmp	.+434    	; 0xb86 <adc_deferred+0x288>
     9d4:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc_reset>
     9d8:	88 23       	and	r24, r24
     9da:	01 f1       	breq	.+64     	; 0xa1c <adc_deferred+0x11e>
     9dc:	40 91 f1 01 	lds	r20, 0x01F1	; 0x8001f1 <adc_raw+0x2>
     9e0:	50 91 f2 01 	lds	r21, 0x01F2	; 0x8001f2 <adc_raw+0x3>
     9e4:	50 93 eb 01 	sts	0x01EB, r21	; 0x8001eb <adc_smooth+0x3>
     9e8:	40 93 ea 01 	sts	0x01EA, r20	; 0x8001ea <adc_smooth+0x2>
     9ec:	80 e0       	ldi	r24, 0x00	; 0
     9ee:	14 c0       	rjmp	.+40     	; 0xa18 <adc_deferred+0x11a>
     9f0:	e8 2f       	mov	r30, r24
     9f2:	f0 e0       	ldi	r31, 0x00	; 0
     9f4:	9a 01       	movw	r18, r20
     9f6:	20 5f       	subi	r18, 0xF0	; 240
     9f8:	3f 4f       	sbci	r19, 0xFF	; 255
     9fa:	36 95       	lsr	r19
     9fc:	27 95       	ror	r18
     9fe:	32 95       	swap	r19
     a00:	22 95       	swap	r18
     a02:	2f 70       	andi	r18, 0x0F	; 15
     a04:	23 27       	eor	r18, r19
     a06:	3f 70       	andi	r19, 0x0F	; 15
     a08:	23 27       	eor	r18, r19
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e1 5a       	subi	r30, 0xA1	; 161
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
     a12:	31 83       	std	Z+1, r19	; 0x01
     a14:	20 83       	st	Z, r18
     a16:	8f 5f       	subi	r24, 0xFF	; 255
     a18:	88 30       	cpi	r24, 0x08	; 8
     a1a:	50 f3       	brcs	.-44     	; 0x9f0 <adc_deferred+0xf2>
     a1c:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <adc_smooth+0x2>
     a20:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <adc_smooth+0x3>
     a24:	40 96       	adiw	r24, 0x10	; 16
     a26:	96 95       	lsr	r25
     a28:	87 95       	ror	r24
     a2a:	92 95       	swap	r25
     a2c:	82 95       	swap	r24
     a2e:	8f 70       	andi	r24, 0x0F	; 15
     a30:	89 27       	eor	r24, r25
     a32:	9f 70       	andi	r25, 0x0F	; 15
     a34:	89 27       	eor	r24, r25
     a36:	9c 01       	movw	r18, r24
     a38:	36 95       	lsr	r19
     a3a:	27 95       	ror	r18
     a3c:	e0 91 85 01 	lds	r30, 0x0185	; 0x800185 <therm_cal_offset>
     a40:	0e 2e       	mov	r0, r30
     a42:	00 0c       	add	r0, r0
     a44:	ff 0b       	sbc	r31, r31
     a46:	2e 0f       	add	r18, r30
     a48:	3f 1f       	adc	r19, r31
     a4a:	2a 50       	subi	r18, 0x0A	; 10
     a4c:	31 40       	sbci	r19, 0x01	; 1
     a4e:	30 93 af 01 	sts	0x01AF, r19	; 0x8001af <temperature+0x1>
     a52:	20 93 ae 01 	sts	0x01AE, r18	; 0x8001ae <temperature>
     a56:	60 91 5e 01 	lds	r22, 0x015E	; 0x80015e <history_step.2110>
     a5a:	a6 2f       	mov	r26, r22
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	aa 0f       	add	r26, r26
     a60:	bb 1f       	adc	r27, r27
     a62:	a1 5a       	subi	r26, 0xA1	; 161
     a64:	be 4f       	sbci	r27, 0xFE	; 254
     a66:	2d 91       	ld	r18, X+
     a68:	3c 91       	ld	r19, X
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	ac 01       	movw	r20, r24
     a6e:	42 1b       	sub	r20, r18
     a70:	53 0b       	sbc	r21, r19
     a72:	9a 01       	movw	r18, r20
     a74:	8d 93       	st	X+, r24
     a76:	9c 93       	st	X, r25
     a78:	6f 5f       	subi	r22, 0xFF	; 255
     a7a:	67 70       	andi	r22, 0x07	; 7
     a7c:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <history_step.2110>
     a80:	22 0f       	add	r18, r18
     a82:	33 1f       	adc	r19, r19
     a84:	22 0f       	add	r18, r18
     a86:	33 1f       	adc	r19, r19
     a88:	82 0f       	add	r24, r18
     a8a:	93 1f       	adc	r25, r19
     a8c:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <therm_ceil>
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	2d 5e       	subi	r18, 0xED	; 237
     a94:	3e 4f       	sbci	r19, 0xFE	; 254
     a96:	2e 1b       	sub	r18, r30
     a98:	3f 0b       	sbc	r19, r31
     a9a:	29 50       	subi	r18, 0x09	; 9
     a9c:	31 09       	sbc	r19, r1
     a9e:	22 0f       	add	r18, r18
     aa0:	33 1f       	adc	r19, r19
     aa2:	82 1b       	sub	r24, r18
     aa4:	93 0b       	sbc	r25, r19
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	09 c0       	rjmp	.+18     	; 0xabc <adc_deferred+0x1be>
     aaa:	18 16       	cp	r1, r24
     aac:	19 06       	cpc	r1, r25
     aae:	14 f4       	brge	.+4      	; 0xab4 <adc_deferred+0x1b6>
     ab0:	01 97       	sbiw	r24, 0x01	; 1
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <adc_deferred+0x1bc>
     ab4:	99 23       	and	r25, r25
     ab6:	0c f4       	brge	.+2      	; 0xaba <adc_deferred+0x1bc>
     ab8:	01 96       	adiw	r24, 0x01	; 1
     aba:	2f 5f       	subi	r18, 0xFF	; 255
     abc:	23 30       	cpi	r18, 0x03	; 3
     abe:	a8 f3       	brcs	.-22     	; 0xaaa <adc_deferred+0x1ac>
     ac0:	18 16       	cp	r1, r24
     ac2:	19 06       	cpc	r1, r25
     ac4:	64 f5       	brge	.+88     	; 0xb1e <adc_deferred+0x220>
     ac6:	55 23       	and	r21, r21
     ac8:	54 f1       	brlt	.+84     	; 0xb1e <adc_deferred+0x220>
     aca:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <warning_threshold.2112>
     ace:	12 16       	cp	r1, r18
     ad0:	24 f4       	brge	.+8      	; 0xada <adc_deferred+0x1dc>
     ad2:	28 1b       	sub	r18, r24
     ad4:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <warning_threshold.2112>
     ad8:	4d c0       	rjmp	.+154    	; 0xb74 <adc_deferred+0x276>
     ada:	88 0f       	add	r24, r24
     adc:	99 1f       	adc	r25, r25
     ade:	03 97       	sbiw	r24, 0x03	; 3
     ae0:	bc 01       	movw	r22, r24
     ae2:	00 24       	eor	r0, r0
     ae4:	76 95       	lsr	r23
     ae6:	67 95       	ror	r22
     ae8:	07 94       	ror	r0
     aea:	76 95       	lsr	r23
     aec:	67 95       	ror	r22
     aee:	07 94       	ror	r0
     af0:	76 2f       	mov	r23, r22
     af2:	60 2d       	mov	r22, r0
     af4:	91 ff       	sbrs	r25, 1
     af6:	02 c0       	rjmp	.+4      	; 0xafc <adc_deferred+0x1fe>
     af8:	61 58       	subi	r22, 0x81	; 129
     afa:	7f 4f       	sbci	r23, 0xFF	; 255
     afc:	66 0f       	add	r22, r22
     afe:	67 2f       	mov	r22, r23
     b00:	66 1f       	adc	r22, r22
     b02:	77 0b       	sbc	r23, r23
     b04:	16 16       	cp	r1, r22
     b06:	17 06       	cpc	r1, r23
     b08:	14 f0       	brlt	.+4      	; 0xb0e <adc_deferred+0x210>
     b0a:	61 e0       	ldi	r22, 0x01	; 1
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	88 e1       	ldi	r24, 0x18	; 24
     b10:	86 1b       	sub	r24, r22
     b12:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <warning_threshold.2112>
     b16:	85 e0       	ldi	r24, 0x05	; 5
     b18:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     b1c:	2b c0       	rjmp	.+86     	; 0xb74 <adc_deferred+0x276>
     b1e:	9c 01       	movw	r18, r24
     b20:	2c 5f       	subi	r18, 0xFC	; 252
     b22:	3f 4f       	sbci	r19, 0xFF	; 255
     b24:	f2 f4       	brpl	.+60     	; 0xb62 <adc_deferred+0x264>
     b26:	55 23       	and	r21, r21
     b28:	e4 f4       	brge	.+56     	; 0xb62 <adc_deferred+0x264>
     b2a:	20 91 5d 01 	lds	r18, 0x015D	; 0x80015d <warning_threshold.2112>
     b2e:	22 23       	and	r18, r18
     b30:	34 f4       	brge	.+12     	; 0xb3e <adc_deferred+0x240>
     b32:	28 1b       	sub	r18, r24
     b34:	82 2f       	mov	r24, r18
     b36:	84 50       	subi	r24, 0x04	; 4
     b38:	80 93 5d 01 	sts	0x015D, r24	; 0x80015d <warning_threshold.2112>
     b3c:	1b c0       	rjmp	.+54     	; 0xb74 <adc_deferred+0x276>
     b3e:	24 ee       	ldi	r18, 0xE4	; 228
     b40:	28 1b       	sub	r18, r24
     b42:	20 93 5d 01 	sts	0x015D, r18	; 0x80015d <warning_threshold.2112>
     b46:	6c ef       	ldi	r22, 0xFC	; 252
     b48:	7f ef       	ldi	r23, 0xFF	; 255
     b4a:	68 1b       	sub	r22, r24
     b4c:	79 0b       	sbc	r23, r25
     b4e:	75 95       	asr	r23
     b50:	67 95       	ror	r22
     b52:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
     b56:	8f 31       	cpi	r24, 0x1F	; 31
     b58:	68 f0       	brcs	.+26     	; 0xb74 <adc_deferred+0x276>
     b5a:	86 e0       	ldi	r24, 0x06	; 6
     b5c:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <adc_deferred+0x276>
     b62:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
     b66:	8e 31       	cpi	r24, 0x1E	; 30
     b68:	28 f0       	brcs	.+10     	; 0xb74 <adc_deferred+0x276>
     b6a:	60 e0       	ldi	r22, 0x00	; 0
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	87 e0       	ldi	r24, 0x07	; 7
     b70:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     b74:	86 e8       	ldi	r24, 0x86	; 134
     b76:	84 b9       	out	0x04, r24	; 4
     b78:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_channel>
     b7c:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <adc_sample_count>
     b80:	83 b1       	in	r24, 0x03	; 3
     b82:	88 64       	ori	r24, 0x48	; 72
     b84:	83 b9       	out	0x03, r24	; 3
     b86:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc_reset>
     b8a:	88 23       	and	r24, r24
     b8c:	29 f0       	breq	.+10     	; 0xb98 <adc_deferred+0x29a>
     b8e:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <adc_reset>
     b92:	81 50       	subi	r24, 0x01	; 1
     b94:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_reset>
     b98:	08 95       	ret

00000b9a <WDT_on>:
     b9a:	a8 95       	wdr
     b9c:	80 e4       	ldi	r24, 0x40	; 64
     b9e:	80 bf       	out	0x30, r24	; 48
     ba0:	08 95       	ret

00000ba2 <__vector_5>:
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	8f 93       	push	r24
     bae:	81 e0       	ldi	r24, 0x01	; 1
     bb0:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <irq_wdt>
     bb4:	8f 91       	pop	r24
     bb6:	0f 90       	pop	r0
     bb8:	0f be       	out	0x3f, r0	; 63
     bba:	0f 90       	pop	r0
     bbc:	1f 90       	pop	r1
     bbe:	18 95       	reti

00000bc0 <button_is_pressed>:
     bc0:	8f b1       	in	r24, 0x0f	; 15
     bc2:	80 95       	com	r24
     bc4:	88 1f       	adc	r24, r24
     bc6:	88 27       	eor	r24, r24
     bc8:	88 1f       	adc	r24, r24
     bca:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <button_last_state>
     bce:	08 95       	ret

00000bd0 <__vector_2>:
     bd0:	1f 92       	push	r1
     bd2:	0f 92       	push	r0
     bd4:	0f b6       	in	r0, 0x3f	; 63
     bd6:	0f 92       	push	r0
     bd8:	11 24       	eor	r1, r1
     bda:	8f 93       	push	r24
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <irq_pcint>
     be2:	8f 91       	pop	r24
     be4:	0f 90       	pop	r0
     be6:	0f be       	out	0x3f, r0	; 63
     be8:	0f 90       	pop	r0
     bea:	1f 90       	pop	r1
     bec:	18 95       	reti

00000bee <PCINT_inner>:
     bee:	80 93 b1 01 	sts	0x01B1, r24	; 0x8001b1 <button_last_state>
     bf2:	88 23       	and	r24, r24
     bf4:	41 f0       	breq	.+16     	; 0xc06 <PCINT_inner+0x18>
     bf6:	80 e1       	ldi	r24, 0x10	; 16
     bf8:	0e 94 04 04 	call	0x808	; 0x808 <push_event>
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <emit_current_event>
     c04:	09 c0       	rjmp	.+18     	; 0xc18 <PCINT_inner+0x2a>
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	0e 94 04 04 	call	0x808	; 0x808 <push_event>
     c0c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <ticks_since_last_event>
     c10:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <ticks_since_last_event+0x1>
     c14:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <emit_current_event>
     c18:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <ticks_since_last_event+0x1>
     c1c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <ticks_since_last_event>
     c20:	08 95       	ret

00000c22 <WDT_inner>:
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <irq_wdt>
     c2a:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <ticks_since_last_event>
     c2e:	90 91 8c 01 	lds	r25, 0x018C	; 0x80018c <ticks_since_last_event+0x1>
     c32:	9c 01       	movw	r18, r24
     c34:	2f 5f       	subi	r18, 0xFF	; 255
     c36:	3f 4f       	sbci	r19, 0xFF	; 255
     c38:	88 27       	eor	r24, r24
     c3a:	90 78       	andi	r25, 0x80	; 128
     c3c:	82 2b       	or	r24, r18
     c3e:	93 2b       	or	r25, r19
     c40:	90 93 8c 01 	sts	0x018C, r25	; 0x80018c <ticks_since_last_event+0x1>
     c44:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <ticks_since_last_event>
     c48:	c0 91 b1 01 	lds	r28, 0x01B1	; 0x8001b1 <button_last_state>
     c4c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <button_is_pressed>
     c50:	c8 17       	cp	r28, r24
     c52:	21 f0       	breq	.+8      	; 0xc5c <WDT_inner+0x3a>
     c54:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <go_to_standby>
     c58:	0e 94 f7 05 	call	0xbee	; 0xbee <PCINT_inner>
     c5c:	c0 91 8b 01 	lds	r28, 0x018B	; 0x80018b <ticks_since_last_event>
     c60:	d0 91 8c 01 	lds	r29, 0x018C	; 0x80018c <ticks_since_last_event+0x1>
     c64:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
     c68:	88 23       	and	r24, r24
     c6a:	09 f1       	breq	.+66     	; 0xcae <WDT_inner+0x8c>
     c6c:	be 01       	movw	r22, r28
     c6e:	83 e0       	ldi	r24, 0x03	; 3
     c70:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     c74:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <process_emissions>
     c78:	cf 73       	andi	r28, 0x3F	; 63
     c7a:	dd 27       	eor	r29, r29
     c7c:	cd 2b       	or	r28, r29
     c7e:	09 f0       	breq	.+2      	; 0xc82 <WDT_inner+0x60>
     c80:	5f c0       	rjmp	.+190    	; 0xd40 <WDT_inner+0x11e>
     c82:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <adc_trigger.2154>
     c86:	86 e8       	ldi	r24, 0x86	; 134
     c88:	84 b9       	out	0x04, r24	; 4
     c8a:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_channel>
     c8e:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <adc_sample_count>
     c92:	83 b1       	in	r24, 0x03	; 3
     c94:	88 64       	ori	r24, 0x48	; 72
     c96:	83 b9       	out	0x03, r24	; 3
     c98:	e1 e6       	ldi	r30, 0x61	; 97
     c9a:	f0 e0       	ldi	r31, 0x00	; 0
     c9c:	80 81       	ld	r24, Z
     c9e:	82 60       	ori	r24, 0x02	; 2
     ca0:	80 83       	st	Z, r24
     ca2:	82 b1       	in	r24, 0x02	; 2
     ca4:	88 60       	ori	r24, 0x08	; 8
     ca6:	82 b9       	out	0x02, r24	; 2
     ca8:	87 ee       	ldi	r24, 0xE7	; 231
     caa:	83 b9       	out	0x03, r24	; 3
     cac:	39 c0       	rjmp	.+114    	; 0xd20 <WDT_inner+0xfe>
     cae:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <current_event>
     cb2:	80 7f       	andi	r24, 0xF0	; 240
     cb4:	80 3b       	cpi	r24, 0xB0	; 176
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <WDT_inner+0xa2>
     cb8:	60 e0       	ldi	r22, 0x00	; 0
     cba:	70 e0       	ldi	r23, 0x00	; 0
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <WDT_inner+0xaa>
     cc4:	be 01       	movw	r22, r28
     cc6:	81 e0       	ldi	r24, 0x01	; 1
     cc8:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <emit>
     ccc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <current_event>
     cd0:	84 ff       	sbrs	r24, 4
     cd2:	14 c0       	rjmp	.+40     	; 0xcfc <WDT_inner+0xda>
     cd4:	85 ff       	sbrs	r24, 5
     cd6:	04 c0       	rjmp	.+8      	; 0xce0 <WDT_inner+0xbe>
     cd8:	ce 01       	movw	r24, r28
     cda:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <emit_current_event>
     cde:	20 c0       	rjmp	.+64     	; 0xd20 <WDT_inner+0xfe>
     ce0:	68 97       	sbiw	r28, 0x18	; 24
     ce2:	f0 f0       	brcs	.+60     	; 0xd20 <WDT_inner+0xfe>
     ce4:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <ticks_since_last_event+0x1>
     ce8:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <ticks_since_last_event>
     cec:	80 62       	ori	r24, 0x20	; 32
     cee:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <current_event>
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <emit_current_event>
     cfa:	12 c0       	rjmp	.+36     	; 0xd20 <WDT_inner+0xfe>
     cfc:	88 23       	and	r24, r24
     cfe:	81 f0       	breq	.+32     	; 0xd20 <WDT_inner+0xfe>
     d00:	85 ff       	sbrs	r24, 5
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <WDT_inner+0xe8>
     d04:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <empty_event_sequence>
     d08:	0b c0       	rjmp	.+22     	; 0xd20 <WDT_inner+0xfe>
     d0a:	62 97       	sbiw	r28, 0x12	; 18
     d0c:	48 f0       	brcs	.+18     	; 0xd20 <WDT_inner+0xfe>
     d0e:	80 64       	ori	r24, 0x40	; 64
     d10:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <current_event>
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	90 e0       	ldi	r25, 0x00	; 0
     d18:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <emit_current_event>
     d1c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <empty_event_sequence>
     d20:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_trigger.2154>
     d24:	81 11       	cpse	r24, r1
     d26:	06 c0       	rjmp	.+12     	; 0xd34 <WDT_inner+0x112>
     d28:	83 b1       	in	r24, 0x03	; 3
     d2a:	88 64       	ori	r24, 0x48	; 72
     d2c:	83 b9       	out	0x03, r24	; 3
     d2e:	81 e0       	ldi	r24, 0x01	; 1
     d30:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <adc_deferred_enable>
     d34:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <adc_trigger.2154>
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	8f 71       	andi	r24, 0x1F	; 31
     d3c:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <adc_trigger.2154>
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	08 95       	ret

00000d46 <sleep_until_eswitch_pressed>:
     d46:	a8 95       	wdr
     d48:	83 e4       	ldi	r24, 0x43	; 67
     d4a:	80 bf       	out	0x30, r24	; 48
     d4c:	83 b1       	in	r24, 0x03	; 3
     d4e:	8f 77       	andi	r24, 0x7F	; 127
     d50:	83 b9       	out	0x03, r24	; 3
     d52:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <button_is_pressed>
     d56:	81 11       	cpse	r24, r1
     d58:	fc cf       	rjmp	.-8      	; 0xd52 <sleep_until_eswitch_pressed+0xc>
     d5a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <empty_event_sequence>
     d5e:	8c b7       	in	r24, 0x3c	; 60
     d60:	88 60       	ori	r24, 0x08	; 8
     d62:	8c bf       	out	0x3c, r24	; 60
     d64:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <irq_adc>
     d68:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <irq_wdt>
     d6c:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <irq_pcint>
     d70:	20 c0       	rjmp	.+64     	; 0xdb2 <sleep_until_eswitch_pressed+0x6c>
     d72:	86 b7       	in	r24, 0x36	; 54
     d74:	8f 79       	andi	r24, 0x9F	; 159
     d76:	80 64       	ori	r24, 0x40	; 64
     d78:	86 bf       	out	0x36, r24	; 54
     d7a:	86 b7       	in	r24, 0x36	; 54
     d7c:	80 61       	ori	r24, 0x10	; 16
     d7e:	86 bf       	out	0x36, r24	; 54
     d80:	88 95       	sleep
     d82:	86 b7       	in	r24, 0x36	; 54
     d84:	8f 7e       	andi	r24, 0xEF	; 239
     d86:	86 bf       	out	0x36, r24	; 54
     d88:	80 91 82 01 	lds	r24, 0x0182	; 0x800182 <irq_pcint>
     d8c:	81 11       	cpse	r24, r1
     d8e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <go_to_standby>
     d92:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <irq_adc>
     d96:	88 23       	and	r24, r24
     d98:	39 f0       	breq	.+14     	; 0xda8 <sleep_until_eswitch_pressed+0x62>
     d9a:	81 e0       	ldi	r24, 0x01	; 1
     d9c:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_reset>
     da0:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <adc_deferred_enable>
     da4:	0e 94 7f 04 	call	0x8fe	; 0x8fe <adc_deferred>
     da8:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <irq_wdt>
     dac:	81 11       	cpse	r24, r1
     dae:	0e 94 11 06 	call	0xc22	; 0xc22 <WDT_inner>
     db2:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
     db6:	81 11       	cpse	r24, r1
     db8:	dc cf       	rjmp	.-72     	; 0xd72 <sleep_until_eswitch_pressed+0x2c>
     dba:	82 e0       	ldi	r24, 0x02	; 2
     dbc:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <adc_reset>
     dc0:	8c b7       	in	r24, 0x3c	; 60
     dc2:	87 7f       	andi	r24, 0xF7	; 247
     dc4:	8c bf       	out	0x3c, r24	; 60
     dc6:	86 e8       	ldi	r24, 0x86	; 134
     dc8:	84 b9       	out	0x04, r24	; 4
     dca:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_channel>
     dce:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <adc_sample_count>
     dd2:	83 b1       	in	r24, 0x03	; 3
     dd4:	88 64       	ori	r24, 0x48	; 72
     dd6:	83 b9       	out	0x03, r24	; 3
     dd8:	e1 e6       	ldi	r30, 0x61	; 97
     dda:	f0 e0       	ldi	r31, 0x00	; 0
     ddc:	80 81       	ld	r24, Z
     dde:	82 60       	ori	r24, 0x02	; 2
     de0:	80 83       	st	Z, r24
     de2:	82 b1       	in	r24, 0x02	; 2
     de4:	88 60       	ori	r24, 0x08	; 8
     de6:	82 b9       	out	0x02, r24	; 2
     de8:	87 ee       	ldi	r24, 0xE7	; 231
     dea:	83 b9       	out	0x03, r24	; 3
     dec:	0e 94 cd 05 	call	0xb9a	; 0xb9a <WDT_on>
     df0:	08 95       	ret

00000df2 <idle_mode>:
     df2:	86 b7       	in	r24, 0x36	; 54
     df4:	8f 79       	andi	r24, 0x9F	; 159
     df6:	86 bf       	out	0x36, r24	; 54
     df8:	86 b7       	in	r24, 0x36	; 54
     dfa:	80 61       	ori	r24, 0x10	; 16
     dfc:	86 bf       	out	0x36, r24	; 54
     dfe:	88 95       	sleep
     e00:	86 b7       	in	r24, 0x36	; 54
     e02:	8f 7e       	andi	r24, 0xEF	; 239
     e04:	86 bf       	out	0x36, r24	; 54
     e06:	08 95       	ret

00000e08 <update_tint>:
     e08:	0f 93       	push	r16
     e0a:	1f 93       	push	r17
     e0c:	cf 93       	push	r28
     e0e:	df 93       	push	r29
     e10:	c0 91 ec 01 	lds	r28, 0x01EC	; 0x8001ec <PWM1_LVL>
     e14:	d0 91 ed 01 	lds	r29, 0x01ED	; 0x8001ed <PWM1_LVL+0x1>
     e18:	00 91 68 00 	lds	r16, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
     e1c:	10 91 69 00 	lds	r17, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7fc069>
     e20:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <actual_level>
     e24:	21 50       	subi	r18, 0x01	; 1
     e26:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
     e2a:	81 11       	cpse	r24, r1
     e2c:	19 c0       	rjmp	.+50     	; 0xe60 <update_tint+0x58>
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	c9 01       	movw	r24, r18
     e32:	82 95       	swap	r24
     e34:	92 95       	swap	r25
     e36:	90 7f       	andi	r25, 0xF0	; 240
     e38:	98 27       	eor	r25, r24
     e3a:	80 7f       	andi	r24, 0xF0	; 240
     e3c:	98 27       	eor	r25, r24
     e3e:	82 1b       	sub	r24, r18
     e40:	93 0b       	sbc	r25, r19
     e42:	9c 01       	movw	r18, r24
     e44:	22 95       	swap	r18
     e46:	32 95       	swap	r19
     e48:	30 7f       	andi	r19, 0xF0	; 240
     e4a:	32 27       	eor	r19, r18
     e4c:	20 7f       	andi	r18, 0xF0	; 240
     e4e:	32 27       	eor	r19, r18
     e50:	82 0f       	add	r24, r18
     e52:	93 1f       	adc	r25, r19
     e54:	66 e9       	ldi	r22, 0x96	; 150
     e56:	70 e0       	ldi	r23, 0x00	; 0
     e58:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
     e5c:	26 2f       	mov	r18, r22
     e5e:	36 c0       	rjmp	.+108    	; 0xecc <update_tint+0xc4>
     e60:	8f 3f       	cpi	r24, 0xFF	; 255
     e62:	d1 f4       	brne	.+52     	; 0xe98 <update_tint+0x90>
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	c9 01       	movw	r24, r18
     e68:	82 95       	swap	r24
     e6a:	92 95       	swap	r25
     e6c:	90 7f       	andi	r25, 0xF0	; 240
     e6e:	98 27       	eor	r25, r24
     e70:	80 7f       	andi	r24, 0xF0	; 240
     e72:	98 27       	eor	r25, r24
     e74:	82 1b       	sub	r24, r18
     e76:	93 0b       	sbc	r25, r19
     e78:	9c 01       	movw	r18, r24
     e7a:	22 95       	swap	r18
     e7c:	32 95       	swap	r19
     e7e:	30 7f       	andi	r19, 0xF0	; 240
     e80:	32 27       	eor	r19, r18
     e82:	20 7f       	andi	r18, 0xF0	; 240
     e84:	32 27       	eor	r19, r18
     e86:	82 0f       	add	r24, r18
     e88:	93 1f       	adc	r25, r19
     e8a:	66 e9       	ldi	r22, 0x96	; 150
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
     e92:	26 2f       	mov	r18, r22
     e94:	20 95       	com	r18
     e96:	1a c0       	rjmp	.+52     	; 0xecc <update_tint+0xc4>
     e98:	28 2f       	mov	r18, r24
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	c9 01       	movw	r24, r18
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	82 0f       	add	r24, r18
     ea4:	93 1f       	adc	r25, r19
     ea6:	ac 01       	movw	r20, r24
     ea8:	44 0f       	add	r20, r20
     eaa:	55 1f       	adc	r21, r21
     eac:	42 95       	swap	r20
     eae:	52 95       	swap	r21
     eb0:	50 7f       	andi	r21, 0xF0	; 240
     eb2:	54 27       	eor	r21, r20
     eb4:	40 7f       	andi	r20, 0xF0	; 240
     eb6:	54 27       	eor	r21, r20
     eb8:	84 0f       	add	r24, r20
     eba:	95 1f       	adc	r25, r21
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	63 e6       	ldi	r22, 0x63	; 99
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
     ec8:	2f ef       	ldi	r18, 0xFF	; 255
     eca:	26 0f       	add	r18, r22
     ecc:	be 01       	movw	r22, r28
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__mulsi3>
     edc:	61 58       	subi	r22, 0x81	; 129
     ede:	7f 4f       	sbci	r23, 0xFF	; 255
     ee0:	8f 4f       	sbci	r24, 0xFF	; 255
     ee2:	9f 4f       	sbci	r25, 0xFF	; 255
     ee4:	2f ef       	ldi	r18, 0xFF	; 255
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e0       	ldi	r20, 0x00	; 0
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	0e 94 2a 18 	call	0x3054	; 0x3054 <__udivmodsi4>
     ef0:	ce 01       	movw	r24, r28
     ef2:	82 1b       	sub	r24, r18
     ef4:	93 0b       	sbc	r25, r19
     ef6:	02 17       	cp	r16, r18
     ef8:	13 07       	cpc	r17, r19
     efa:	28 f4       	brcc	.+10     	; 0xf06 <update_tint+0xfe>
     efc:	20 1b       	sub	r18, r16
     efe:	31 0b       	sbc	r19, r17
     f00:	82 0f       	add	r24, r18
     f02:	93 1f       	adc	r25, r19
     f04:	0b c0       	rjmp	.+22     	; 0xf1c <update_tint+0x114>
     f06:	08 17       	cp	r16, r24
     f08:	19 07       	cpc	r17, r25
     f0a:	38 f4       	brcc	.+14     	; 0xf1a <update_tint+0x112>
     f0c:	80 1b       	sub	r24, r16
     f0e:	91 0b       	sbc	r25, r17
     f10:	28 0f       	add	r18, r24
     f12:	39 1f       	adc	r19, r25
     f14:	c8 01       	movw	r24, r16
     f16:	89 01       	movw	r16, r18
     f18:	01 c0       	rjmp	.+2      	; 0xf1c <update_tint+0x114>
     f1a:	89 01       	movw	r16, r18
     f1c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
     f20:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
     f24:	10 93 6b 00 	sts	0x006B, r17	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
     f28:	00 93 6a 00 	sts	0x006A, r16	; 0x80006a <__TEXT_REGION_LENGTH__+0x7fc06a>
     f2c:	89 2b       	or	r24, r25
     f2e:	21 f0       	breq	.+8      	; 0xf38 <update_tint+0x130>
     f30:	81 b3       	in	r24, 0x11	; 17
     f32:	81 60       	ori	r24, 0x01	; 1
     f34:	81 bb       	out	0x11, r24	; 17
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <update_tint+0x136>
     f38:	81 b3       	in	r24, 0x11	; 17
     f3a:	8e 7f       	andi	r24, 0xFE	; 254
     f3c:	81 bb       	out	0x11, r24	; 17
     f3e:	01 2b       	or	r16, r17
     f40:	21 f0       	breq	.+8      	; 0xf4a <update_tint+0x142>
     f42:	81 b3       	in	r24, 0x11	; 17
     f44:	82 60       	ori	r24, 0x02	; 2
     f46:	81 bb       	out	0x11, r24	; 17
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <update_tint+0x148>
     f4a:	81 b3       	in	r24, 0x11	; 17
     f4c:	8d 7f       	andi	r24, 0xFD	; 253
     f4e:	81 bb       	out	0x11, r24	; 17
     f50:	df 91       	pop	r29
     f52:	cf 91       	pop	r28
     f54:	1f 91       	pop	r17
     f56:	0f 91       	pop	r16
     f58:	08 95       	ret

00000f5a <pseudo_rand>:
     f5a:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <offset.2232>
     f5e:	f0 91 08 01 	lds	r31, 0x0108	; 0x800108 <offset.2232+0x1>
     f62:	31 96       	adiw	r30, 0x01	; 1
     f64:	fb 70       	andi	r31, 0x0B	; 11
     f66:	f4 60       	ori	r31, 0x04	; 4
     f68:	f0 93 08 01 	sts	0x0108, r31	; 0x800108 <offset.2232+0x1>
     f6c:	e0 93 07 01 	sts	0x0107, r30	; 0x800107 <offset.2232>
     f70:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <pseudo_rand_seed>
     f74:	8b 5a       	subi	r24, 0xAB	; 171
     f76:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <pseudo_rand_seed>
     f7a:	e4 91       	lpm	r30, Z
     f7c:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <pseudo_rand_seed>
     f80:	8e 0f       	add	r24, r30
     f82:	08 95       	ret

00000f84 <load_eeprom>:
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	82 e0       	ldi	r24, 0x02	; 2
     f8c:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
     f90:	f8 94       	cli
     f92:	80 e8       	ldi	r24, 0x80	; 128
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	0e 94 4c 18 	call	0x3098	; 0x3098 <eeprom_read_byte>
     f9a:	85 3a       	cpi	r24, 0xA5	; 165
     f9c:	79 f0       	breq	.+30     	; 0xfbc <load_eeprom+0x38>
     f9e:	78 94       	sei
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	11 c0       	rjmp	.+34     	; 0xfc6 <load_eeprom+0x42>
     fa4:	c1 2f       	mov	r28, r17
     fa6:	d0 e0       	ldi	r29, 0x00	; 0
     fa8:	ce 01       	movw	r24, r28
     faa:	8f 57       	subi	r24, 0x7F	; 127
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	0e 94 4c 18 	call	0x3098	; 0x3098 <eeprom_read_byte>
     fb2:	c3 57       	subi	r28, 0x73	; 115
     fb4:	de 4f       	sbci	r29, 0xFE	; 254
     fb6:	88 83       	st	Y, r24
     fb8:	1f 5f       	subi	r17, 0xFF	; 255
     fba:	01 c0       	rjmp	.+2      	; 0xfbe <load_eeprom+0x3a>
     fbc:	10 e0       	ldi	r17, 0x00	; 0
     fbe:	1e 31       	cpi	r17, 0x1E	; 30
     fc0:	88 f3       	brcs	.-30     	; 0xfa4 <load_eeprom+0x20>
     fc2:	78 94       	sei
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	df 91       	pop	r29
     fc8:	cf 91       	pop	r28
     fca:	1f 91       	pop	r17
     fcc:	08 95       	ret

00000fce <save_eeprom>:
     fce:	cf 93       	push	r28
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
     fd6:	f8 94       	cli
     fd8:	c0 e0       	ldi	r28, 0x00	; 0
     fda:	0b c0       	rjmp	.+22     	; 0xff2 <save_eeprom+0x24>
     fdc:	8c 2f       	mov	r24, r28
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	fc 01       	movw	r30, r24
     fe2:	e3 57       	subi	r30, 0x73	; 115
     fe4:	fe 4f       	sbci	r31, 0xFE	; 254
     fe6:	60 81       	ld	r22, Z
     fe8:	8f 57       	subi	r24, 0x7F	; 127
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	0e 94 54 18 	call	0x30a8	; 0x30a8 <eeprom_update_byte>
     ff0:	cf 5f       	subi	r28, 0xFF	; 255
     ff2:	ce 31       	cpi	r28, 0x1E	; 30
     ff4:	98 f3       	brcs	.-26     	; 0xfdc <save_eeprom+0xe>
     ff6:	65 ea       	ldi	r22, 0xA5	; 165
     ff8:	80 e8       	ldi	r24, 0x80	; 128
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 54 18 	call	0x30a8	; 0x30a8 <eeprom_update_byte>
    1000:	78 94       	sei
    1002:	cf 91       	pop	r28
    1004:	08 95       	ret

00001006 <auto_clock_speed>:
    1006:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    100a:	82 30       	cpi	r24, 0x02	; 2
    100c:	38 f4       	brcc	.+14     	; 0x101c <auto_clock_speed+0x16>
    100e:	f8 94       	cli
    1010:	88 ed       	ldi	r24, 0xD8	; 216
    1012:	8f bd       	out	0x2f, r24	; 47
    1014:	82 e0       	ldi	r24, 0x02	; 2
    1016:	83 bf       	out	0x33, r24	; 51
    1018:	78 94       	sei
    101a:	08 95       	ret
    101c:	8a 30       	cpi	r24, 0x0A	; 10
    101e:	38 f4       	brcc	.+14     	; 0x102e <auto_clock_speed+0x28>
    1020:	f8 94       	cli
    1022:	88 ed       	ldi	r24, 0xD8	; 216
    1024:	8f bd       	out	0x2f, r24	; 47
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	83 bf       	out	0x33, r24	; 51
    102a:	78 94       	sei
    102c:	08 95       	ret
    102e:	f8 94       	cli
    1030:	88 ed       	ldi	r24, 0xD8	; 216
    1032:	8f bd       	out	0x2f, r24	; 47
    1034:	13 be       	out	0x33, r1	; 51
    1036:	78 94       	sei
    1038:	08 95       	ret

0000103a <button_led_set>:
    103a:	88 23       	and	r24, r24
    103c:	19 f0       	breq	.+6      	; 0x1044 <button_led_set+0xa>
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	59 f0       	breq	.+22     	; 0x1058 <button_led_set+0x1e>
    1042:	14 c0       	rjmp	.+40     	; 0x106c <button_led_set+0x32>
    1044:	80 b3       	in	r24, 0x10	; 16
    1046:	8b 7f       	andi	r24, 0xFB	; 251
    1048:	80 bb       	out	0x10, r24	; 16
    104a:	82 b3       	in	r24, 0x12	; 18
    104c:	8b 7f       	andi	r24, 0xFB	; 251
    104e:	82 bb       	out	0x12, r24	; 18
    1050:	81 b3       	in	r24, 0x11	; 17
    1052:	8b 7f       	andi	r24, 0xFB	; 251
    1054:	81 bb       	out	0x11, r24	; 17
    1056:	08 95       	ret
    1058:	80 b3       	in	r24, 0x10	; 16
    105a:	8b 7f       	andi	r24, 0xFB	; 251
    105c:	80 bb       	out	0x10, r24	; 16
    105e:	82 b3       	in	r24, 0x12	; 18
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	82 bb       	out	0x12, r24	; 18
    1064:	81 b3       	in	r24, 0x11	; 17
    1066:	84 60       	ori	r24, 0x04	; 4
    1068:	81 bb       	out	0x11, r24	; 17
    106a:	08 95       	ret
    106c:	80 b3       	in	r24, 0x10	; 16
    106e:	84 60       	ori	r24, 0x04	; 4
    1070:	80 bb       	out	0x10, r24	; 16
    1072:	82 b3       	in	r24, 0x12	; 18
    1074:	84 60       	ori	r24, 0x04	; 4
    1076:	82 bb       	out	0x12, r24	; 18
    1078:	81 b3       	in	r24, 0x11	; 17
    107a:	84 60       	ori	r24, 0x04	; 4
    107c:	81 bb       	out	0x11, r24	; 17
    107e:	08 95       	ret

00001080 <rgb_led_set>:
    1080:	cf 93       	push	r28
    1082:	df 93       	push	r29
    1084:	00 d0       	rcall	.+0      	; 0x1086 <rgb_led_set+0x6>
    1086:	1f 92       	push	r1
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	99 83       	std	Y+1, r25	; 0x01
    1090:	94 e0       	ldi	r25, 0x04	; 4
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	93 e0       	ldi	r25, 0x03	; 3
    1096:	9b 83       	std	Y+3, r25	; 0x03
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	51 c0       	rjmp	.+162    	; 0x113e <rgb_led_set+0xbe>
    109c:	49 2f       	mov	r20, r25
    109e:	50 e0       	ldi	r21, 0x00	; 0
    10a0:	ba 01       	movw	r22, r20
    10a2:	66 0f       	add	r22, r22
    10a4:	77 1f       	adc	r23, r23
    10a6:	28 2f       	mov	r18, r24
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	02 c0       	rjmp	.+4      	; 0x10b0 <rgb_led_set+0x30>
    10ac:	35 95       	asr	r19
    10ae:	27 95       	ror	r18
    10b0:	6a 95       	dec	r22
    10b2:	e2 f7       	brpl	.-8      	; 0x10ac <rgb_led_set+0x2c>
    10b4:	23 70       	andi	r18, 0x03	; 3
    10b6:	e1 e0       	ldi	r30, 0x01	; 1
    10b8:	f0 e0       	ldi	r31, 0x00	; 0
    10ba:	ec 0f       	add	r30, r28
    10bc:	fd 1f       	adc	r31, r29
    10be:	e4 0f       	add	r30, r20
    10c0:	f5 1f       	adc	r31, r21
    10c2:	40 81       	ld	r20, Z
    10c4:	22 23       	and	r18, r18
    10c6:	19 f0       	breq	.+6      	; 0x10ce <rgb_led_set+0x4e>
    10c8:	21 30       	cpi	r18, 0x01	; 1
    10ca:	a1 f0       	breq	.+40     	; 0x10f4 <rgb_led_set+0x74>
    10cc:	26 c0       	rjmp	.+76     	; 0x111a <rgb_led_set+0x9a>
    10ce:	50 b3       	in	r21, 0x10	; 16
    10d0:	21 e0       	ldi	r18, 0x01	; 1
    10d2:	30 e0       	ldi	r19, 0x00	; 0
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <rgb_led_set+0x5a>
    10d6:	22 0f       	add	r18, r18
    10d8:	33 1f       	adc	r19, r19
    10da:	4a 95       	dec	r20
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <rgb_led_set+0x56>
    10de:	20 95       	com	r18
    10e0:	35 2f       	mov	r19, r21
    10e2:	32 23       	and	r19, r18
    10e4:	30 bb       	out	0x10, r19	; 16
    10e6:	32 b3       	in	r19, 0x12	; 18
    10e8:	32 23       	and	r19, r18
    10ea:	32 bb       	out	0x12, r19	; 18
    10ec:	31 b3       	in	r19, 0x11	; 17
    10ee:	23 23       	and	r18, r19
    10f0:	21 bb       	out	0x11, r18	; 17
    10f2:	24 c0       	rjmp	.+72     	; 0x113c <rgb_led_set+0xbc>
    10f4:	50 b3       	in	r21, 0x10	; 16
    10f6:	21 e0       	ldi	r18, 0x01	; 1
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	02 c0       	rjmp	.+4      	; 0x1100 <rgb_led_set+0x80>
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	4a 95       	dec	r20
    1102:	e2 f7       	brpl	.-8      	; 0x10fc <rgb_led_set+0x7c>
    1104:	32 2f       	mov	r19, r18
    1106:	30 95       	com	r19
    1108:	35 23       	and	r19, r21
    110a:	30 bb       	out	0x10, r19	; 16
    110c:	32 b3       	in	r19, 0x12	; 18
    110e:	32 2b       	or	r19, r18
    1110:	32 bb       	out	0x12, r19	; 18
    1112:	31 b3       	in	r19, 0x11	; 17
    1114:	23 2b       	or	r18, r19
    1116:	21 bb       	out	0x11, r18	; 17
    1118:	11 c0       	rjmp	.+34     	; 0x113c <rgb_led_set+0xbc>
    111a:	50 b3       	in	r21, 0x10	; 16
    111c:	21 e0       	ldi	r18, 0x01	; 1
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	02 c0       	rjmp	.+4      	; 0x1126 <rgb_led_set+0xa6>
    1122:	22 0f       	add	r18, r18
    1124:	33 1f       	adc	r19, r19
    1126:	4a 95       	dec	r20
    1128:	e2 f7       	brpl	.-8      	; 0x1122 <rgb_led_set+0xa2>
    112a:	35 2f       	mov	r19, r21
    112c:	32 2b       	or	r19, r18
    112e:	30 bb       	out	0x10, r19	; 16
    1130:	32 b3       	in	r19, 0x12	; 18
    1132:	32 2b       	or	r19, r18
    1134:	32 bb       	out	0x12, r19	; 18
    1136:	31 b3       	in	r19, 0x11	; 17
    1138:	23 2b       	or	r18, r19
    113a:	21 bb       	out	0x11, r18	; 17
    113c:	9f 5f       	subi	r25, 0xFF	; 255
    113e:	93 30       	cpi	r25, 0x03	; 3
    1140:	08 f4       	brcc	.+2      	; 0x1144 <rgb_led_set+0xc4>
    1142:	ac cf       	rjmp	.-168    	; 0x109c <rgb_led_set+0x1c>
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	df 91       	pop	r29
    114c:	cf 91       	pop	r28
    114e:	08 95       	ret

00001150 <set_level>:
    1150:	cf 93       	push	r28
    1152:	c8 2f       	mov	r28, r24
    1154:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    1158:	81 11       	cpse	r24, r1
    115a:	0b c0       	rjmp	.+22     	; 0x1172 <set_level+0x22>
    115c:	cc 23       	and	r28, r28
    115e:	49 f0       	breq	.+18     	; 0x1172 <set_level+0x22>
    1160:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <jump_start_level>
    1164:	c8 17       	cp	r28, r24
    1166:	28 f4       	brcc	.+10     	; 0x1172 <set_level+0x22>
    1168:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
    1172:	c0 93 80 01 	sts	0x0180, r28	; 0x800180 <actual_level>
    1176:	c0 93 b0 01 	sts	0x01B0, r28	; 0x8001b0 <gradual_target>
    117a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
    117e:	81 11       	cpse	r24, r1
    1180:	0d c0       	rjmp	.+26     	; 0x119c <set_level+0x4c>
    1182:	0e 94 40 08 	call	0x1080	; 0x1080 <rgb_led_set>
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	c1 11       	cpse	r28, r1
    118a:	01 c0       	rjmp	.+2      	; 0x118e <set_level+0x3e>
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	c7 34       	cpi	r28, 0x47	; 71
    1192:	08 f4       	brcc	.+2      	; 0x1196 <set_level+0x46>
    1194:	80 e0       	ldi	r24, 0x00	; 0
    1196:	89 0f       	add	r24, r25
    1198:	0e 94 1d 08 	call	0x103a	; 0x103a <button_led_set>
    119c:	c1 11       	cpse	r28, r1
    119e:	14 c0       	rjmp	.+40     	; 0x11c8 <set_level+0x78>
    11a0:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <PWM1_LVL+0x1>
    11a4:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <PWM1_LVL>
    11a8:	18 ba       	out	0x18, r1	; 24
    11aa:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
    11ae:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__TEXT_REGION_LENGTH__+0x7fc06c>
    11b2:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
    11b6:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7fc06a>
    11ba:	81 b3       	in	r24, 0x11	; 17
    11bc:	8e 7f       	andi	r24, 0xFE	; 254
    11be:	81 bb       	out	0x11, r24	; 17
    11c0:	81 b3       	in	r24, 0x11	; 17
    11c2:	8d 7f       	andi	r24, 0xFD	; 253
    11c4:	81 bb       	out	0x11, r24	; 17
    11c6:	34 c0       	rjmp	.+104    	; 0x1230 <set_level+0xe0>
    11c8:	8f ef       	ldi	r24, 0xFF	; 255
    11ca:	8c 0f       	add	r24, r28
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	88 0f       	add	r24, r24
    11d0:	99 1f       	adc	r25, r25
    11d2:	fc 01       	movw	r30, r24
    11d4:	e4 52       	subi	r30, 0x24	; 36
    11d6:	fd 4f       	sbci	r31, 0xFD	; 253
    11d8:	25 91       	lpm	r18, Z+
    11da:	34 91       	lpm	r19, Z
    11dc:	30 93 ed 01 	sts	0x01ED, r19	; 0x8001ed <PWM1_LVL+0x1>
    11e0:	20 93 ec 01 	sts	0x01EC, r18	; 0x8001ec <PWM1_LVL>
    11e4:	fc 01       	movw	r30, r24
    11e6:	e0 55       	subi	r30, 0x50	; 80
    11e8:	fe 4f       	sbci	r31, 0xFE	; 254
    11ea:	25 91       	lpm	r18, Z+
    11ec:	34 91       	lpm	r19, Z
    11ee:	28 bb       	out	0x18, r18	; 24
    11f0:	fc 01       	movw	r30, r24
    11f2:	ec 57       	subi	r30, 0x7C	; 124
    11f4:	ff 4f       	sbci	r31, 0xFF	; 255
    11f6:	65 91       	lpm	r22, Z+
    11f8:	74 91       	lpm	r23, Z
    11fa:	ab 01       	movw	r20, r22
    11fc:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <prev_level.2186>
    1200:	88 23       	and	r24, r24
    1202:	51 f0       	breq	.+20     	; 0x1218 <set_level+0xc8>
    1204:	20 91 6e 00 	lds	r18, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
    1208:	30 91 6f 00 	lds	r19, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    120c:	ca 01       	movw	r24, r20
    120e:	80 54       	subi	r24, 0x40	; 64
    1210:	91 09       	sbc	r25, r1
    1212:	82 17       	cp	r24, r18
    1214:	93 07       	cpc	r25, r19
    1216:	90 f3       	brcs	.-28     	; 0x11fc <set_level+0xac>
    1218:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__TEXT_REGION_LENGTH__+0x7fc069>
    121c:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>
    1220:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <prev_level.2186>
    1224:	81 11       	cpse	r24, r1
    1226:	04 c0       	rjmp	.+8      	; 0x1230 <set_level+0xe0>
    1228:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    122c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7fc06e>
    1230:	0e 94 04 07 	call	0xe08	; 0xe08 <update_tint>
    1234:	c0 93 5b 01 	sts	0x015B, r28	; 0x80015b <prev_level.2186>
    1238:	0e 94 03 08 	call	0x1006	; 0x1006 <auto_clock_speed>
    123c:	cf 91       	pop	r28
    123e:	08 95       	ret

00001240 <gradual_tick>:
    1240:	cf 93       	push	r28
    1242:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gradual_target>
    1246:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <actual_level>
    124a:	89 17       	cp	r24, r25
    124c:	18 f4       	brcc	.+6      	; 0x1254 <gradual_tick+0x14>
    124e:	8f ef       	ldi	r24, 0xFF	; 255
    1250:	89 0f       	add	r24, r25
    1252:	04 c0       	rjmp	.+8      	; 0x125c <gradual_tick+0x1c>
    1254:	98 17       	cp	r25, r24
    1256:	10 f4       	brcc	.+4      	; 0x125c <gradual_tick+0x1c>
    1258:	81 e0       	ldi	r24, 0x01	; 1
    125a:	89 0f       	add	r24, r25
    125c:	af ef       	ldi	r26, 0xFF	; 255
    125e:	a8 0f       	add	r26, r24
    1260:	2a 2f       	mov	r18, r26
    1262:	30 e0       	ldi	r19, 0x00	; 0
    1264:	22 0f       	add	r18, r18
    1266:	33 1f       	adc	r19, r19
    1268:	a9 01       	movw	r20, r18
    126a:	44 52       	subi	r20, 0x24	; 36
    126c:	5d 4f       	sbci	r21, 0xFD	; 253
    126e:	fa 01       	movw	r30, r20
    1270:	65 91       	lpm	r22, Z+
    1272:	74 91       	lpm	r23, Z
    1274:	a9 17       	cp	r26, r25
    1276:	88 f4       	brcc	.+34     	; 0x129a <gradual_tick+0x5a>
    1278:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <PWM1_LVL>
    127c:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <PWM1_LVL+0x1>
    1280:	ef 2b       	or	r30, r31
    1282:	59 f4       	brne	.+22     	; 0x129a <gradual_tick+0x5a>
    1284:	6f 3f       	cpi	r22, 0xFF	; 255
    1286:	91 e0       	ldi	r25, 0x01	; 1
    1288:	79 07       	cpc	r23, r25
    128a:	39 f4       	brne	.+14     	; 0x129a <gradual_tick+0x5a>
    128c:	6f ef       	ldi	r22, 0xFF	; 255
    128e:	71 e0       	ldi	r23, 0x01	; 1
    1290:	70 93 ed 01 	sts	0x01ED, r23	; 0x8001ed <PWM1_LVL+0x1>
    1294:	60 93 ec 01 	sts	0x01EC, r22	; 0x8001ec <PWM1_LVL>
    1298:	15 c0       	rjmp	.+42     	; 0x12c4 <gradual_tick+0x84>
    129a:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <PWM1_LVL>
    129e:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <PWM1_LVL+0x1>
    12a2:	e6 17       	cp	r30, r22
    12a4:	f7 07       	cpc	r31, r23
    12a6:	30 f4       	brcc	.+12     	; 0x12b4 <gradual_tick+0x74>
    12a8:	31 96       	adiw	r30, 0x01	; 1
    12aa:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <PWM1_LVL+0x1>
    12ae:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <PWM1_LVL>
    12b2:	08 c0       	rjmp	.+16     	; 0x12c4 <gradual_tick+0x84>
    12b4:	6e 17       	cp	r22, r30
    12b6:	7f 07       	cpc	r23, r31
    12b8:	28 f4       	brcc	.+10     	; 0x12c4 <gradual_tick+0x84>
    12ba:	31 97       	sbiw	r30, 0x01	; 1
    12bc:	f0 93 ed 01 	sts	0x01ED, r31	; 0x8001ed <PWM1_LVL+0x1>
    12c0:	e0 93 ec 01 	sts	0x01EC, r30	; 0x8001ec <PWM1_LVL>
    12c4:	20 55       	subi	r18, 0x50	; 80
    12c6:	3e 4f       	sbci	r19, 0xFE	; 254
    12c8:	f9 01       	movw	r30, r18
    12ca:	65 91       	lpm	r22, Z+
    12cc:	74 91       	lpm	r23, Z
    12ce:	a8 b3       	in	r26, 0x18	; 24
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	a6 17       	cp	r26, r22
    12d4:	b7 07       	cpc	r27, r23
    12d6:	20 f4       	brcc	.+8      	; 0x12e0 <gradual_tick+0xa0>
    12d8:	98 b3       	in	r25, 0x18	; 24
    12da:	9f 5f       	subi	r25, 0xFF	; 255
    12dc:	98 bb       	out	0x18, r25	; 24
    12de:	08 c0       	rjmp	.+16     	; 0x12f0 <gradual_tick+0xb0>
    12e0:	e8 b3       	in	r30, 0x18	; 24
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	6e 17       	cp	r22, r30
    12e6:	7f 07       	cpc	r23, r31
    12e8:	18 f4       	brcc	.+6      	; 0x12f0 <gradual_tick+0xb0>
    12ea:	98 b3       	in	r25, 0x18	; 24
    12ec:	91 50       	subi	r25, 0x01	; 1
    12ee:	98 bb       	out	0x18, r25	; 24
    12f0:	fa 01       	movw	r30, r20
    12f2:	65 91       	lpm	r22, Z+
    12f4:	74 91       	lpm	r23, Z
    12f6:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <PWM1_LVL>
    12fa:	50 91 ed 01 	lds	r21, 0x01ED	; 0x8001ed <PWM1_LVL+0x1>
    12fe:	64 17       	cp	r22, r20
    1300:	75 07       	cpc	r23, r21
    1302:	71 f4       	brne	.+28     	; 0x1320 <gradual_tick+0xe0>
    1304:	48 b3       	in	r20, 0x18	; 24
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	f9 01       	movw	r30, r18
    130a:	25 91       	lpm	r18, Z+
    130c:	34 91       	lpm	r19, Z
    130e:	42 17       	cp	r20, r18
    1310:	53 07       	cpc	r21, r19
    1312:	31 f4       	brne	.+12     	; 0x1320 <gradual_tick+0xe0>
    1314:	c0 91 b0 01 	lds	r28, 0x01B0	; 0x8001b0 <gradual_target>
    1318:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    131c:	c0 93 b0 01 	sts	0x01B0, r28	; 0x8001b0 <gradual_target>
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <number_entry_state>:
    1324:	88 30       	cpi	r24, 0x08	; 8
    1326:	41 f4       	brne	.+16     	; 0x1338 <number_entry_state+0x14>
    1328:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <number_entry_value>
    132c:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <entry_step.2546>
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1336:	41 c0       	rjmp	.+130    	; 0x13ba <number_entry_state+0x96>
    1338:	81 30       	cpi	r24, 0x01	; 1
    133a:	31 f5       	brne	.+76     	; 0x1388 <number_entry_state+0x64>
    133c:	80 91 55 01 	lds	r24, 0x0155	; 0x800155 <entry_step.2546>
    1340:	81 11       	cpse	r24, r1
    1342:	09 c0       	rjmp	.+18     	; 0x1356 <number_entry_state+0x32>
    1344:	60 32       	cpi	r22, 0x20	; 32
    1346:	71 05       	cpc	r23, r1
    1348:	c0 f1       	brcs	.+112    	; 0x13ba <number_entry_state+0x96>
    134a:	8f 5f       	subi	r24, 0xFF	; 255
    134c:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <entry_step.2546>
    1350:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <empty_event_sequence>
    1354:	32 c0       	rjmp	.+100    	; 0x13ba <number_entry_state+0x96>
    1356:	81 30       	cpi	r24, 0x01	; 1
    1358:	a1 f4       	brne	.+40     	; 0x1382 <number_entry_state+0x5e>
    135a:	6b 3b       	cpi	r22, 0xBB	; 187
    135c:	71 05       	cpc	r23, r1
    135e:	38 f0       	brcs	.+14     	; 0x136e <number_entry_state+0x4a>
    1360:	8f 5f       	subi	r24, 0xFF	; 255
    1362:	80 93 55 01 	sts	0x0155, r24	; 0x800155 <entry_step.2546>
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    136c:	26 c0       	rjmp	.+76     	; 0x13ba <number_entry_state+0x96>
    136e:	61 15       	cp	r22, r1
    1370:	71 05       	cpc	r23, r1
    1372:	19 f1       	breq	.+70     	; 0x13ba <number_entry_state+0x96>
    1374:	62 70       	andi	r22, 0x02	; 2
    1376:	86 2f       	mov	r24, r22
    1378:	88 0f       	add	r24, r24
    137a:	8e 5e       	subi	r24, 0xEE	; 238
    137c:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1380:	1c c0       	rjmp	.+56     	; 0x13ba <number_entry_state+0x96>
    1382:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pop_state>
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <number_entry_state+0x96>
    1388:	81 38       	cpi	r24, 0x81	; 129
    138a:	11 f0       	breq	.+4      	; 0x1390 <number_entry_state+0x6c>
    138c:	81 3e       	cpi	r24, 0xE1	; 225
    138e:	a9 f4       	brne	.+42     	; 0x13ba <number_entry_state+0x96>
    1390:	91 e0       	ldi	r25, 0x01	; 1
    1392:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <entry_step.2546>
    1396:	81 3e       	cpi	r24, 0xE1	; 225
    1398:	31 f4       	brne	.+12     	; 0x13a6 <number_entry_state+0x82>
    139a:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <number_entry_value>
    139e:	86 5f       	subi	r24, 0xF6	; 246
    13a0:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <number_entry_value>
    13a4:	05 c0       	rjmp	.+10     	; 0x13b0 <number_entry_state+0x8c>
    13a6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <number_entry_value>
    13aa:	8f 5f       	subi	r24, 0xFF	; 255
    13ac:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <number_entry_value>
    13b0:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <empty_event_sequence>
    13b4:	8b e4       	ldi	r24, 0x4B	; 75
    13b6:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	08 95       	ret

000013be <triangle_wave>:
    13be:	98 2f       	mov	r25, r24
    13c0:	99 0f       	add	r25, r25
    13c2:	88 23       	and	r24, r24
    13c4:	0c f4       	brge	.+2      	; 0x13c8 <triangle_wave+0xa>
    13c6:	90 95       	com	r25
    13c8:	89 2f       	mov	r24, r25
    13ca:	08 95       	ret

000013cc <reboot>:
    13cc:	f8 94       	cli
    13ce:	88 ed       	ldi	r24, 0xD8	; 216
    13d0:	8f bd       	out	0x2f, r24	; 47
    13d2:	88 e8       	ldi	r24, 0x88	; 136
    13d4:	80 bf       	out	0x30, r24	; 48
    13d6:	78 94       	sei
    13d8:	a8 95       	wdr
    13da:	ff cf       	rjmp	.-2      	; 0x13da <reboot+0xe>

000013dc <handle_deferred_interrupts>:
    13dc:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <irq_adc>
    13e0:	81 11       	cpse	r24, r1
    13e2:	0e 94 7f 04 	call	0x8fe	; 0x8fe <adc_deferred>
    13e6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <irq_wdt>
    13ea:	81 11       	cpse	r24, r1
    13ec:	0e 94 11 06 	call	0xc22	; 0xc22 <WDT_inner>
    13f0:	08 95       	ret

000013f2 <nice_delay_ms>:
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	26 c0       	rjmp	.+76     	; 0x1444 <nice_delay_ms+0x52>
    13f8:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <nice_delay_interrupt>
    13fc:	81 11       	cpse	r24, r1
    13fe:	28 c0       	rjmp	.+80     	; 0x1450 <nice_delay_ms+0x5e>
    1400:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	58 f4       	brcc	.+22     	; 0x141e <nice_delay_ms+0x2c>
    1408:	f8 94       	cli
    140a:	88 ed       	ldi	r24, 0xD8	; 216
    140c:	8f bd       	out	0x2f, r24	; 47
    140e:	82 e0       	ldi	r24, 0x02	; 2
    1410:	83 bf       	out	0x33, r24	; 51
    1412:	78 94       	sei
    1414:	82 ec       	ldi	r24, 0xC2	; 194
    1416:	91 e0       	ldi	r25, 0x01	; 1
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	f1 f7       	brne	.-4      	; 0x1418 <nice_delay_ms+0x26>
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <nice_delay_ms+0x3e>
    141e:	f8 94       	cli
    1420:	88 ed       	ldi	r24, 0xD8	; 216
    1422:	8f bd       	out	0x2f, r24	; 47
    1424:	13 be       	out	0x33, r1	; 51
    1426:	78 94       	sei
    1428:	88 e0       	ldi	r24, 0x08	; 8
    142a:	97 e0       	ldi	r25, 0x07	; 7
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	f1 f7       	brne	.-4      	; 0x142c <nice_delay_ms+0x3a>
    1430:	f8 94       	cli
    1432:	88 ed       	ldi	r24, 0xD8	; 216
    1434:	8f bd       	out	0x2f, r24	; 47
    1436:	13 be       	out	0x33, r1	; 51
    1438:	78 94       	sei
    143a:	0e 94 ee 09 	call	0x13dc	; 0x13dc <handle_deferred_interrupts>
    143e:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <process_emissions>
    1442:	ce 01       	movw	r24, r28
    1444:	ec 01       	movw	r28, r24
    1446:	21 97       	sbiw	r28, 0x01	; 1
    1448:	89 2b       	or	r24, r25
    144a:	b1 f6       	brne	.-84     	; 0x13f8 <nice_delay_ms+0x6>
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <nice_delay_ms+0x60>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	df 91       	pop	r29
    1454:	cf 91       	pop	r28
    1456:	08 95       	ret

00001458 <blink_digit>:
    1458:	cf 93       	push	r28
    145a:	df 93       	push	r29
    145c:	c8 2f       	mov	r28, r24
    145e:	81 11       	cpse	r24, r1
    1460:	03 c0       	rjmp	.+6      	; 0x1468 <blink_digit+0x10>
    1462:	cf 5f       	subi	r28, 0xFF	; 255
    1464:	d8 e0       	ldi	r29, 0x08	; 8
    1466:	11 c0       	rjmp	.+34     	; 0x148a <blink_digit+0x32>
    1468:	d6 ea       	ldi	r29, 0xA6	; 166
    146a:	0f c0       	rjmp	.+30     	; 0x148a <blink_digit+0x32>
    146c:	86 e4       	ldi	r24, 0x46	; 70
    146e:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1472:	8d 2f       	mov	r24, r29
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1480:	8a ef       	ldi	r24, 0xFA	; 250
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    1488:	c1 50       	subi	r28, 0x01	; 1
    148a:	c1 11       	cpse	r28, r1
    148c:	ef cf       	rjmp	.-34     	; 0x146c <blink_digit+0x14>
    148e:	8a e9       	ldi	r24, 0x9A	; 154
    1490:	92 e0       	ldi	r25, 0x02	; 2
    1492:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    1496:	df 91       	pop	r29
    1498:	cf 91       	pop	r28
    149a:	08 95       	ret

0000149c <blink_num>:
    149c:	0f 93       	push	r16
    149e:	1f 93       	push	r17
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	64 e6       	ldi	r22, 0x64	; 100
    14a6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    14aa:	28 2f       	mov	r18, r24
    14ac:	89 2f       	mov	r24, r25
    14ae:	c2 2f       	mov	r28, r18
    14b0:	6a e0       	ldi	r22, 0x0A	; 10
    14b2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    14b6:	d8 2f       	mov	r29, r24
    14b8:	19 2f       	mov	r17, r25
    14ba:	08 2f       	mov	r16, r24
    14bc:	22 23       	and	r18, r18
    14be:	19 f0       	breq	.+6      	; 0x14c6 <blink_num+0x2a>
    14c0:	82 2f       	mov	r24, r18
    14c2:	0e 94 2c 0a 	call	0x1458	; 0x1458 <blink_digit>
    14c6:	c1 11       	cpse	r28, r1
    14c8:	02 c0       	rjmp	.+4      	; 0x14ce <blink_num+0x32>
    14ca:	00 23       	and	r16, r16
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <blink_num+0x38>
    14ce:	8d 2f       	mov	r24, r29
    14d0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <blink_digit>
    14d4:	81 2f       	mov	r24, r17
    14d6:	0e 94 2c 0a 	call	0x1458	; 0x1458 <blink_digit>
    14da:	df 91       	pop	r29
    14dc:	cf 91       	pop	r28
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	08 95       	ret

000014e4 <battcheck>:
    14e4:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <voltage>
    14e8:	0e 94 4e 0a 	call	0x149c	; 0x149c <blink_num>
    14ec:	08 95       	ret

000014ee <ramp_update_config>:
    14ee:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ramp_style>
    14f2:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <simple_ui_active>
    14f6:	91 11       	cpse	r25, r1
    14f8:	82 e0       	ldi	r24, 0x02	; 2
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	fc 01       	movw	r30, r24
    14fe:	ea 5e       	subi	r30, 0xEA	; 234
    1500:	fe 4f       	sbci	r31, 0xFE	; 254
    1502:	20 81       	ld	r18, Z
    1504:	20 93 1a 01 	sts	0x011A, r18	; 0x80011a <ramp_floor>
    1508:	fc 01       	movw	r30, r24
    150a:	ed 5e       	subi	r30, 0xED	; 237
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	80 81       	ld	r24, Z
    1510:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <ramp_ceil>
    1514:	08 95       	ret

00001516 <nearest_level>:
    1516:	ff 92       	push	r15
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
    1520:	ec 01       	movw	r28, r24
    1522:	0e 94 77 0a 	call	0x14ee	; 0x14ee <ramp_update_config>
    1526:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <ramp_floor>
    152a:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <ramp_ceil>
    152e:	e0 91 1c 01 	lds	r30, 0x011C	; 0x80011c <simple_ui_active>
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	ef 5e       	subi	r30, 0xEF	; 239
    1536:	fe 4f       	sbci	r31, 0xFE	; 254
    1538:	00 81       	ld	r16, Z
    153a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ramp_style>
    153e:	88 23       	and	r24, r24
    1540:	49 f0       	breq	.+18     	; 0x1554 <nearest_level+0x3e>
    1542:	01 30       	cpi	r16, 0x01	; 1
    1544:	39 f4       	brne	.+14     	; 0x1554 <nearest_level+0x3e>
    1546:	83 2f       	mov	r24, r19
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	86 0f       	add	r24, r22
    154c:	91 1d       	adc	r25, r1
    154e:	95 95       	asr	r25
    1550:	87 95       	ror	r24
    1552:	3f c0       	rjmp	.+126    	; 0x15d2 <nearest_level+0xbc>
    1554:	43 2f       	mov	r20, r19
    1556:	50 e0       	ldi	r21, 0x00	; 0
    1558:	c4 17       	cp	r28, r20
    155a:	d5 07       	cpc	r29, r21
    155c:	ac f1       	brlt	.+106    	; 0x15c8 <nearest_level+0xb2>
    155e:	46 2f       	mov	r20, r22
    1560:	50 e0       	ldi	r21, 0x00	; 0
    1562:	4c 17       	cp	r20, r28
    1564:	5d 07       	cpc	r21, r29
    1566:	94 f1       	brlt	.+100    	; 0x15cc <nearest_level+0xb6>
    1568:	81 11       	cpse	r24, r1
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <nearest_level+0x5a>
    156c:	8c 2f       	mov	r24, r28
    156e:	31 c0       	rjmp	.+98     	; 0x15d2 <nearest_level+0xbc>
    1570:	16 2f       	mov	r17, r22
    1572:	13 1b       	sub	r17, r19
    1574:	e0 2f       	mov	r30, r16
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	31 97       	sbiw	r30, 0x01	; 1
    157a:	81 2f       	mov	r24, r17
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	bf 01       	movw	r22, r30
    1580:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    1584:	f6 2e       	mov	r15, r22
    1586:	60 93 ad 01 	sts	0x01AD, r22	; 0x8001ad <ramp_discrete_step_size>
    158a:	63 2f       	mov	r22, r19
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	18 c0       	rjmp	.+48     	; 0x15c0 <nearest_level+0xaa>
    1590:	61 2f       	mov	r22, r17
    1592:	70 e0       	ldi	r23, 0x00	; 0
    1594:	82 2f       	mov	r24, r18
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
    159c:	bf 01       	movw	r22, r30
    159e:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    15a2:	63 0f       	add	r22, r19
    15a4:	de 01       	movw	r26, r28
    15a6:	a6 1b       	sub	r26, r22
    15a8:	b1 09       	sbc	r27, r1
    15aa:	1a f4       	brpl	.+6      	; 0x15b2 <nearest_level+0x9c>
    15ac:	b1 95       	neg	r27
    15ae:	a1 95       	neg	r26
    15b0:	b1 09       	sbc	r27, r1
    15b2:	4f 2d       	mov	r20, r15
    15b4:	46 95       	lsr	r20
    15b6:	50 e0       	ldi	r21, 0x00	; 0
    15b8:	4a 17       	cp	r20, r26
    15ba:	5b 07       	cpc	r21, r27
    15bc:	4c f4       	brge	.+18     	; 0x15d0 <nearest_level+0xba>
    15be:	2f 5f       	subi	r18, 0xFF	; 255
    15c0:	20 17       	cp	r18, r16
    15c2:	30 f3       	brcs	.-52     	; 0x1590 <nearest_level+0x7a>
    15c4:	86 2f       	mov	r24, r22
    15c6:	05 c0       	rjmp	.+10     	; 0x15d2 <nearest_level+0xbc>
    15c8:	83 2f       	mov	r24, r19
    15ca:	03 c0       	rjmp	.+6      	; 0x15d2 <nearest_level+0xbc>
    15cc:	86 2f       	mov	r24, r22
    15ce:	01 c0       	rjmp	.+2      	; 0x15d2 <nearest_level+0xbc>
    15d0:	86 2f       	mov	r24, r22
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	08 95       	ret

000015de <set_level_and_therm_target>:
    15de:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <target_level>
    15e2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    15e6:	08 95       	ret

000015e8 <load_config>:
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	0e 94 c2 07 	call	0xf84	; 0xf84 <load_eeprom>
    15f0:	88 23       	and	r24, r24
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <load_config+0xe>
    15f4:	64 c0       	rjmp	.+200    	; 0x16be <load_config+0xd6>
    15f6:	ed e8       	ldi	r30, 0x8D	; 141
    15f8:	f1 e0       	ldi	r31, 0x01	; 1
    15fa:	80 81       	ld	r24, Z
    15fc:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <ramp_style>
    1600:	21 81       	ldd	r18, Z+1	; 0x01
    1602:	86 e1       	ldi	r24, 0x16	; 22
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	dc 01       	movw	r26, r24
    1608:	2c 93       	st	X, r18
    160a:	22 81       	ldd	r18, Z+2	; 0x02
    160c:	c3 e1       	ldi	r28, 0x13	; 19
    160e:	d1 e0       	ldi	r29, 0x01	; 1
    1610:	28 83       	st	Y, r18
    1612:	23 81       	ldd	r18, Z+3	; 0x03
    1614:	40 e1       	ldi	r20, 0x10	; 16
    1616:	51 e0       	ldi	r21, 0x01	; 1
    1618:	da 01       	movw	r26, r20
    161a:	2c 93       	st	X, r18
    161c:	24 81       	ldd	r18, Z+4	; 0x04
    161e:	dc 01       	movw	r26, r24
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	2c 93       	st	X, r18
    1624:	25 81       	ldd	r18, Z+5	; 0x05
    1626:	29 83       	std	Y+1, r18	; 0x01
    1628:	26 81       	ldd	r18, Z+6	; 0x06
    162a:	da 01       	movw	r26, r20
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	2c 93       	st	X, r18
    1630:	27 81       	ldd	r18, Z+7	; 0x07
    1632:	dc 01       	movw	r26, r24
    1634:	12 96       	adiw	r26, 0x02	; 2
    1636:	2c 93       	st	X, r18
    1638:	80 85       	ldd	r24, Z+8	; 0x08
    163a:	8a 83       	std	Y+2, r24	; 0x02
    163c:	81 85       	ldd	r24, Z+9	; 0x09
    163e:	da 01       	movw	r26, r20
    1640:	12 96       	adiw	r26, 0x02	; 2
    1642:	8c 93       	st	X, r24
    1644:	82 85       	ldd	r24, Z+10	; 0x0a
    1646:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <simple_ui_active>
    164a:	83 85       	ldd	r24, Z+11	; 0x0b
    164c:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <ramp_2c_style_simple>
    1650:	84 85       	ldd	r24, Z+12	; 0x0c
    1652:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <dont_ramp_after_moon>
    1656:	85 85       	ldd	r24, Z+13	; 0x0d
    1658:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <ramp_2c_style>
    165c:	86 85       	ldd	r24, Z+14	; 0x0e
    165e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <manual_memory>
    1662:	87 85       	ldd	r24, Z+15	; 0x0f
    1664:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <manual_memory_timer>
    1668:	80 89       	ldd	r24, Z+16	; 0x10
    166a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <manual_memory_tint>
    166e:	81 89       	ldd	r24, Z+17	; 0x11
    1670:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
    1674:	82 89       	ldd	r24, Z+18	; 0x12
    1676:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <jump_start_level>
    167a:	83 89       	ldd	r24, Z+19	; 0x13
    167c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <strobe_type>
    1680:	84 89       	ldd	r24, Z+20	; 0x14
    1682:	aa e0       	ldi	r26, 0x0A	; 10
    1684:	b1 e0       	ldi	r27, 0x01	; 1
    1686:	8c 93       	st	X, r24
    1688:	85 89       	ldd	r24, Z+21	; 0x15
    168a:	11 96       	adiw	r26, 0x01	; 1
    168c:	8c 93       	st	X, r24
    168e:	86 89       	ldd	r24, Z+22	; 0x16
    1690:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bike_flasher_brightness>
    1694:	87 89       	ldd	r24, Z+23	; 0x17
    1696:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <beacon_seconds>
    169a:	80 8d       	ldd	r24, Z+24	; 0x18
    169c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <therm_ceil>
    16a0:	81 8d       	ldd	r24, Z+25	; 0x19
    16a2:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <therm_cal_offset>
    16a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    16a8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <voltage_correction>
    16ac:	83 8d       	ldd	r24, Z+27	; 0x1b
    16ae:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rgb_led_off_mode>
    16b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    16b4:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rgb_led_lockout_mode>
    16b8:	85 8d       	ldd	r24, Z+29	; 0x1d
    16ba:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <autolock_time>
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	08 95       	ret

000016c4 <save_config>:
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	ed e8       	ldi	r30, 0x8D	; 141
    16ca:	f1 e0       	ldi	r31, 0x01	; 1
    16cc:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ramp_style>
    16d0:	80 83       	st	Z, r24
    16d2:	86 e1       	ldi	r24, 0x16	; 22
    16d4:	91 e0       	ldi	r25, 0x01	; 1
    16d6:	dc 01       	movw	r26, r24
    16d8:	2c 91       	ld	r18, X
    16da:	21 83       	std	Z+1, r18	; 0x01
    16dc:	c3 e1       	ldi	r28, 0x13	; 19
    16de:	d1 e0       	ldi	r29, 0x01	; 1
    16e0:	28 81       	ld	r18, Y
    16e2:	22 83       	std	Z+2, r18	; 0x02
    16e4:	40 e1       	ldi	r20, 0x10	; 16
    16e6:	51 e0       	ldi	r21, 0x01	; 1
    16e8:	da 01       	movw	r26, r20
    16ea:	2c 91       	ld	r18, X
    16ec:	23 83       	std	Z+3, r18	; 0x03
    16ee:	dc 01       	movw	r26, r24
    16f0:	11 96       	adiw	r26, 0x01	; 1
    16f2:	2c 91       	ld	r18, X
    16f4:	24 83       	std	Z+4, r18	; 0x04
    16f6:	29 81       	ldd	r18, Y+1	; 0x01
    16f8:	25 83       	std	Z+5, r18	; 0x05
    16fa:	da 01       	movw	r26, r20
    16fc:	11 96       	adiw	r26, 0x01	; 1
    16fe:	2c 91       	ld	r18, X
    1700:	26 83       	std	Z+6, r18	; 0x06
    1702:	dc 01       	movw	r26, r24
    1704:	12 96       	adiw	r26, 0x02	; 2
    1706:	8c 91       	ld	r24, X
    1708:	87 83       	std	Z+7, r24	; 0x07
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	80 87       	std	Z+8, r24	; 0x08
    170e:	da 01       	movw	r26, r20
    1710:	12 96       	adiw	r26, 0x02	; 2
    1712:	8c 91       	ld	r24, X
    1714:	81 87       	std	Z+9, r24	; 0x09
    1716:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <simple_ui_active>
    171a:	82 87       	std	Z+10, r24	; 0x0a
    171c:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ramp_2c_style_simple>
    1720:	83 87       	std	Z+11, r24	; 0x0b
    1722:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <dont_ramp_after_moon>
    1726:	84 87       	std	Z+12, r24	; 0x0c
    1728:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ramp_2c_style>
    172c:	85 87       	std	Z+13, r24	; 0x0d
    172e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <manual_memory>
    1732:	86 87       	std	Z+14, r24	; 0x0e
    1734:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <manual_memory_timer>
    1738:	87 87       	std	Z+15, r24	; 0x0f
    173a:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <manual_memory_tint>
    173e:	80 8b       	std	Z+16, r24	; 0x10
    1740:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    1744:	81 8b       	std	Z+17, r24	; 0x11
    1746:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <jump_start_level>
    174a:	82 8b       	std	Z+18, r24	; 0x12
    174c:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <strobe_type>
    1750:	83 8b       	std	Z+19, r24	; 0x13
    1752:	aa e0       	ldi	r26, 0x0A	; 10
    1754:	b1 e0       	ldi	r27, 0x01	; 1
    1756:	8c 91       	ld	r24, X
    1758:	84 8b       	std	Z+20, r24	; 0x14
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	8c 91       	ld	r24, X
    175e:	85 8b       	std	Z+21, r24	; 0x15
    1760:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bike_flasher_brightness>
    1764:	86 8b       	std	Z+22, r24	; 0x16
    1766:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <beacon_seconds>
    176a:	87 8b       	std	Z+23, r24	; 0x17
    176c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <therm_ceil>
    1770:	80 8f       	std	Z+24, r24	; 0x18
    1772:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <therm_cal_offset>
    1776:	81 8f       	std	Z+25, r24	; 0x19
    1778:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <voltage_correction>
    177c:	82 8f       	std	Z+26, r24	; 0x1a
    177e:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rgb_led_off_mode>
    1782:	83 8f       	std	Z+27, r24	; 0x1b
    1784:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1788:	84 8f       	std	Z+28, r24	; 0x1c
    178a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <autolock_time>
    178e:	85 8f       	std	Z+29, r24	; 0x1d
    1790:	0e 94 e7 07 	call	0xfce	; 0xfce <save_eeprom>
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <config_state_base>:
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	a9 f4       	brne	.+42     	; 0x17c8 <config_state_base+0x2e>
    179e:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <config_step.2541>
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    17a8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <button_last_state>
    17ac:	81 11       	cpse	r24, r1
    17ae:	4a c0       	rjmp	.+148    	; 0x1844 <config_state_base+0xaa>
    17b0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <config_step.2541>
    17b4:	8f 5f       	subi	r24, 0xFF	; 255
    17b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <config_step.2541>
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	82 e9       	ldi	r24, 0x92	; 146
    17c0:	99 e0       	ldi	r25, 0x09	; 9
    17c2:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
    17c6:	3e c0       	rjmp	.+124    	; 0x1844 <config_state_base+0xaa>
    17c8:	98 2f       	mov	r25, r24
    17ca:	90 7f       	andi	r25, 0xF0	; 240
    17cc:	90 3b       	cpi	r25, 0xB0	; 176
    17ce:	e1 f4       	brne	.+56     	; 0x1808 <config_state_base+0x6e>
    17d0:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <config_step.2541>
    17d4:	42 17       	cp	r20, r18
    17d6:	a0 f0       	brcs	.+40     	; 0x1800 <config_state_base+0x66>
    17d8:	cb 01       	movw	r24, r22
    17da:	6d e5       	ldi	r22, 0x5D	; 93
    17dc:	70 e0       	ldi	r23, 0x00	; 0
    17de:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    17e2:	02 97       	sbiw	r24, 0x02	; 2
    17e4:	49 f4       	brne	.+18     	; 0x17f8 <config_state_base+0x5e>
    17e6:	2f 5f       	subi	r18, 0xFF	; 255
    17e8:	20 93 56 01 	sts	0x0156, r18	; 0x800156 <config_step.2541>
    17ec:	42 17       	cp	r20, r18
    17ee:	50 f1       	brcs	.+84     	; 0x1844 <config_state_base+0xaa>
    17f0:	88 e3       	ldi	r24, 0x38	; 56
    17f2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    17f6:	26 c0       	rjmp	.+76     	; 0x1844 <config_state_base+0xaa>
    17f8:	82 e1       	ldi	r24, 0x12	; 18
    17fa:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    17fe:	22 c0       	rjmp	.+68     	; 0x1844 <config_state_base+0xaa>
    1800:	80 e0       	ldi	r24, 0x00	; 0
    1802:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1806:	1e c0       	rjmp	.+60     	; 0x1844 <config_state_base+0xaa>
    1808:	90 3e       	cpi	r25, 0xE0	; 224
    180a:	81 f4       	brne	.+32     	; 0x182c <config_state_base+0x92>
    180c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <config_step.2541>
    1810:	88 23       	and	r24, r24
    1812:	49 f0       	breq	.+18     	; 0x1826 <config_state_base+0x8c>
    1814:	48 17       	cp	r20, r24
    1816:	38 f0       	brcs	.+14     	; 0x1826 <config_state_base+0x8c>
    1818:	60 e0       	ldi	r22, 0x00	; 0
    181a:	70 e0       	ldi	r23, 0x00	; 0
    181c:	82 e9       	ldi	r24, 0x92	; 146
    181e:	99 e0       	ldi	r25, 0x09	; 9
    1820:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
    1824:	0f c0       	rjmp	.+30     	; 0x1844 <config_state_base+0xaa>
    1826:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pop_state>
    182a:	0c c0       	rjmp	.+24     	; 0x1844 <config_state_base+0xaa>
    182c:	8a 30       	cpi	r24, 0x0A	; 10
    182e:	51 f4       	brne	.+20     	; 0x1844 <config_state_base+0xaa>
    1830:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <number_entry_value>
    1834:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <config_step.2541>
    1838:	f9 01       	movw	r30, r18
    183a:	09 95       	icall
    183c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
    1840:	0e 94 e7 02 	call	0x5ce	; 0x5ce <pop_state>
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	08 95       	ret

00001848 <ramp_config_state>:
    1848:	23 e2       	ldi	r18, 0x23	; 35
    184a:	32 e0       	ldi	r19, 0x02	; 2
    184c:	43 e0       	ldi	r20, 0x03	; 3
    184e:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    1852:	08 95       	ret

00001854 <simple_ui_config_state>:
    1854:	23 e2       	ldi	r18, 0x23	; 35
    1856:	32 e0       	ldi	r19, 0x02	; 2
    1858:	44 e0       	ldi	r20, 0x04	; 4
    185a:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    185e:	08 95       	ret

00001860 <ramp_extras_config_state>:
    1860:	23 e6       	ldi	r18, 0x63	; 99
    1862:	32 e0       	ldi	r19, 0x02	; 2
    1864:	44 e0       	ldi	r20, 0x04	; 4
    1866:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    186a:	08 95       	ret

0000186c <globals_config_state>:
    186c:	27 e7       	ldi	r18, 0x77	; 119
    186e:	32 e0       	ldi	r19, 0x02	; 2
    1870:	41 e0       	ldi	r20, 0x01	; 1
    1872:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    1876:	08 95       	ret

00001878 <voltage_config_state>:
    1878:	2c e7       	ldi	r18, 0x7C	; 124
    187a:	32 e0       	ldi	r19, 0x02	; 2
    187c:	41 e0       	ldi	r20, 0x01	; 1
    187e:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    1882:	08 95       	ret

00001884 <thermal_config_state>:
    1884:	20 e8       	ldi	r18, 0x80	; 128
    1886:	32 e0       	ldi	r19, 0x02	; 2
    1888:	42 e0       	ldi	r20, 0x02	; 2
    188a:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    188e:	08 95       	ret

00001890 <autolock_config_state>:
    1890:	2b e9       	ldi	r18, 0x9B	; 155
    1892:	32 e0       	ldi	r19, 0x02	; 2
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 cd 0b 	call	0x179a	; 0x179a <config_state_base>
    189a:	08 95       	ret

0000189c <voltage_to_rgb>:
    189c:	40 91 86 01 	lds	r20, 0x0186	; 0x800186 <voltage>
    18a0:	4d 31       	cpi	r20, 0x1D	; 29
    18a2:	a0 f0       	brcs	.+40     	; 0x18cc <voltage_to_rgb+0x30>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	01 c0       	rjmp	.+2      	; 0x18aa <voltage_to_rgb+0xe>
    18a8:	8e 5f       	subi	r24, 0xFE	; 254
    18aa:	28 2f       	mov	r18, r24
    18ac:	30 e0       	ldi	r19, 0x00	; 0
    18ae:	f9 01       	movw	r30, r18
    18b0:	e4 5c       	subi	r30, 0xC4	; 196
    18b2:	fe 4f       	sbci	r31, 0xFE	; 254
    18b4:	90 81       	ld	r25, Z
    18b6:	49 17       	cp	r20, r25
    18b8:	b8 f7       	brcc	.-18     	; 0x18a8 <voltage_to_rgb+0xc>
    18ba:	f9 01       	movw	r30, r18
    18bc:	e5 5c       	subi	r30, 0xC5	; 197
    18be:	fe 4f       	sbci	r31, 0xFE	; 254
    18c0:	e0 81       	ld	r30, Z
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	e3 58       	subi	r30, 0x83	; 131
    18c6:	ff 4f       	sbci	r31, 0xFF	; 255
    18c8:	84 91       	lpm	r24, Z
    18ca:	08 95       	ret
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	08 95       	ret

000018d0 <rgb_led_update>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	90 91 86 01 	lds	r25, 0x0186	; 0x800186 <voltage>
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	9c 31       	cpi	r25, 0x1C	; 28
    18e0:	38 f4       	brcc	.+14     	; 0x18f0 <rgb_led_update+0x20>
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	0e 94 40 08 	call	0x1080	; 0x1080 <rgb_led_set>
    18e8:	80 e0       	ldi	r24, 0x00	; 0
    18ea:	0e 94 1d 08 	call	0x103a	; 0x103a <button_led_set>
    18ee:	97 c0       	rjmp	.+302    	; 0x1a1e <rgb_led_update+0x14e>
    18f0:	c8 2f       	mov	r28, r24
    18f2:	c2 95       	swap	r28
    18f4:	cf 70       	andi	r28, 0x0F	; 15
    18f6:	d8 2f       	mov	r29, r24
    18f8:	df 70       	andi	r29, 0x0F	; 15
    18fa:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
    18fe:	81 11       	cpse	r24, r1
    1900:	03 c0       	rjmp	.+6      	; 0x1908 <rgb_led_update+0x38>
    1902:	c3 30       	cpi	r28, 0x03	; 3
    1904:	08 f0       	brcs	.+2      	; 0x1908 <rgb_led_update+0x38>
    1906:	c2 e0       	ldi	r28, 0x02	; 2
    1908:	d7 30       	cpi	r29, 0x07	; 7
    190a:	d0 f4       	brcc	.+52     	; 0x1940 <rgb_led_update+0x70>
    190c:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <rainbow.2563>
    1910:	10 e0       	ldi	r17, 0x00	; 0
    1912:	0f 5f       	subi	r16, 0xFF	; 255
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    191a:	65 e0       	ldi	r22, 0x05	; 5
    191c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    1920:	98 01       	movw	r18, r16
    1922:	29 0f       	add	r18, r25
    1924:	31 1d       	adc	r19, r1
    1926:	c9 01       	movw	r24, r18
    1928:	66 e0       	ldi	r22, 0x06	; 6
    192a:	70 e0       	ldi	r23, 0x00	; 0
    192c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    1930:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rainbow.2563>
    1934:	ed 2f       	mov	r30, r29
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	e3 58       	subi	r30, 0x83	; 131
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	e4 91       	lpm	r30, Z
    193e:	4c c0       	rjmp	.+152    	; 0x19d8 <rgb_led_update+0x108>
    1940:	d7 30       	cpi	r29, 0x07	; 7
    1942:	d1 f4       	brne	.+52     	; 0x1978 <rgb_led_update+0xa8>
    1944:	00 91 54 01 	lds	r16, 0x0154	; 0x800154 <rainbow.2563>
    1948:	10 e0       	ldi	r17, 0x00	; 0
    194a:	0f 5f       	subi	r16, 0xFF	; 255
    194c:	1f 4f       	sbci	r17, 0xFF	; 255
    194e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    1952:	65 e0       	ldi	r22, 0x05	; 5
    1954:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    1958:	98 01       	movw	r18, r16
    195a:	29 0f       	add	r18, r25
    195c:	31 1d       	adc	r19, r1
    195e:	c9 01       	movw	r24, r18
    1960:	66 e0       	ldi	r22, 0x06	; 6
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    1968:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rainbow.2563>
    196c:	e8 2f       	mov	r30, r24
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	e3 58       	subi	r30, 0x83	; 131
    1972:	ff 4f       	sbci	r31, 0xFF	; 255
    1974:	e4 91       	lpm	r30, Z
    1976:	30 c0       	rjmp	.+96     	; 0x19d8 <rgb_led_update+0x108>
    1978:	d8 30       	cpi	r29, 0x08	; 8
    197a:	d1 f4       	brne	.+52     	; 0x19b0 <rgb_led_update+0xe0>
    197c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
    1980:	81 11       	cpse	r24, r1
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <rgb_led_update+0xb8>
    1984:	83 e0       	ldi	r24, 0x03	; 3
    1986:	01 c0       	rjmp	.+2      	; 0x198a <rgb_led_update+0xba>
    1988:	8f e0       	ldi	r24, 0x0F	; 15
    198a:	68 23       	and	r22, r24
    198c:	51 f4       	brne	.+20     	; 0x19a2 <rgb_led_update+0xd2>
    198e:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <rainbow.2563>
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	01 96       	adiw	r24, 0x01	; 1
    1996:	66 e0       	ldi	r22, 0x06	; 6
    1998:	70 e0       	ldi	r23, 0x00	; 0
    199a:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    199e:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <rainbow.2563>
    19a2:	e0 91 54 01 	lds	r30, 0x0154	; 0x800154 <rainbow.2563>
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	e3 58       	subi	r30, 0x83	; 131
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	e4 91       	lpm	r30, Z
    19ae:	14 c0       	rjmp	.+40     	; 0x19d8 <rgb_led_update+0x108>
    19b0:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
    19b4:	88 23       	and	r24, r24
    19b6:	21 f0       	breq	.+8      	; 0x19c0 <rgb_led_update+0xf0>
    19b8:	0e 94 4e 0c 	call	0x189c	; 0x189c <voltage_to_rgb>
    19bc:	e8 2f       	mov	r30, r24
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <rgb_led_update+0x108>
    19c0:	86 2f       	mov	r24, r22
    19c2:	86 95       	lsr	r24
    19c4:	63 e0       	ldi	r22, 0x03	; 3
    19c6:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    19ca:	e9 2f       	mov	r30, r25
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	ee 0f       	add	r30, r30
    19d0:	ff 1f       	adc	r31, r31
    19d2:	e3 58       	subi	r30, 0x83	; 131
    19d4:	ff 4f       	sbci	r31, 0xFF	; 255
    19d6:	e4 91       	lpm	r30, Z
    19d8:	c3 30       	cpi	r28, 0x03	; 3
    19da:	79 f4       	brne	.+30     	; 0x19fa <rgb_led_update+0x12a>
    19dc:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <frame.2564>
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	01 96       	adiw	r24, 0x01	; 1
    19e4:	63 e1       	ldi	r22, 0x13	; 19
    19e6:	70 e0       	ldi	r23, 0x00	; 0
    19e8:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    19ec:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <frame.2564>
    19f0:	a8 2f       	mov	r26, r24
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	a7 5d       	subi	r26, 0xD7	; 215
    19f6:	be 4f       	sbci	r27, 0xFE	; 254
    19f8:	cc 91       	ld	r28, X
    19fa:	cc 23       	and	r28, r28
    19fc:	19 f0       	breq	.+6      	; 0x1a04 <rgb_led_update+0x134>
    19fe:	c1 30       	cpi	r28, 0x01	; 1
    1a00:	39 f0       	breq	.+14     	; 0x1a10 <rgb_led_update+0x140>
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <rgb_led_update+0x13a>
    1a04:	c0 e0       	ldi	r28, 0x00	; 0
    1a06:	e0 e0       	ldi	r30, 0x00	; 0
    1a08:	04 c0       	rjmp	.+8      	; 0x1a12 <rgb_led_update+0x142>
    1a0a:	ee 0f       	add	r30, r30
    1a0c:	c2 e0       	ldi	r28, 0x02	; 2
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <rgb_led_update+0x142>
    1a10:	c1 e0       	ldi	r28, 0x01	; 1
    1a12:	8e 2f       	mov	r24, r30
    1a14:	0e 94 40 08 	call	0x1080	; 0x1080 <rgb_led_set>
    1a18:	8c 2f       	mov	r24, r28
    1a1a:	0e 94 1d 08 	call	0x103a	; 0x103a <button_led_set>
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	1f 91       	pop	r17
    1a24:	0f 91       	pop	r16
    1a26:	08 95       	ret

00001a28 <blink_once>:
#define BLINK_ONCE_TIME 10
#endif
#ifndef BLINK_BRIGHTNESS
#define BLINK_BRIGHTNESS (MAX_LEVEL/6)
#endif
void blink_once() {
    1a28:	cf 93       	push	r28
    uint8_t brightness = actual_level;
    1a2a:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <actual_level>
    uint8_t bump = brightness + BLINK_BRIGHTNESS;
    1a2e:	86 e4       	ldi	r24, 0x46	; 70
    1a30:	8c 0f       	add	r24, r28
    if (bump > MAX_LEVEL) bump = 0;
    1a32:	87 39       	cpi	r24, 0x97	; 151
    1a34:	08 f0       	brcs	.+2      	; 0x1a38 <blink_once+0x10>
    1a36:	80 e0       	ldi	r24, 0x00	; 0

    set_level(bump);
    1a38:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    delay_4ms(BLINK_ONCE_TIME/4);
    1a3c:	83 e0       	ldi	r24, 0x03	; 3
    1a3e:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
    set_level(brightness);
    1a42:	8c 2f       	mov	r24, r28
    1a44:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
}
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <off_state>:

#ifdef USE_SUNSET_TIMER
#include "sunset-timer.h"
#endif

uint8_t off_state(Event event, uint16_t arg) {
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	8b 01       	movw	r16, r22

	uint8_t mode_max = ramp_ceil;
    1a54:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <ramp_ceil>

    // turn emitter off when entering state
    if (event == EV_enter_state) {
    1a58:	88 30       	cpi	r24, 0x08	; 8
    1a5a:	91 f4       	brne	.+36     	; 0x1a80 <off_state+0x34>
        set_level(0);
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        #ifdef USE_INDICATOR_LED
        indicator_led(indicator_led_mode & 0x03);
        #elif defined(USE_AUX_RGB_LEDS)
        rgb_led_update(rgb_led_off_mode, 0);
    1a62:	60 e0       	ldi	r22, 0x00	; 0
    1a64:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rgb_led_off_mode>
    1a68:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        #endif
        #ifdef USE_SUNSET_TIMER
        sunset_timer = 0;  // needs a reset in case previous timer was aborted
    1a6c:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <sunset_timer>
        #endif
        // sleep while off  (lower power use)
        // (unless delay requested; give the ADC some time to catch up)
        if (! arg) { go_to_standby = 1; }
    1a70:	01 2b       	or	r16, r17
    1a72:	09 f0       	breq	.+2      	; 0x1a76 <off_state+0x2a>
    1a74:	81 c1       	rjmp	.+770    	; 0x1d78 <off_state+0x32c>
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <go_to_standby>
        return MISCHIEF_MANAGED;
    1a7c:	c0 e0       	ldi	r28, 0x00	; 0
    1a7e:	89 c1       	rjmp	.+786    	; 0x1d92 <off_state+0x346>
    }
    // go back to sleep eventually if we got bumped but didn't leave "off" state
    else if (event == EV_tick) {
    1a80:	81 30       	cpi	r24, 0x01	; 1
    1a82:	61 f4       	brne	.+24     	; 0x1a9c <off_state+0x50>
        if (arg > HOLD_TIMEOUT) {
    1a84:	69 31       	cpi	r22, 0x19	; 25
    1a86:	71 05       	cpc	r23, r1
    1a88:	08 f4       	brcc	.+2      	; 0x1a8c <off_state+0x40>
    1a8a:	78 c1       	rjmp	.+752    	; 0x1d7c <off_state+0x330>
            go_to_standby = 1;
    1a8c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <go_to_standby>
            #ifdef USE_INDICATOR_LED
            indicator_led(indicator_led_mode & 0x03);
            #elif defined(USE_AUX_RGB_LEDS)
            rgb_led_update(rgb_led_off_mode, arg);
    1a90:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rgb_led_off_mode>
    1a94:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
            #endif
        }
        return MISCHIEF_MANAGED;
    1a98:	c0 e0       	ldi	r28, 0x00	; 0
    1a9a:	7b c1       	rjmp	.+758    	; 0x1d92 <off_state+0x346>
    }
    #if defined(TICK_DURING_STANDBY)
    // blink the indicator LED, maybe
    else if (event == EV_sleep_tick) {
    1a9c:	83 30       	cpi	r24, 0x03	; 3
    1a9e:	09 f0       	breq	.+2      	; 0x1aa2 <off_state+0x56>
    1aa0:	50 c0       	rjmp	.+160    	; 0x1b42 <off_state+0xf6>
        #ifdef USE_MANUAL_MEMORY_TIMER
        // reset to manual memory level when timer expires
        if (manual_memory &&
    1aa2:	40 91 7c 01 	lds	r20, 0x017C	; 0x80017c <manual_memory>
    1aa6:	44 23       	and	r20, r20
    1aa8:	01 f1       	breq	.+64     	; 0x1aea <off_state+0x9e>
                (arg >= (manual_memory_timer * SLEEP_TICKS_PER_MINUTE))) {
    1aaa:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <manual_memory_timer>
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9c 01       	movw	r18, r24
    1ab2:	22 95       	swap	r18
    1ab4:	32 95       	swap	r19
    1ab6:	30 7f       	andi	r19, 0xF0	; 240
    1ab8:	32 27       	eor	r19, r18
    1aba:	20 7f       	andi	r18, 0xF0	; 240
    1abc:	32 27       	eor	r19, r18
    1abe:	28 1b       	sub	r18, r24
    1ac0:	39 0b       	sbc	r19, r25
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	82 95       	swap	r24
    1ac6:	92 95       	swap	r25
    1ac8:	90 7f       	andi	r25, 0xF0	; 240
    1aca:	98 27       	eor	r25, r24
    1acc:	80 7f       	andi	r24, 0xF0	; 240
    1ace:	98 27       	eor	r25, r24
    1ad0:	82 1b       	sub	r24, r18
    1ad2:	93 0b       	sbc	r25, r19
    1ad4:	88 0f       	add	r24, r24
    1ad6:	99 1f       	adc	r25, r25
    #if defined(TICK_DURING_STANDBY)
    // blink the indicator LED, maybe
    else if (event == EV_sleep_tick) {
        #ifdef USE_MANUAL_MEMORY_TIMER
        // reset to manual memory level when timer expires
        if (manual_memory &&
    1ad8:	68 17       	cp	r22, r24
    1ada:	79 07       	cpc	r23, r25
    1adc:	30 f0       	brcs	.+12     	; 0x1aea <off_state+0x9e>
                (arg >= (manual_memory_timer * SLEEP_TICKS_PER_MINUTE))) {
            memorized_level = manual_memory;
    1ade:	40 93 1d 01 	sts	0x011D, r20	; 0x80011d <memorized_level>
            #ifdef USE_TINT_RAMPING
            tint = manual_memory_tint;
    1ae2:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <manual_memory_tint>
    1ae6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
        #ifdef USE_INDICATOR_LED
        if ((indicator_led_mode & 0b00000011) == 0b00000011) {
            indicator_blink(arg);
        }
        #elif defined(USE_AUX_RGB_LEDS)
        rgb_led_update(rgb_led_off_mode, arg);
    1aea:	60 2f       	mov	r22, r16
    1aec:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rgb_led_off_mode>
    1af0:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        #endif

        #ifdef USE_AUTOLOCK
            // lock the light after being off for N minutes
            uint16_t ticks = autolock_time * SLEEP_TICKS_PER_MINUTE;
    1af4:	c0 91 72 01 	lds	r28, 0x0172	; 0x800172 <autolock_time>
    1af8:	8c 2f       	mov	r24, r28
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	9c 01       	movw	r18, r24
    1afe:	22 95       	swap	r18
    1b00:	32 95       	swap	r19
    1b02:	30 7f       	andi	r19, 0xF0	; 240
    1b04:	32 27       	eor	r19, r18
    1b06:	20 7f       	andi	r18, 0xF0	; 240
    1b08:	32 27       	eor	r19, r18
    1b0a:	28 1b       	sub	r18, r24
    1b0c:	39 0b       	sbc	r19, r25
    1b0e:	c9 01       	movw	r24, r18
    1b10:	82 95       	swap	r24
    1b12:	92 95       	swap	r25
    1b14:	90 7f       	andi	r25, 0xF0	; 240
    1b16:	98 27       	eor	r25, r24
    1b18:	80 7f       	andi	r24, 0xF0	; 240
    1b1a:	98 27       	eor	r25, r24
    1b1c:	82 1b       	sub	r24, r18
    1b1e:	93 0b       	sbc	r25, r19
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
            if ((autolock_time > 0)  && (arg > ticks)) {
    1b24:	cc 23       	and	r28, r28
    1b26:	09 f4       	brne	.+2      	; 0x1b2a <off_state+0xde>
    1b28:	34 c1       	rjmp	.+616    	; 0x1d92 <off_state+0x346>
    1b2a:	80 17       	cp	r24, r16
    1b2c:	91 07       	cpc	r25, r17
    1b2e:	08 f0       	brcs	.+2      	; 0x1b32 <off_state+0xe6>
    1b30:	27 c1       	rjmp	.+590    	; 0x1d80 <off_state+0x334>
                set_state(lockout_state, 0);
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	81 e0       	ldi	r24, 0x01	; 1
    1b38:	9f e0       	ldi	r25, 0x0F	; 15
    1b3a:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
            }
        #endif  // ifdef USE_AUTOLOCK
        return MISCHIEF_MANAGED;
    1b3e:	c0 e0       	ldi	r28, 0x00	; 0
    1b40:	28 c1       	rjmp	.+592    	; 0x1d92 <off_state+0x346>
        set_level(nearest_level(1));
        return MISCHIEF_MANAGED;
    }
    #endif  // B_TIMING_ON == B_PRESS_T
    // hold: go to lowest level
    else if (event == EV_click1_hold) {
    1b42:	81 3b       	cpi	r24, 0xB1	; 177
    1b44:	f1 f4       	brne	.+60     	; 0x1b82 <off_state+0x136>
            // let the user know they can let go now to stay at moon
            blip();
        } else
        #endif
        #else  // B_RELEASE_T or B_TIMEOUT_T
        set_level(nearest_level(1));
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 8b 0a 	call	0x1516	; 0x1516 <nearest_level>
    1b4e:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        #endif
        #ifdef USE_RAMP_AFTER_MOON_CONFIG
        if (dont_ramp_after_moon) {
    1b52:	c0 91 78 01 	lds	r28, 0x0178	; 0x800178 <dont_ramp_after_moon>
    1b56:	c1 11       	cpse	r28, r1
    1b58:	15 c1       	rjmp	.+554    	; 0x1d84 <off_state+0x338>
        }
        #endif
        // don't start ramping immediately;
        // give the user time to release at moon level
        //if (arg >= HOLD_TIMEOUT) {  // smaller
        if (arg >= (!ramp_style) * HOLD_TIMEOUT) {  // more consistent
    1b5a:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ramp_style>
    1b5e:	81 11       	cpse	r24, r1
    1b60:	03 c0       	rjmp	.+6      	; 0x1b68 <off_state+0x11c>
    1b62:	88 e1       	ldi	r24, 0x18	; 24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <off_state+0x120>
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	08 17       	cp	r16, r24
    1b6e:	19 07       	cpc	r17, r25
    1b70:	08 f4       	brcc	.+2      	; 0x1b74 <off_state+0x128>
    1b72:	0f c1       	rjmp	.+542    	; 0x1d92 <off_state+0x346>
            set_state(steady_state, 1);
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	70 e0       	ldi	r23, 0x00	; 0
    1b78:	82 ec       	ldi	r24, 0xC2	; 194
    1b7a:	90 e1       	ldi	r25, 0x10	; 16
    1b7c:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
    1b80:	08 c1       	rjmp	.+528    	; 0x1d92 <off_state+0x346>
        }
        return MISCHIEF_MANAGED;
    }
    // hold, release quickly: go to lowest level (floor)
    else if (event == EV_click1_hold_release) {
    1b82:	81 3e       	cpi	r24, 0xE1	; 225
    1b84:	41 f4       	brne	.+16     	; 0x1b96 <off_state+0x14a>
        set_state(steady_state, 1);
    1b86:	61 e0       	ldi	r22, 0x01	; 1
    1b88:	70 e0       	ldi	r23, 0x00	; 0
    1b8a:	82 ec       	ldi	r24, 0xC2	; 194
    1b8c:	90 e1       	ldi	r25, 0x10	; 16
    1b8e:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1b92:	c0 e0       	ldi	r28, 0x00	; 0
    1b94:	fe c0       	rjmp	.+508    	; 0x1d92 <off_state+0x346>
    }
    #if (B_TIMING_ON != B_TIMEOUT_T)
    // 1 click (before timeout): go to memorized level, but allow abort for double click
    else if (event == EV_click1_release) {
    1b96:	81 38       	cpi	r24, 0x81	; 129
    1b98:	49 f4       	brne	.+18     	; 0x1bac <off_state+0x160>
                #ifdef USE_TINT_RAMPING
                tint = manual_memory_tint;
                #endif
            }
        #endif
        set_level(nearest_level(memorized_level));
    1b9a:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	0e 94 8b 0a 	call	0x1516	; 0x1516 <nearest_level>
    1ba4:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return MISCHIEF_MANAGED;
    1ba8:	c0 e0       	ldi	r28, 0x00	; 0
    1baa:	f3 c0       	rjmp	.+486    	; 0x1d92 <off_state+0x346>
    }
    #endif  // if (B_TIMING_ON != B_TIMEOUT_T)
    // 1 click: regular mode
    else if (event == EV_1click) {
    1bac:	81 3c       	cpi	r24, 0xC1	; 193
    1bae:	49 f4       	brne	.+18     	; 0x1bc2 <off_state+0x176>
        #if (B_TIMING_ON != B_TIMEOUT_T)
        // brightness was already set; reuse previous value
        set_state(steady_state, actual_level);
    1bb0:	60 91 80 01 	lds	r22, 0x0180	; 0x800180 <actual_level>
    1bb4:	70 e0       	ldi	r23, 0x00	; 0
    1bb6:	82 ec       	ldi	r24, 0xC2	; 194
    1bb8:	90 e1       	ldi	r25, 0x10	; 16
    1bba:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        #else
        // FIXME: B_TIMEOUT_T breaks manual_memory and manual_memory_timer
        //        (need to duplicate manual mem logic here, probably)
        set_state(steady_state, memorized_level);
        #endif
        return MISCHIEF_MANAGED;
    1bbe:	c0 e0       	ldi	r28, 0x00	; 0
    1bc0:	e8 c0       	rjmp	.+464    	; 0x1d92 <off_state+0x346>
    }
    // click, hold: momentary at ceiling or turbo
    else if (event == EV_click2_hold) {
    1bc2:	82 3b       	cpi	r24, 0xB2	; 178
    1bc4:	c9 f4       	brne	.+50     	; 0x1bf8 <off_state+0x1ac>
        uint8_t turbo_level;  // how bright is "turbo"?

        uint8_t style_2c = ramp_2c_style;
    1bc6:	20 91 1b 01 	lds	r18, 0x011B	; 0x80011b <ramp_2c_style>
        #ifdef USE_SIMPLE_UI
        // simple UI has its own turbo config
        if (simple_ui_active) style_2c = ramp_2c_style_simple;
    1bca:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <simple_ui_active>
    1bce:	81 11       	cpse	r24, r1
    1bd0:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <ramp_2c_style_simple>
        #endif

		turbo_level = MAX_LEVEL;
		// force top of ramp unless only on tint 1
		#if defined(USE_TINT_RAMPING) && defined(USE_CH1_FET_TINT_RAMPING)
		if ((tint != 1) && (tint != 255)) {
    1bd4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    1bd8:	81 30       	cpi	r24, 0x01	; 1
    1bda:	21 f0       	breq	.+8      	; 0x1be4 <off_state+0x198>
    1bdc:	8f 3f       	cpi	r24, 0xFF	; 255
    1bde:	21 f4       	brne	.+8      	; 0x1be8 <off_state+0x19c>
        #ifdef USE_SIMPLE_UI
        // simple UI has its own turbo config
        if (simple_ui_active) style_2c = ramp_2c_style_simple;
        #endif

		turbo_level = MAX_LEVEL;
    1be0:	86 e9       	ldi	r24, 0x96	; 150
    1be2:	03 c0       	rjmp	.+6      	; 0x1bea <off_state+0x19e>
    1be4:	86 e9       	ldi	r24, 0x96	; 150
    1be6:	01 c0       	rjmp	.+2      	; 0x1bea <off_state+0x19e>
		// force top of ramp unless only on tint 1
		#if defined(USE_TINT_RAMPING) && defined(USE_CH1_FET_TINT_RAMPING)
		if ((tint != 1) && (tint != 255)) {
			turbo_level = mode_max;
    1be8:	89 2f       	mov	r24, r25
		}
		#endif
        // 0  = ceiling
        // 1+ = full power
        if (style_2c == 0) turbo_level = mode_max;
    1bea:	21 11       	cpse	r18, r1
    1bec:	98 2f       	mov	r25, r24

        set_level(turbo_level);
    1bee:	89 2f       	mov	r24, r25
    1bf0:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return MISCHIEF_MANAGED;
    1bf4:	c0 e0       	ldi	r28, 0x00	; 0
    1bf6:	cd c0       	rjmp	.+410    	; 0x1d92 <off_state+0x346>
    }
    else if (event == EV_click2_hold_release) {
    1bf8:	82 3e       	cpi	r24, 0xE2	; 226
    1bfa:	29 f4       	brne	.+10     	; 0x1c06 <off_state+0x1ba>
        set_level(0);
    1bfc:	80 e0       	ldi	r24, 0x00	; 0
    1bfe:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return MISCHIEF_MANAGED;
    1c02:	c0 e0       	ldi	r28, 0x00	; 0
    1c04:	c6 c0       	rjmp	.+396    	; 0x1d92 <off_state+0x346>
    }
    // 2 clicks: highest mode (ceiling)
    else if (event == EV_2clicks) {
    1c06:	82 3c       	cpi	r24, 0xC2	; 194
    1c08:	41 f4       	brne	.+16     	; 0x1c1a <off_state+0x1ce>
        set_state(steady_state, MAX_LEVEL);
    1c0a:	66 e9       	ldi	r22, 0x96	; 150
    1c0c:	70 e0       	ldi	r23, 0x00	; 0
    1c0e:	82 ec       	ldi	r24, 0xC2	; 194
    1c10:	90 e1       	ldi	r25, 0x10	; 16
    1c12:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1c16:	c0 e0       	ldi	r28, 0x00	; 0
    1c18:	bc c0       	rjmp	.+376    	; 0x1d92 <off_state+0x346>
    }
    // 3 clicks (initial press): off, to prep for later events
    else if (event == EV_click3_press) {
    1c1a:	83 39       	cpi	r24, 0x93	; 147
    1c1c:	29 f4       	brne	.+10     	; 0x1c28 <off_state+0x1dc>
        set_level(0);
    1c1e:	80 e0       	ldi	r24, 0x00	; 0
    1c20:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return MISCHIEF_MANAGED;
    1c24:	c0 e0       	ldi	r28, 0x00	; 0
    1c26:	b5 c0       	rjmp	.+362    	; 0x1d92 <off_state+0x346>
    }
    #ifdef USE_BATTCHECK
    // 3 clicks: battcheck mode / blinky mode group 1
    else if (event == EV_3clicks) {
    1c28:	83 3c       	cpi	r24, 0xC3	; 195
    1c2a:	41 f4       	brne	.+16     	; 0x1c3c <off_state+0x1f0>
        set_state(battcheck_state, 0);
    1c2c:	60 e0       	ldi	r22, 0x00	; 0
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	84 e2       	ldi	r24, 0x24	; 36
    1c32:	93 e0       	ldi	r25, 0x03	; 3
    1c34:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1c38:	c0 e0       	ldi	r28, 0x00	; 0
    1c3a:	ab c0       	rjmp	.+342    	; 0x1d92 <off_state+0x346>
    }
    #endif
    #ifdef USE_LOCKOUT_MODE
    // 4 clicks: soft lockout
    else if (event == EV_4clicks) {
    1c3c:	84 3c       	cpi	r24, 0xC4	; 196
    1c3e:	51 f4       	brne	.+20     	; 0x1c54 <off_state+0x208>
        blink_once();
    1c40:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        set_state(lockout_state, 0);
    1c44:	60 e0       	ldi	r22, 0x00	; 0
    1c46:	70 e0       	ldi	r23, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	9f e0       	ldi	r25, 0x0F	; 15
    1c4c:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1c50:	c0 e0       	ldi	r28, 0x00	; 0
    1c52:	9f c0       	rjmp	.+318    	; 0x1d92 <off_state+0x346>
    }
    #endif
    #if defined(USE_FACTORY_RESET) && defined(USE_SOFT_FACTORY_RESET)
    // 13 clicks and hold the last click: invoke factory reset (reboot)
    else if (event == EV_click13_hold) {
    1c54:	8d 3b       	cpi	r24, 0xBD	; 189
    1c56:	11 f4       	brne	.+4      	; 0x1c5c <off_state+0x210>
        reboot();
    1c58:	0e 94 e6 09 	call	0x13cc	; 0x13cc <reboot>
        return MISCHIEF_MANAGED;
    }
    #endif
    #ifdef USE_VERSION_CHECK
    // 15+ clicks: show the version number
    else if (event == EV_15clicks) {
    1c5c:	8f 3c       	cpi	r24, 0xCF	; 207
    1c5e:	41 f4       	brne	.+16     	; 0x1c70 <off_state+0x224>
        set_state(version_check_state, 0);
    1c60:	60 e0       	ldi	r22, 0x00	; 0
    1c62:	70 e0       	ldi	r23, 0x00	; 0
    1c64:	8a e7       	ldi	r24, 0x7A	; 122
    1c66:	92 e0       	ldi	r25, 0x02	; 2
    1c68:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1c6c:	c0 e0       	ldi	r28, 0x00	; 0
    1c6e:	91 c0       	rjmp	.+290    	; 0x1d92 <off_state+0x346>
    }
    #endif

    #ifdef USE_SIMPLE_UI
    // 10 clicks, but hold last click: turn simple UI off (or configure it)
    else if ((event == EV_click10_hold) && (!arg)) {
    1c70:	8a 3b       	cpi	r24, 0xBA	; 186
    1c72:	a9 f4       	brne	.+42     	; 0x1c9e <off_state+0x252>
    1c74:	67 2b       	or	r22, r23
    1c76:	99 f4       	brne	.+38     	; 0x1c9e <off_state+0x252>
        if (simple_ui_active) {  // turn off simple UI
    1c78:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <simple_ui_active>
    1c7c:	cc 23       	and	r28, r28
    1c7e:	41 f0       	breq	.+16     	; 0x1c90 <off_state+0x244>
            blink_once();
    1c80:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
            simple_ui_active = 0;
    1c84:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <simple_ui_active>
            save_config();
    1c88:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        }
        else {  // configure simple UI ramp
            push_state(simple_ui_config_state, 0);
        }
        return MISCHIEF_MANAGED;
    1c8c:	c0 e0       	ldi	r28, 0x00	; 0
    1c8e:	81 c0       	rjmp	.+258    	; 0x1d92 <off_state+0x346>
            blink_once();
            simple_ui_active = 0;
            save_config();
        }
        else {  // configure simple UI ramp
            push_state(simple_ui_config_state, 0);
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	8a e2       	ldi	r24, 0x2A	; 42
    1c96:	9c e0       	ldi	r25, 0x0C	; 12
    1c98:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
    1c9c:	7a c0       	rjmp	.+244    	; 0x1d92 <off_state+0x346>
        }
        return MISCHIEF_MANAGED;
    }

    ////////// Every action below here is blocked in the simple UI //////////
    if (simple_ui_active) {
    1c9e:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <simple_ui_active>
    1ca2:	c1 11       	cpse	r28, r1
    1ca4:	71 c0       	rjmp	.+226    	; 0x1d88 <off_state+0x33c>
        return EVENT_NOT_HANDLED;
    }
    // 10 clicks: enable simple UI
    else if (event == EV_10clicks) {
    1ca6:	8a 3c       	cpi	r24, 0xCA	; 202
    1ca8:	41 f4       	brne	.+16     	; 0x1cba <off_state+0x26e>
        blink_once();
    1caa:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        simple_ui_active = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <simple_ui_active>
        save_config();
    1cb4:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    1cb8:	6c c0       	rjmp	.+216    	; 0x1d92 <off_state+0x346>
    }
    #endif

    // click, click, long-click: strobe mode
    #ifdef USE_STROBE_STATE
    else if (event == EV_click3_hold) {
    1cba:	83 3b       	cpi	r24, 0xB3	; 179
    1cbc:	39 f4       	brne	.+14     	; 0x1ccc <off_state+0x280>
        set_state(strobe_state, 0);
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	8e e9       	ldi	r24, 0x9E	; 158
    1cc4:	94 e1       	ldi	r25, 0x14	; 20
    1cc6:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1cca:	63 c0       	rjmp	.+198    	; 0x1d92 <off_state+0x346>
        return MISCHIEF_MANAGED;
    }
    #endif
    #ifdef USE_MOMENTARY_MODE
    // 5 clicks: momentary mode
    else if (event == EV_5clicks) {
    1ccc:	85 3c       	cpi	r24, 0xC5	; 197
    1cce:	49 f4       	brne	.+18     	; 0x1ce2 <off_state+0x296>
        blink_once();
    1cd0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        set_state(momentary_state, 0);
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	70 e0       	ldi	r23, 0x00	; 0
    1cd8:	8a e6       	ldi	r24, 0x6A	; 106
    1cda:	95 e1       	ldi	r25, 0x15	; 21
    1cdc:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1ce0:	58 c0       	rjmp	.+176    	; 0x1d92 <off_state+0x346>
        save_config();
        return MISCHIEF_MANAGED;
    }
    #elif defined(USE_AUX_RGB_LEDS)
    // 7 clicks: change RGB aux LED pattern
    else if (event == EV_7clicks) {
    1ce2:	87 3c       	cpi	r24, 0xC7	; 199
    1ce4:	d9 f4       	brne	.+54     	; 0x1d1c <off_state+0x2d0>
        uint8_t mode = (rgb_led_off_mode >> 4) + 1;
    1ce6:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rgb_led_off_mode>
    1cea:	92 2f       	mov	r25, r18
    1cec:	92 95       	swap	r25
    1cee:	9f 70       	andi	r25, 0x0F	; 15
    1cf0:	9f 5f       	subi	r25, 0xFF	; 255
        mode = mode % RGB_LED_NUM_PATTERNS;
    1cf2:	93 70       	andi	r25, 0x03	; 3
        rgb_led_off_mode = (mode << 4) | (rgb_led_off_mode & 0x0f);
    1cf4:	89 2f       	mov	r24, r25
    1cf6:	90 e0       	ldi	r25, 0x00	; 0
    1cf8:	82 95       	swap	r24
    1cfa:	92 95       	swap	r25
    1cfc:	90 7f       	andi	r25, 0xF0	; 240
    1cfe:	98 27       	eor	r25, r24
    1d00:	80 7f       	andi	r24, 0xF0	; 240
    1d02:	98 27       	eor	r25, r24
    1d04:	2f 70       	andi	r18, 0x0F	; 15
    1d06:	82 2b       	or	r24, r18
    1d08:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <rgb_led_off_mode>
        rgb_led_update(rgb_led_off_mode, 0);
    1d0c:	60 e0       	ldi	r22, 0x00	; 0
    1d0e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        save_config();
    1d12:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        blink_once();
    1d16:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        return MISCHIEF_MANAGED;
    1d1a:	3b c0       	rjmp	.+118    	; 0x1d92 <off_state+0x346>
    }
    // 7 clicks (hold last): change RGB aux LED color
    else if (event == EV_click7_hold) {
    1d1c:	87 3b       	cpi	r24, 0xB7	; 183
    1d1e:	d1 f4       	brne	.+52     	; 0x1d54 <off_state+0x308>
        setting_rgb_mode_now = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <setting_rgb_mode_now>
        if (0 == (arg & 0x3f)) {
    1d26:	c8 01       	movw	r24, r16
    1d28:	8f 73       	andi	r24, 0x3F	; 63
    1d2a:	99 27       	eor	r25, r25
    1d2c:	89 2b       	or	r24, r25
    1d2e:	61 f4       	brne	.+24     	; 0x1d48 <off_state+0x2fc>
            uint8_t mode = (rgb_led_off_mode & 0x0f) + 1;
    1d30:	20 91 0f 01 	lds	r18, 0x010F	; 0x80010f <rgb_led_off_mode>
    1d34:	82 2f       	mov	r24, r18
    1d36:	8f 70       	andi	r24, 0x0F	; 15
    1d38:	8f 5f       	subi	r24, 0xFF	; 255
            mode = mode % RGB_LED_NUM_COLORS;
    1d3a:	6b e0       	ldi	r22, 0x0B	; 11
    1d3c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
            rgb_led_off_mode = mode | (rgb_led_off_mode & 0xf0);
    1d40:	20 7f       	andi	r18, 0xF0	; 240
    1d42:	29 2b       	or	r18, r25
    1d44:	20 93 0f 01 	sts	0x010F, r18	; 0x80010f <rgb_led_off_mode>
            //save_config();
        }
        rgb_led_update(rgb_led_off_mode, arg);
    1d48:	60 2f       	mov	r22, r16
    1d4a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <rgb_led_off_mode>
    1d4e:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        return MISCHIEF_MANAGED;
    1d52:	1f c0       	rjmp	.+62     	; 0x1d92 <off_state+0x346>
    }
    else if (event == EV_click7_hold_release) {
    1d54:	87 3e       	cpi	r24, 0xE7	; 231
    1d56:	29 f4       	brne	.+10     	; 0x1d62 <off_state+0x316>
        setting_rgb_mode_now = 0;
    1d58:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <setting_rgb_mode_now>
        save_config();
    1d5c:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    1d60:	18 c0       	rjmp	.+48     	; 0x1d92 <off_state+0x346>
    }
    #endif  // end 7 clicks

    #ifdef USE_GLOBALS_CONFIG
    // 9 clicks, but hold last click: configure misc global settings
    else if ((event == EV_click9_hold) && (!arg)) {
    1d62:	89 3b       	cpi	r24, 0xB9	; 185
    1d64:	99 f4       	brne	.+38     	; 0x1d8c <off_state+0x340>
    1d66:	01 2b       	or	r16, r17
    1d68:	99 f4       	brne	.+38     	; 0x1d90 <off_state+0x344>
        push_state(globals_config_state, 0);
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	86 e3       	ldi	r24, 0x36	; 54
    1d70:	9c e0       	ldi	r25, 0x0C	; 12
    1d72:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
        return MISCHIEF_MANAGED;
    1d76:	0d c0       	rjmp	.+26     	; 0x1d92 <off_state+0x346>
        sunset_timer = 0;  // needs a reset in case previous timer was aborted
        #endif
        // sleep while off  (lower power use)
        // (unless delay requested; give the ADC some time to catch up)
        if (! arg) { go_to_standby = 1; }
        return MISCHIEF_MANAGED;
    1d78:	c0 e0       	ldi	r28, 0x00	; 0
    1d7a:	0b c0       	rjmp	.+22     	; 0x1d92 <off_state+0x346>
            indicator_led(indicator_led_mode & 0x03);
            #elif defined(USE_AUX_RGB_LEDS)
            rgb_led_update(rgb_led_off_mode, arg);
            #endif
        }
        return MISCHIEF_MANAGED;
    1d7c:	c0 e0       	ldi	r28, 0x00	; 0
    1d7e:	09 c0       	rjmp	.+18     	; 0x1d92 <off_state+0x346>
            uint16_t ticks = autolock_time * SLEEP_TICKS_PER_MINUTE;
            if ((autolock_time > 0)  && (arg > ticks)) {
                set_state(lockout_state, 0);
            }
        #endif  // ifdef USE_AUTOLOCK
        return MISCHIEF_MANAGED;
    1d80:	c0 e0       	ldi	r28, 0x00	; 0
    1d82:	07 c0       	rjmp	.+14     	; 0x1d92 <off_state+0x346>
        #else  // B_RELEASE_T or B_TIMEOUT_T
        set_level(nearest_level(1));
        #endif
        #ifdef USE_RAMP_AFTER_MOON_CONFIG
        if (dont_ramp_after_moon) {
            return MISCHIEF_MANAGED;
    1d84:	c0 e0       	ldi	r28, 0x00	; 0
    1d86:	05 c0       	rjmp	.+10     	; 0x1d92 <off_state+0x346>
        return MISCHIEF_MANAGED;
    }

    ////////// Every action below here is blocked in the simple UI //////////
    if (simple_ui_active) {
        return EVENT_NOT_HANDLED;
    1d88:	c1 e0       	ldi	r28, 0x01	; 1
    1d8a:	03 c0       	rjmp	.+6      	; 0x1d92 <off_state+0x346>
    else if ((event == EV_click9_hold) && (!arg)) {
        push_state(globals_config_state, 0);
        return MISCHIEF_MANAGED;
    }
    #endif
    return EVENT_NOT_HANDLED;
    1d8c:	c1 e0       	ldi	r28, 0x01	; 1
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <off_state+0x346>
    1d90:	c1 e0       	ldi	r28, 0x01	; 1
}
    1d92:	8c 2f       	mov	r24, r28
    1d94:	cf 91       	pop	r28
    1d96:	1f 91       	pop	r17
    1d98:	0f 91       	pop	r16
    1d9a:	08 95       	ret

00001d9c <beacon_state>:
    }
}

uint8_t beacon_state(Event event, uint16_t arg) {
    // 1 click: off
    if (event == EV_1click) {
    1d9c:	81 3c       	cpi	r24, 0xC1	; 193
    1d9e:	41 f4       	brne	.+16     	; 0x1db0 <beacon_state+0x14>
        set_state(off_state, 0);
    1da0:	60 e0       	ldi	r22, 0x00	; 0
    1da2:	70 e0       	ldi	r23, 0x00	; 0
    1da4:	86 e2       	ldi	r24, 0x26	; 38
    1da6:	9d e0       	ldi	r25, 0x0D	; 13
    1da8:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	08 95       	ret
    }
    // TODO: use sleep ticks to measure time between pulses,
    //       to save power

    // 2 clicks: next blinky mode
    else if (event == EV_2clicks) {
    1db0:	82 3c       	cpi	r24, 0xC2	; 194
    1db2:	41 f4       	brne	.+16     	; 0x1dc4 <beacon_state+0x28>
        #if defined(USE_SOS_MODE) && defined(USE_SOS_MODE_IN_BLINKY_GROUP)
        set_state(sos_state, 0);
        #elif defined(USE_BATTCHECK)
        set_state(battcheck_state, 0);
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	70 e0       	ldi	r23, 0x00	; 0
    1db8:	84 e2       	ldi	r24, 0x24	; 36
    1dba:	93 e0       	ldi	r25, 0x03	; 3
    1dbc:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        #elif defined(USE_THERMAL_REGULATION)
        set_state(tempcheck_state, 0);
        #endif
        return MISCHIEF_MANAGED;
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	08 95       	ret
    }
    // hold: configure beacon timing
    else if (event == EV_click1_hold) {
    1dc4:	81 3b       	cpi	r24, 0xB1	; 177
    1dc6:	59 f4       	brne	.+22     	; 0x1dde <beacon_state+0x42>
        if (0 == (arg % TICKS_PER_SECOND)) {
    1dc8:	cb 01       	movw	r24, r22
    1dca:	6e e3       	ldi	r22, 0x3E	; 62
    1dcc:	70 e0       	ldi	r23, 0x00	; 0
    1dce:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    1dd2:	89 2b       	or	r24, r25
    1dd4:	91 f4       	brne	.+36     	; 0x1dfa <beacon_state+0x5e>
            blink_once();
    1dd6:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        }
        return MISCHIEF_MANAGED;
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	08 95       	ret
    }
    // release hold: save new timing
    else if (event == EV_click1_hold_release) {
    1dde:	81 3e       	cpi	r24, 0xE1	; 225
    1de0:	71 f4       	brne	.+28     	; 0x1dfe <beacon_state+0x62>
        beacon_seconds = 1 + (arg / TICKS_PER_SECOND);
    1de2:	cb 01       	movw	r24, r22
    1de4:	6e e3       	ldi	r22, 0x3E	; 62
    1de6:	70 e0       	ldi	r23, 0x00	; 0
    1de8:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    1dec:	6f 5f       	subi	r22, 0xFF	; 255
    1dee:	60 93 0d 01 	sts	0x010D, r22	; 0x80010d <beacon_seconds>
        save_config();
    1df2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	08 95       	ret
    // hold: configure beacon timing
    else if (event == EV_click1_hold) {
        if (0 == (arg % TICKS_PER_SECOND)) {
            blink_once();
        }
        return MISCHIEF_MANAGED;
    1dfa:	80 e0       	ldi	r24, 0x00	; 0
    1dfc:	08 95       	ret
    else if (event == EV_click1_hold_release) {
        beacon_seconds = 1 + (arg / TICKS_PER_SECOND);
        save_config();
        return MISCHIEF_MANAGED;
    }
    return EVENT_NOT_HANDLED;
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
}
    1e00:	08 95       	ret

00001e02 <lockout_state>:
#ifndef LOCKOUT_MODE_C
#define LOCKOUT_MODE_C

#include "lockout-mode.h"

uint8_t lockout_state(Event event, uint16_t arg) {
    1e02:	0f 93       	push	r16
    1e04:	1f 93       	push	r17
    1e06:	cf 93       	push	r28
    1e08:	df 93       	push	r29
    1e0a:	c8 2f       	mov	r28, r24
    1e0c:	8b 01       	movw	r16, r22
    #ifdef USE_MOON_DURING_LOCKOUT_MODE
    // momentary(ish) moon mode during lockout
    // button is being held
    #ifdef USE_AUX_RGB_LEDS
    // don't turn on during RGB aux LED configuration
    if (event == EV_click7_hold) { set_level(0); } else
    1e0e:	87 3b       	cpi	r24, 0xB7	; 183
    1e10:	21 f4       	brne	.+8      	; 0x1e1a <lockout_state+0x18>
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1e18:	21 c0       	rjmp	.+66     	; 0x1e5c <lockout_state+0x5a>
    1e1a:	80 79       	andi	r24, 0x90	; 144
    #endif
    if ((event & (B_CLICK | B_PRESS)) == (B_CLICK | B_PRESS)) {
    1e1c:	80 39       	cpi	r24, 0x90	; 144
    1e1e:	c9 f4       	brne	.+50     	; 0x1e52 <lockout_state+0x50>
        // hold: lowest floor
        // click, hold: highest floor (or manual mem level)
        uint8_t lvl = ramp_floors[0];
    1e20:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <ramp_floors>
        if ((event & 0x0f) == 2) {  // second click
    1e24:	8c 2f       	mov	r24, r28
    1e26:	8f 70       	andi	r24, 0x0F	; 15
    1e28:	82 30       	cpi	r24, 0x02	; 2
    1e2a:	59 f4       	brne	.+22     	; 0x1e42 <lockout_state+0x40>
            if (ramp_floors[1] > lvl) lvl = ramp_floors[1];
    1e2c:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <ramp_floors+0x1>
    1e30:	92 17       	cp	r25, r18
    1e32:	08 f0       	brcs	.+2      	; 0x1e36 <lockout_state+0x34>
    if (event == EV_click7_hold) { set_level(0); } else
    #endif
    if ((event & (B_CLICK | B_PRESS)) == (B_CLICK | B_PRESS)) {
        // hold: lowest floor
        // click, hold: highest floor (or manual mem level)
        uint8_t lvl = ramp_floors[0];
    1e34:	29 2f       	mov	r18, r25
        if ((event & 0x0f) == 2) {  // second click
            if (ramp_floors[1] > lvl) lvl = ramp_floors[1];
            #ifdef USE_MANUAL_MEMORY
            if (manual_memory) lvl = manual_memory;
    1e36:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <manual_memory>
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	07 c0       	rjmp	.+14     	; 0x1e4c <lockout_state+0x4a>
    1e3e:	82 2f       	mov	r24, r18
    1e40:	05 c0       	rjmp	.+10     	; 0x1e4c <lockout_state+0x4a>
            #endif
        } else {  // anything except second click
            if (ramp_floors[1] < lvl) lvl = ramp_floors[1];
    1e42:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <ramp_floors+0x1>
    1e46:	89 17       	cp	r24, r25
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <lockout_state+0x4a>
    if (event == EV_click7_hold) { set_level(0); } else
    #endif
    if ((event & (B_CLICK | B_PRESS)) == (B_CLICK | B_PRESS)) {
        // hold: lowest floor
        // click, hold: highest floor (or manual mem level)
        uint8_t lvl = ramp_floors[0];
    1e4a:	89 2f       	mov	r24, r25
            if (manual_memory) lvl = manual_memory;
            #endif
        } else {  // anything except second click
            if (ramp_floors[1] < lvl) lvl = ramp_floors[1];
        }
        set_level(lvl);
    1e4c:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    1e50:	05 c0       	rjmp	.+10     	; 0x1e5c <lockout_state+0x5a>
    }
    // button was released
    else if ((event & (B_CLICK | B_PRESS)) == (B_CLICK)) {
    1e52:	80 38       	cpi	r24, 0x80	; 128
    1e54:	19 f4       	brne	.+6      	; 0x1e5c <lockout_state+0x5a>
        set_level(0);
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    #ifdef USE_INDICATOR_LED
    if (event == EV_enter_state) {
        indicator_led(indicator_led_mode >> 2);
    } else
    #elif defined(USE_AUX_RGB_LEDS)
    if (event == EV_enter_state) {
    1e5c:	c8 30       	cpi	r28, 0x08	; 8
    1e5e:	31 f4       	brne	.+12     	; 0x1e6c <lockout_state+0x6a>
        rgb_led_update(rgb_led_lockout_mode, 0);
    1e60:	60 e0       	ldi	r22, 0x00	; 0
    1e62:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1e66:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
    1e6a:	47 c0       	rjmp	.+142    	; 0x1efa <lockout_state+0xf8>
    } else
    #endif
    if (event == EV_tick) {
    1e6c:	c1 30       	cpi	r28, 0x01	; 1
    1e6e:	71 f4       	brne	.+28     	; 0x1e8c <lockout_state+0x8a>
        if (arg > HOLD_TIMEOUT) {
    1e70:	09 31       	cpi	r16, 0x19	; 25
    1e72:	11 05       	cpc	r17, r1
    1e74:	08 f4       	brcc	.+2      	; 0x1e78 <lockout_state+0x76>
    1e76:	90 c0       	rjmp	.+288    	; 0x1f98 <lockout_state+0x196>
            go_to_standby = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <go_to_standby>
            #ifdef USE_INDICATOR_LED
            indicator_led(indicator_led_mode >> 2);
            #elif defined(USE_AUX_RGB_LEDS)
            rgb_led_update(rgb_led_lockout_mode, arg);
    1e7e:	60 2f       	mov	r22, r16
    1e80:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1e84:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
            #endif
        }
        return MISCHIEF_MANAGED;
    1e88:	d0 e0       	ldi	r29, 0x00	; 0
    1e8a:	8b c0       	rjmp	.+278    	; 0x1fa2 <lockout_state+0x1a0>
    }
    #if defined(TICK_DURING_STANDBY) && (defined(USE_INDICATOR_LED) || defined(USE_AUX_RGB_LEDS))
    else if (event == EV_sleep_tick) {
    1e8c:	c3 30       	cpi	r28, 0x03	; 3
    1e8e:	39 f4       	brne	.+14     	; 0x1e9e <lockout_state+0x9c>
        #if defined(USE_INDICATOR_LED)
        if ((indicator_led_mode & 0b00001100) == 0b00001100) {
            indicator_blink(arg);
        }
        #elif defined(USE_AUX_RGB_LEDS)
        rgb_led_update(rgb_led_lockout_mode, arg);
    1e90:	60 2f       	mov	r22, r16
    1e92:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1e96:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        #endif
        return MISCHIEF_MANAGED;
    1e9a:	d0 e0       	ldi	r29, 0x00	; 0
    1e9c:	82 c0       	rjmp	.+260    	; 0x1fa2 <lockout_state+0x1a0>
    }
    #endif

    // 4 clicks: exit and turn on
    else if (event == EV_4clicks) {
    1e9e:	c4 3c       	cpi	r28, 0xC4	; 196
    1ea0:	a1 f4       	brne	.+40     	; 0x1eca <lockout_state+0xc8>
        #ifdef USE_MANUAL_MEMORY
        if (manual_memory)
    1ea2:	d0 91 7c 01 	lds	r29, 0x017C	; 0x80017c <manual_memory>
    1ea6:	dd 23       	and	r29, r29
    1ea8:	41 f0       	breq	.+16     	; 0x1eba <lockout_state+0xb8>
            set_state(steady_state, manual_memory);
    1eaa:	6d 2f       	mov	r22, r29
    1eac:	70 e0       	ldi	r23, 0x00	; 0
    1eae:	82 ec       	ldi	r24, 0xC2	; 194
    1eb0:	90 e1       	ldi	r25, 0x10	; 16
    1eb2:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        else
        #endif
        set_state(steady_state, memorized_level);
        return MISCHIEF_MANAGED;
    1eb6:	d0 e0       	ldi	r29, 0x00	; 0
    1eb8:	74 c0       	rjmp	.+232    	; 0x1fa2 <lockout_state+0x1a0>
        #ifdef USE_MANUAL_MEMORY
        if (manual_memory)
            set_state(steady_state, manual_memory);
        else
        #endif
        set_state(steady_state, memorized_level);
    1eba:	60 91 1d 01 	lds	r22, 0x011D	; 0x80011d <memorized_level>
    1ebe:	70 e0       	ldi	r23, 0x00	; 0
    1ec0:	82 ec       	ldi	r24, 0xC2	; 194
    1ec2:	90 e1       	ldi	r25, 0x10	; 16
    1ec4:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
    1ec8:	6c c0       	rjmp	.+216    	; 0x1fa2 <lockout_state+0x1a0>
        return MISCHIEF_MANAGED;
    }
    // 4 clicks, but hold last: exit and start at floor
    else if (event == EV_click4_hold) {
    1eca:	c4 3b       	cpi	r28, 0xB4	; 180
    1ecc:	61 f4       	brne	.+24     	; 0x1ee6 <lockout_state+0xe4>
        blink_once();
    1ece:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        // reset button sequence to avoid activating anything in ramp mode
        current_event = 0;
    1ed2:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <current_event>
        // ... and back to ramp mode
        set_state(steady_state, 1);
    1ed6:	61 e0       	ldi	r22, 0x01	; 1
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	82 ec       	ldi	r24, 0xC2	; 194
    1edc:	90 e1       	ldi	r25, 0x10	; 16
    1ede:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1ee2:	d0 e0       	ldi	r29, 0x00	; 0
    1ee4:	5e c0       	rjmp	.+188    	; 0x1fa2 <lockout_state+0x1a0>
    }
    // 5 clicks: exit and turn on at ceiling level
    else if (event == EV_5clicks) {
    1ee6:	c5 3c       	cpi	r28, 0xC5	; 197
    1ee8:	41 f4       	brne	.+16     	; 0x1efa <lockout_state+0xf8>
        set_state(steady_state, MAX_LEVEL);
    1eea:	66 e9       	ldi	r22, 0x96	; 150
    1eec:	70 e0       	ldi	r23, 0x00	; 0
    1eee:	82 ec       	ldi	r24, 0xC2	; 194
    1ef0:	90 e1       	ldi	r25, 0x10	; 16
    1ef2:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    1ef6:	d0 e0       	ldi	r29, 0x00	; 0
    1ef8:	54 c0       	rjmp	.+168    	; 0x1fa2 <lockout_state+0x1a0>
    }

    ////////// Every action below here is blocked in the simple UI //////////
    #ifdef USE_SIMPLE_UI
    if (simple_ui_active) {
    1efa:	d0 91 1c 01 	lds	r29, 0x011C	; 0x80011c <simple_ui_active>
    1efe:	d1 11       	cpse	r29, r1
    1f00:	4d c0       	rjmp	.+154    	; 0x1f9c <lockout_state+0x19a>
    }
    #endif

    #ifdef USE_AUTOLOCK
    // 10H: configure the autolock option
    else if (event == EV_click10_hold) {
    1f02:	ca 3b       	cpi	r28, 0xBA	; 186
    1f04:	39 f4       	brne	.+14     	; 0x1f14 <lockout_state+0x112>
        push_state(autolock_config_state, 0);
    1f06:	60 e0       	ldi	r22, 0x00	; 0
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	88 e4       	ldi	r24, 0x48	; 72
    1f0c:	9c e0       	ldi	r25, 0x0C	; 12
    1f0e:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
        return MISCHIEF_MANAGED;
    1f12:	47 c0       	rjmp	.+142    	; 0x1fa2 <lockout_state+0x1a0>
        save_config();
        return MISCHIEF_MANAGED;
    }
    #elif defined(USE_AUX_RGB_LEDS)
    // 7 clicks: change RGB aux LED pattern
    else if (event == EV_7clicks) {
    1f14:	c7 3c       	cpi	r28, 0xC7	; 199
    1f16:	e9 f4       	brne	.+58     	; 0x1f52 <lockout_state+0x150>
        uint8_t mode = (rgb_led_lockout_mode >> 4) + 1;
    1f18:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	92 95       	swap	r25
    1f20:	9f 70       	andi	r25, 0x0F	; 15
    1f22:	21 e0       	ldi	r18, 0x01	; 1
    1f24:	29 0f       	add	r18, r25
        mode = mode % RGB_LED_NUM_PATTERNS;
    1f26:	92 2f       	mov	r25, r18
    1f28:	93 70       	andi	r25, 0x03	; 3
        rgb_led_lockout_mode = (mode << 4) | (rgb_led_lockout_mode & 0x0f);
    1f2a:	29 2f       	mov	r18, r25
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	22 95       	swap	r18
    1f30:	32 95       	swap	r19
    1f32:	30 7f       	andi	r19, 0xF0	; 240
    1f34:	32 27       	eor	r19, r18
    1f36:	20 7f       	andi	r18, 0xF0	; 240
    1f38:	32 27       	eor	r19, r18
    1f3a:	8f 70       	andi	r24, 0x0F	; 15
    1f3c:	82 2b       	or	r24, r18
    1f3e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <rgb_led_lockout_mode>
        rgb_led_update(rgb_led_lockout_mode, 0);
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        save_config();
    1f48:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        blink_once();
    1f4c:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        return MISCHIEF_MANAGED;
    1f50:	28 c0       	rjmp	.+80     	; 0x1fa2 <lockout_state+0x1a0>
    }
    // 7H: change RGB aux LED color
    else if (event == EV_click7_hold) {
    1f52:	c7 3b       	cpi	r28, 0xB7	; 183
    1f54:	d1 f4       	brne	.+52     	; 0x1f8a <lockout_state+0x188>
        setting_rgb_mode_now = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <setting_rgb_mode_now>
        if (0 == (arg & 0x3f)) {
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	8f 73       	andi	r24, 0x3F	; 63
    1f60:	99 27       	eor	r25, r25
    1f62:	89 2b       	or	r24, r25
    1f64:	61 f4       	brne	.+24     	; 0x1f7e <lockout_state+0x17c>
            uint8_t mode = (rgb_led_lockout_mode & 0x0f) + 1;
    1f66:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1f6a:	82 2f       	mov	r24, r18
    1f6c:	8f 70       	andi	r24, 0x0F	; 15
    1f6e:	8f 5f       	subi	r24, 0xFF	; 255
            mode = mode % RGB_LED_NUM_COLORS;
    1f70:	6b e0       	ldi	r22, 0x0B	; 11
    1f72:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
            rgb_led_lockout_mode = mode | (rgb_led_lockout_mode & 0xf0);
    1f76:	20 7f       	andi	r18, 0xF0	; 240
    1f78:	29 2b       	or	r18, r25
    1f7a:	20 93 0e 01 	sts	0x010E, r18	; 0x80010e <rgb_led_lockout_mode>
            //save_config();
        }
        rgb_led_update(rgb_led_lockout_mode, arg);
    1f7e:	60 2f       	mov	r22, r16
    1f80:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <rgb_led_lockout_mode>
    1f84:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
        return MISCHIEF_MANAGED;
    1f88:	0c c0       	rjmp	.+24     	; 0x1fa2 <lockout_state+0x1a0>
    }
    // 7H, release: save new color
    else if (event == EV_click7_hold_release) {
    1f8a:	c7 3e       	cpi	r28, 0xE7	; 231
    1f8c:	49 f4       	brne	.+18     	; 0x1fa0 <lockout_state+0x19e>
        setting_rgb_mode_now = 0;
    1f8e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <setting_rgb_mode_now>
        save_config();
    1f92:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    1f96:	05 c0       	rjmp	.+10     	; 0x1fa2 <lockout_state+0x1a0>
            indicator_led(indicator_led_mode >> 2);
            #elif defined(USE_AUX_RGB_LEDS)
            rgb_led_update(rgb_led_lockout_mode, arg);
            #endif
        }
        return MISCHIEF_MANAGED;
    1f98:	d0 e0       	ldi	r29, 0x00	; 0
    1f9a:	03 c0       	rjmp	.+6      	; 0x1fa2 <lockout_state+0x1a0>
    }

    ////////// Every action below here is blocked in the simple UI //////////
    #ifdef USE_SIMPLE_UI
    if (simple_ui_active) {
        return EVENT_NOT_HANDLED;
    1f9c:	d1 e0       	ldi	r29, 0x01	; 1
    1f9e:	01 c0       	rjmp	.+2      	; 0x1fa2 <lockout_state+0x1a0>
        save_config();
        return MISCHIEF_MANAGED;
    }
    #endif

    return EVENT_NOT_HANDLED;
    1fa0:	d1 e0       	ldi	r29, 0x01	; 1
}
    1fa2:	8d 2f       	mov	r24, r29
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	1f 91       	pop	r17
    1faa:	0f 91       	pop	r16
    1fac:	08 95       	ret

00001fae <blip>:

// Just go dark for a moment to indicate to user that something happened
void blip() {
    1fae:	cf 93       	push	r28
    uint8_t temp = actual_level;
    1fb0:	c0 91 80 01 	lds	r28, 0x0180	; 0x800180 <actual_level>
    set_level(0);
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    delay_4ms(3);
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
    set_level(temp);
    1fc0:	8c 2f       	mov	r24, r28
    1fc2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
}
    1fc6:	cf 91       	pop	r28
    1fc8:	08 95       	ret

00001fca <tint_ramping_state>:
    // in addition to changing state...  so ignore any tint-ramp events which
    // don't look like they were meant to be here
    static uint8_t active = 0;

	// click, click, click: switch tint
	if(event == EV_3clicks) {
    1fca:	83 3c       	cpi	r24, 0xC3	; 195
    1fcc:	c1 f4       	brne	.+48     	; 0x1ffe <tint_ramping_state+0x34>
		if(tint <= 127) {
    1fce:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    1fd2:	88 23       	and	r24, r24
    1fd4:	3c f0       	brlt	.+14     	; 0x1fe4 <tint_ramping_state+0x1a>
			tint = 254;
    1fd6:	8e ef       	ldi	r24, 0xFE	; 254
    1fd8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
			tint_ramp_direction = -1;
    1fdc:	8f ef       	ldi	r24, 0xFF	; 255
    1fde:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tint_ramp_direction.2672>
    1fe2:	05 c0       	rjmp	.+10     	; 0x1fee <tint_ramping_state+0x24>
		}
		else {
			tint = 1;
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
			tint_ramp_direction = 1;
    1fea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tint_ramp_direction.2672>
		}
		set_level(actual_level);
    1fee:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    1ff2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>

		// remember tint after battery change
        save_config();
    1ff6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        // remember tint after battery change
        save_config();
        return EVENT_HANDLED;
    }

    return EVENT_NOT_HANDLED;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	08 95       	ret

		// remember tint after battery change
        save_config();
	}
    // click, click, click, hold: change the tint
    else if (event == EV_click4_hold) {
    1ffe:	84 3b       	cpi	r24, 0xB4	; 180
    2000:	09 f0       	breq	.+2      	; 0x2004 <tint_ramping_state+0x3a>
    2002:	4c c0       	rjmp	.+152    	; 0x209c <tint_ramping_state+0xd2>
        // reset at beginning of movement
        if (! arg) {
    2004:	67 2b       	or	r22, r23
    2006:	29 f4       	brne	.+10     	; 0x2012 <tint_ramping_state+0x48>
            active = 1;  // first frame means this is for us
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <active.2675>
            past_edge_counter = 0;  // doesn't start until user hits the edge
    200e:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <past_edge_counter.2674>
        }
        // ignore event if we weren't the ones who handled the first frame
        if (! active) return EVENT_HANDLED;
    2012:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <active.2675>
    2016:	88 23       	and	r24, r24
    2018:	09 f4       	brne	.+2      	; 0x201c <tint_ramping_state+0x52>
    201a:	5a c0       	rjmp	.+180    	; 0x20d0 <tint_ramping_state+0x106>

        // change normal tints
        if ((tint_ramp_direction > 0) && (tint < 254)) {
    201c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tint_ramp_direction.2672>
    2020:	18 16       	cp	r1, r24
    2022:	44 f4       	brge	.+16     	; 0x2034 <tint_ramping_state+0x6a>
    2024:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <tint>
    2028:	9e 3f       	cpi	r25, 0xFE	; 254
    202a:	20 f4       	brcc	.+8      	; 0x2034 <tint_ramping_state+0x6a>
            tint += 1;
    202c:	9f 5f       	subi	r25, 0xFF	; 255
    202e:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <tint>
    2032:	09 c0       	rjmp	.+18     	; 0x2046 <tint_ramping_state+0x7c>
        }
        else if ((tint_ramp_direction < 0) && (tint > 1)) {
    2034:	88 23       	and	r24, r24
    2036:	3c f4       	brge	.+14     	; 0x2046 <tint_ramping_state+0x7c>
    2038:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    203c:	82 30       	cpi	r24, 0x02	; 2
    203e:	18 f0       	brcs	.+6      	; 0x2046 <tint_ramping_state+0x7c>
            tint -= 1;
    2040:	81 50       	subi	r24, 0x01	; 1
    2042:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
        }
        // if the user kept pressing long enough, go the final step
        if (past_edge_counter == 64) {
    2046:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <past_edge_counter.2674>
    204a:	80 34       	cpi	r24, 0x40	; 64
    204c:	61 f4       	brne	.+24     	; 0x2066 <tint_ramping_state+0x9c>
            past_edge_counter ++;
    204e:	8f 5f       	subi	r24, 0xFF	; 255
    2050:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <past_edge_counter.2674>
            tint ^= 1;  // 0 -> 1, 254 -> 255
    2054:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <tint>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	89 27       	eor	r24, r25
    205c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
            blip();
    2060:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <blip>
    2064:	11 c0       	rjmp	.+34     	; 0x2088 <tint_ramping_state+0xbe>
        }
        // if tint change stalled, let user know we hit the edge
        else if (prev_tint == tint) {
    2066:	20 91 50 01 	lds	r18, 0x0150	; 0x800150 <prev_tint.2673>
    206a:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <tint>
    206e:	29 13       	cpse	r18, r25
    2070:	0b c0       	rjmp	.+22     	; 0x2088 <tint_ramping_state+0xbe>
            if (past_edge_counter == 0) blip();
    2072:	81 11       	cpse	r24, r1
    2074:	02 c0       	rjmp	.+4      	; 0x207a <tint_ramping_state+0xb0>
    2076:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <blip>
            // count up but don't wrap back to zero
            if (past_edge_counter < 255) past_edge_counter ++;
    207a:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <past_edge_counter.2674>
    207e:	8f 3f       	cpi	r24, 0xFF	; 255
    2080:	19 f0       	breq	.+6      	; 0x2088 <tint_ramping_state+0xbe>
    2082:	8f 5f       	subi	r24, 0xFF	; 255
    2084:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <past_edge_counter.2674>
        }
        prev_tint = tint;
    2088:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    208c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <prev_tint.2673>
        set_level(actual_level);
    2090:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2094:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return EVENT_HANDLED;
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	08 95       	ret
    }

    // click, click, hold, release: reverse direction for next ramp
    else if (event == EV_click4_hold_release) {
    209c:	84 3e       	cpi	r24, 0xE4	; 228
    209e:	b9 f4       	brne	.+46     	; 0x20ce <tint_ramping_state+0x104>
        active = 0;  // ignore next hold if it wasn't meant for us
    20a0:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <active.2675>
        // reverse
        tint_ramp_direction = -tint_ramp_direction;
    20a4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <tint_ramp_direction.2672>
    20a8:	81 95       	neg	r24
    20aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tint_ramp_direction.2672>
        if (tint == 0) tint_ramp_direction = 1;
    20ae:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    20b2:	81 11       	cpse	r24, r1
    20b4:	04 c0       	rjmp	.+8      	; 0x20be <tint_ramping_state+0xf4>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tint_ramp_direction.2672>
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <tint_ramping_state+0xfc>
        else if (tint == 255) tint_ramp_direction = -1;
    20be:	8f 3f       	cpi	r24, 0xFF	; 255
    20c0:	11 f4       	brne	.+4      	; 0x20c6 <tint_ramping_state+0xfc>
    20c2:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <tint_ramp_direction.2672>
        // remember tint after battery change
        save_config();
    20c6:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return EVENT_HANDLED;
    20ca:	80 e0       	ldi	r24, 0x00	; 0
    20cc:	08 95       	ret
    }

    return EVENT_NOT_HANDLED;
    20ce:	81 e0       	ldi	r24, 0x01	; 1
}
    20d0:	08 95       	ret

000020d2 <sunset_timer_state>:
#ifndef SUNSET_TIMER_C
#define SUNSET_TIMER_C

#include "sunset-timer.h"

uint8_t sunset_timer_state(Event event, uint16_t arg) {
    20d2:	cf 93       	push	r28

    #ifdef USE_SIMPLE_UI
    // No timer functions in Simple UI
    if (simple_ui_active) return EVENT_NOT_HANDLED;
    20d4:	c0 91 1c 01 	lds	r28, 0x011C	; 0x80011c <simple_ui_active>
    20d8:	c1 11       	cpse	r28, r1
    20da:	4a c0       	rjmp	.+148    	; 0x2170 <sunset_timer_state+0x9e>
    #endif

    // reset on start
    if (event == EV_enter_state) {
    20dc:	88 30       	cpi	r24, 0x08	; 8
    20de:	39 f4       	brne	.+14     	; 0x20ee <sunset_timer_state+0x1c>
        sunset_timer = 0;
    20e0:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <sunset_timer>
        sunset_ticks = 0;
    20e4:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sunset_ticks+0x1>
    20e8:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <sunset_ticks>
        return MISCHIEF_MANAGED;
    20ec:	48 c0       	rjmp	.+144    	; 0x217e <sunset_timer_state+0xac>
    }
    // hold: maybe "bump" the timer if it's active and almost expired
    else if (event == EV_hold) {
    20ee:	81 3b       	cpi	r24, 0xB1	; 177
    20f0:	61 f4       	brne	.+24     	; 0x210a <sunset_timer_state+0x38>
        // ramping up should "bump" the timer to extend the deadline a bit
        if ((sunset_timer > 0) && (sunset_timer < 4)) {
    20f2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sunset_timer>
    20f6:	81 50       	subi	r24, 0x01	; 1
    20f8:	83 30       	cpi	r24, 0x03	; 3
    20fa:	e0 f5       	brcc	.+120    	; 0x2174 <sunset_timer_state+0xa2>
            sunset_timer = 3;
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sunset_timer>
            sunset_timer_peak = 3;
    2102:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <sunset_timer_peak>
                sunset_timer --;
            }
        }
        return MISCHIEF_MANAGED;
    }
    return EVENT_NOT_HANDLED;
    2106:	c1 e0       	ldi	r28, 0x01	; 1
    2108:	3a c0       	rjmp	.+116    	; 0x217e <sunset_timer_state+0xac>
            sunset_timer = 3;
            sunset_timer_peak = 3;
        }
    }
    // 5H: add 5m to timer, per second, until released
    else if (event == EV_click5_hold) {
    210a:	85 3b       	cpi	r24, 0xB5	; 181
    210c:	b9 f4       	brne	.+46     	; 0x213c <sunset_timer_state+0x6a>
        if (0 == (arg % TICKS_PER_SECOND)) {
    210e:	cb 01       	movw	r24, r22
    2110:	6e e3       	ldi	r22, 0x3E	; 62
    2112:	70 e0       	ldi	r23, 0x00	; 0
    2114:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    2118:	89 2b       	or	r24, r25
    211a:	89 f5       	brne	.+98     	; 0x217e <sunset_timer_state+0xac>
            if (sunset_timer < (255 - SUNSET_TIMER_UNIT)) {
    211c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sunset_timer>
    2120:	8a 3f       	cpi	r24, 0xFA	; 250
    2122:	68 f5       	brcc	.+90     	; 0x217e <sunset_timer_state+0xac>
                // add a few minutes to the timer
                sunset_timer += SUNSET_TIMER_UNIT;
    2124:	8b 5f       	subi	r24, 0xFB	; 251
    2126:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sunset_timer>
                sunset_timer_peak = sunset_timer;  // reset ceiling
    212a:	80 93 75 01 	sts	0x0175, r24	; 0x800175 <sunset_timer_peak>
                sunset_ticks = 0;  // reset phase
    212e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sunset_ticks+0x1>
    2132:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <sunset_ticks>
                // let the user know something happened
                blink_once();
    2136:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
    213a:	21 c0       	rjmp	.+66     	; 0x217e <sunset_timer_state+0xac>
            }
        }
        return MISCHIEF_MANAGED;
    }
    // tick: count down until time expires
    else if (event == EV_tick) {
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	e1 f4       	brne	.+56     	; 0x2178 <sunset_timer_state+0xa6>
        // time passed
        sunset_ticks ++;
    2140:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <sunset_ticks>
    2144:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <sunset_ticks+0x1>
    2148:	01 96       	adiw	r24, 0x01	; 1
    214a:	90 93 74 01 	sts	0x0174, r25	; 0x800174 <sunset_ticks+0x1>
    214e:	80 93 73 01 	sts	0x0173, r24	; 0x800173 <sunset_ticks>
        // did we reach a minute mark?
        if (sunset_ticks >= TICKS_PER_MINUTE) {
    2152:	88 38       	cpi	r24, 0x88	; 136
    2154:	9e 40       	sbci	r25, 0x0E	; 14
    2156:	98 f0       	brcs	.+38     	; 0x217e <sunset_timer_state+0xac>
            sunset_ticks = 0;
    2158:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <sunset_ticks+0x1>
    215c:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <sunset_ticks>
            if (sunset_timer > 0) {
    2160:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <sunset_timer>
    2164:	88 23       	and	r24, r24
    2166:	51 f0       	breq	.+20     	; 0x217c <sunset_timer_state+0xaa>
                sunset_timer --;
    2168:	81 50       	subi	r24, 0x01	; 1
    216a:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <sunset_timer>
    216e:	07 c0       	rjmp	.+14     	; 0x217e <sunset_timer_state+0xac>

uint8_t sunset_timer_state(Event event, uint16_t arg) {

    #ifdef USE_SIMPLE_UI
    // No timer functions in Simple UI
    if (simple_ui_active) return EVENT_NOT_HANDLED;
    2170:	c1 e0       	ldi	r28, 0x01	; 1
    2172:	05 c0       	rjmp	.+10     	; 0x217e <sunset_timer_state+0xac>
                sunset_timer --;
            }
        }
        return MISCHIEF_MANAGED;
    }
    return EVENT_NOT_HANDLED;
    2174:	c1 e0       	ldi	r28, 0x01	; 1
    2176:	03 c0       	rjmp	.+6      	; 0x217e <sunset_timer_state+0xac>
    2178:	c1 e0       	ldi	r28, 0x01	; 1
    217a:	01 c0       	rjmp	.+2      	; 0x217e <sunset_timer_state+0xac>
            sunset_ticks = 0;
            if (sunset_timer > 0) {
                sunset_timer --;
            }
        }
        return MISCHIEF_MANAGED;
    217c:	c8 2f       	mov	r28, r24
    }
    return EVENT_NOT_HANDLED;
}
    217e:	8c 2f       	mov	r24, r28
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <steady_state>:

#ifdef USE_SUNSET_TIMER
#include "sunset-timer.h"
#endif

uint8_t steady_state(Event event, uint16_t arg) {
    2184:	bf 92       	push	r11
    2186:	cf 92       	push	r12
    2188:	df 92       	push	r13
    218a:	ef 92       	push	r14
    218c:	ff 92       	push	r15
    218e:	0f 93       	push	r16
    2190:	1f 93       	push	r17
    2192:	cf 93       	push	r28
    2194:	df 93       	push	r29
    2196:	c8 2f       	mov	r28, r24
    2198:	8b 01       	movw	r16, r22
    // make sure ramp globals are correct...
    // ... but they already are; no need to do it here
    //ramp_update_config();
    //nearest_level(1);  // same effect, takes less space

    uint8_t mode_min = ramp_floor;
    219a:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <ramp_floor>
    uint8_t mode_max = ramp_ceil;
    219e:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <ramp_ceil>
    uint8_t step_size;
    if (ramp_style) { step_size = ramp_discrete_step_size; }
    21a2:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <ramp_style>
    21a6:	88 23       	and	r24, r24
    21a8:	19 f0       	breq	.+6      	; 0x21b0 <steady_state+0x2c>
    21aa:	e0 90 ad 01 	lds	r14, 0x01AD	; 0x8001ad <ramp_discrete_step_size>
    21ae:	02 c0       	rjmp	.+4      	; 0x21b4 <steady_state+0x30>
    else { step_size = 1; }
    21b0:	ee 24       	eor	r14, r14
    21b2:	e3 94       	inc	r14

    // how bright is "turbo"?
    uint8_t turbo_level;
    #if defined(USE_2C_STYLE_CONFIG)  // user can choose 2C behavior
        uint8_t style_2c = ramp_2c_style;
    21b4:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <ramp_2c_style>
        #ifdef USE_SIMPLE_UI
        // simple UI has its own turbo config
        if (simple_ui_active) style_2c = ramp_2c_style_simple;
    21b8:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <simple_ui_active>
    21bc:	91 11       	cpse	r25, r1
    21be:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <ramp_2c_style_simple>
        #endif
        // 0 = no turbo
        // 1 = Anduril 1 direct to turbo
        // 2 = Anduril 2 direct to ceiling, or turbo if already at ceiling
        if (style_2c == 0) turbo_level = mode_max;
    21c2:	88 23       	and	r24, r24
    21c4:	c1 f0       	breq	.+48     	; 0x21f6 <steady_state+0x72>
        else {
			turbo_level = MAX_LEVEL;
			if ((style_2c == 1) && (memorized_level < mode_max)) { turbo_level = mode_max; }
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	49 f4       	brne	.+18     	; 0x21dc <steady_state+0x58>
    21ca:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    21ce:	8c 15       	cp	r24, r12
    21d0:	50 f0       	brcs	.+20     	; 0x21e6 <steady_state+0x62>
        // 0 = no turbo
        // 1 = Anduril 1 direct to turbo
        // 2 = Anduril 2 direct to ceiling, or turbo if already at ceiling
        if (style_2c == 0) turbo_level = mode_max;
        else {
			turbo_level = MAX_LEVEL;
    21d2:	0f 2e       	mov	r0, r31
    21d4:	f6 e9       	ldi	r31, 0x96	; 150
    21d6:	ff 2e       	mov	r15, r31
    21d8:	f0 2d       	mov	r31, r0
    21da:	06 c0       	rjmp	.+12     	; 0x21e8 <steady_state+0x64>
    21dc:	0f 2e       	mov	r0, r31
    21de:	f6 e9       	ldi	r31, 0x96	; 150
    21e0:	ff 2e       	mov	r15, r31
    21e2:	f0 2d       	mov	r31, r0
    21e4:	01 c0       	rjmp	.+2      	; 0x21e8 <steady_state+0x64>
			if ((style_2c == 1) && (memorized_level < mode_max)) { turbo_level = mode_max; }
    21e6:	fc 2c       	mov	r15, r12
			#if defined(USE_TINT_RAMPING) && defined(USE_CH1_FET_TINT_RAMPING)
			if ((tint != 1) && (tint != 255)) {
    21e8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    21ec:	81 30       	cpi	r24, 0x01	; 1
    21ee:	31 f0       	breq	.+12     	; 0x21fc <steady_state+0x78>
    21f0:	8f 3f       	cpi	r24, 0xFF	; 255
    21f2:	19 f4       	brne	.+6      	; 0x21fa <steady_state+0x76>
    21f4:	03 c0       	rjmp	.+6      	; 0x21fc <steady_state+0x78>
        if (simple_ui_active) style_2c = ramp_2c_style_simple;
        #endif
        // 0 = no turbo
        // 1 = Anduril 1 direct to turbo
        // 2 = Anduril 2 direct to ceiling, or turbo if already at ceiling
        if (style_2c == 0) turbo_level = mode_max;
    21f6:	fc 2c       	mov	r15, r12
    21f8:	01 c0       	rjmp	.+2      	; 0x21fc <steady_state+0x78>
        else {
			turbo_level = MAX_LEVEL;
			if ((style_2c == 1) && (memorized_level < mode_max)) { turbo_level = mode_max; }
			#if defined(USE_TINT_RAMPING) && defined(USE_CH1_FET_TINT_RAMPING)
			if ((tint != 1) && (tint != 255)) {
				turbo_level = mode_max;
    21fa:	fc 2c       	mov	r15, r12
    #endif

    #ifdef USE_SUNSET_TIMER
    // handle the shutoff timer first
    static uint8_t timer_orig_level = 0;
    uint8_t sunset_active = sunset_timer;  // save for comparison
    21fc:	d0 91 76 01 	lds	r29, 0x0176	; 0x800176 <sunset_timer>
    // clock tick
    sunset_timer_state(event, arg);
    2200:	b8 01       	movw	r22, r16
    2202:	8c 2f       	mov	r24, r28
    2204:	0e 94 69 10 	call	0x20d2	; 0x20d2 <sunset_timer_state>
    // if the timer was just turned on
    if (sunset_timer  &&  (! sunset_active)) {
    2208:	b0 90 76 01 	lds	r11, 0x0176	; 0x800176 <sunset_timer>
    220c:	bb 20       	and	r11, r11
    220e:	39 f0       	breq	.+14     	; 0x221e <steady_state+0x9a>
    2210:	d1 11       	cpse	r29, r1
    2212:	05 c0       	rjmp	.+10     	; 0x221e <steady_state+0x9a>
        timer_orig_level = actual_level;
    2214:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2218:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timer_orig_level.2462>
    221c:	0b c0       	rjmp	.+22     	; 0x2234 <steady_state+0xb0>
    }
    // if the timer just expired, shut off
    else if (sunset_active  &&  (! sunset_timer)) {
    221e:	dd 23       	and	r29, r29
    2220:	49 f0       	breq	.+18     	; 0x2234 <steady_state+0xb0>
    2222:	b1 10       	cpse	r11, r1
    2224:	07 c0       	rjmp	.+14     	; 0x2234 <steady_state+0xb0>
        set_state(off_state, 0);
    2226:	60 e0       	ldi	r22, 0x00	; 0
    2228:	70 e0       	ldi	r23, 0x00	; 0
    222a:	86 e2       	ldi	r24, 0x26	; 38
    222c:	9d e0       	ldi	r25, 0x0D	; 13
    222e:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    2232:	1a c2       	rjmp	.+1076   	; 0x2668 <steady_state+0x4e4>
    }
    #endif  // ifdef USE_SUNSET_TIMER

    // turn LED on when we first enter the mode
    if ((event == EV_enter_state) || (event == EV_reenter_state)) {
    2234:	c8 30       	cpi	r28, 0x08	; 8
    2236:	11 f0       	breq	.+4      	; 0x223c <steady_state+0xb8>
    2238:	ca 30       	cpi	r28, 0x0A	; 10
    223a:	e9 f4       	brne	.+58     	; 0x2276 <steady_state+0xf2>
        #if defined(USE_MOMENTARY_MODE) && defined(USE_STROBE_STATE)
        momentary_mode = 0;  // 0 = ramping, 1 = strobes
    223c:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <momentary_mode>
        #endif
        // if we just got back from config mode, go back to memorized level
        if (event == EV_reenter_state) {
    2240:	ca 30       	cpi	r28, 0x0A	; 10
    2242:	19 f4       	brne	.+6      	; 0x224a <steady_state+0xc6>
            arg = memorized_level;
    2244:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <memorized_level>
    2248:	10 e0       	ldi	r17, 0x00	; 0
        }
        // remember this level, unless it's moon or turbo
        if ((arg > mode_min) && (arg < mode_max))
    224a:	8d 2d       	mov	r24, r13
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	80 17       	cp	r24, r16
    2250:	91 07       	cpc	r25, r17
    2252:	38 f4       	brcc	.+14     	; 0x2262 <steady_state+0xde>
    2254:	8c 2d       	mov	r24, r12
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	08 17       	cp	r16, r24
    225a:	19 07       	cpc	r17, r25
    225c:	10 f4       	brcc	.+4      	; 0x2262 <steady_state+0xde>
            memorized_level = arg;
    225e:	00 93 1d 01 	sts	0x011D, r16	; 0x80011d <memorized_level>
        // use the requested level even if not memorized
        arg = nearest_level(arg);
    2262:	c8 01       	movw	r24, r16
    2264:	0e 94 8b 0a 	call	0x1516	; 0x1516 <nearest_level>
        set_level_and_therm_target(arg);
    2268:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
        ramp_direction = 1;
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
        return MISCHIEF_MANAGED;
    2272:	b1 2c       	mov	r11, r1
    2274:	f9 c1       	rjmp	.+1010   	; 0x2668 <steady_state+0x4e4>
        set_level_and_therm_target(level_before_off);
        return MISCHIEF_MANAGED;
    }
    #endif  // if (B_TIMING_OFF == B_RELEASE_T)
    // 1 click: off
    else if (event == EV_1click) {
    2276:	c1 3c       	cpi	r28, 0xC1	; 193
    2278:	41 f4       	brne	.+16     	; 0x228a <steady_state+0x106>
        set_state(off_state, 0);
    227a:	60 e0       	ldi	r22, 0x00	; 0
    227c:	70 e0       	ldi	r23, 0x00	; 0
    227e:	86 e2       	ldi	r24, 0x26	; 38
    2280:	9d e0       	ldi	r25, 0x0D	; 13
    2282:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    2286:	b1 2c       	mov	r11, r1
    2288:	ef c1       	rjmp	.+990    	; 0x2668 <steady_state+0x4e4>
    }
    // 2 clicks: go to/from highest level
    else if (event == EV_2clicks) {
    228a:	c2 3c       	cpi	r28, 0xC2	; 194
    228c:	91 f4       	brne	.+36     	; 0x22b2 <steady_state+0x12e>
        if (actual_level < turbo_level) {
    228e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2292:	8f 15       	cp	r24, r15
    2294:	20 f4       	brcc	.+8      	; 0x229e <steady_state+0x11a>
            set_level_and_therm_target(turbo_level);
    2296:	8f 2d       	mov	r24, r15
    2298:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
    229c:	04 c0       	rjmp	.+8      	; 0x22a6 <steady_state+0x122>
        }
        else {
            set_level_and_therm_target(memorized_level);
    229e:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    22a2:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
        }
        #ifdef USE_SUNSET_TIMER
        timer_orig_level = actual_level;
    22a6:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    22aa:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timer_orig_level.2462>
        #endif
        return MISCHIEF_MANAGED;
    22ae:	b1 2c       	mov	r11, r1
    22b0:	db c1       	rjmp	.+950    	; 0x2668 <steady_state+0x4e4>
    // }
    // #endif

	#ifdef USE_TINT_RAMPING
	// middle tint ramp
	else if (event == EV_4clicks) {
    22b2:	c4 3c       	cpi	r28, 0xC4	; 196
    22b4:	41 f4       	brne	.+16     	; 0x22c6 <steady_state+0x142>
        tint = 127;
    22b6:	8f e7       	ldi	r24, 0x7F	; 127
    22b8:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
		set_level(actual_level);
    22bc:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    22c0:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    22c4:	4b c1       	rjmp	.+662    	; 0x255c <steady_state+0x3d8>
    }
	#endif

    // hold: change brightness (brighter, dimmer)
    // click, hold: change brightness (dimmer)
    else if ((event == EV_click1_hold) || (event == EV_click2_hold)) {
    22c6:	8f e4       	ldi	r24, 0x4F	; 79
    22c8:	8c 0f       	add	r24, r28
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	08 f0       	brcs	.+2      	; 0x22d0 <steady_state+0x14c>
    22ce:	9b c0       	rjmp	.+310    	; 0x2406 <steady_state+0x282>
        // ramp slower in discrete mode
        if (ramp_style  &&  (arg % HOLD_TIMEOUT != 0)) {
    22d0:	b0 90 79 01 	lds	r11, 0x0179	; 0x800179 <ramp_style>
    22d4:	bb 20       	and	r11, r11
    22d6:	41 f0       	breq	.+16     	; 0x22e8 <steady_state+0x164>
    22d8:	c8 01       	movw	r24, r16
    22da:	68 e1       	ldi	r22, 0x18	; 24
    22dc:	70 e0       	ldi	r23, 0x00	; 0
    22de:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    22e2:	89 2b       	or	r24, r25
    22e4:	09 f0       	breq	.+2      	; 0x22e8 <steady_state+0x164>
    22e6:	af c1       	rjmp	.+862    	; 0x2646 <steady_state+0x4c2>
            return MISCHIEF_MANAGED;
        }
        #ifdef USE_RAMP_SPEED_CONFIG
        // ramp slower if user configured things that way
        if ((! ramp_style) && (arg % ramp_speed)) {
    22e8:	b1 10       	cpse	r11, r1
    22ea:	09 c0       	rjmp	.+18     	; 0x22fe <steady_state+0x17a>
    22ec:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <ramp_stepss>
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	c8 01       	movw	r24, r16
    22f4:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    22f8:	89 2b       	or	r24, r25
    22fa:	09 f0       	breq	.+2      	; 0x22fe <steady_state+0x17a>
    22fc:	b5 c1       	rjmp	.+874    	; 0x2668 <steady_state+0x4e4>
            return MISCHIEF_MANAGED;
        }
        #endif
        // fix ramp direction on first frame if necessary
        if (!arg) {
    22fe:	01 15       	cp	r16, r1
    2300:	11 05       	cpc	r17, r1
    2302:	a9 f4       	brne	.+42     	; 0x232e <steady_state+0x1aa>
            // click, hold should always go down if possible
            if (event == EV_click2_hold) { ramp_direction = -1; }
    2304:	c2 3b       	cpi	r28, 0xB2	; 178
    2306:	21 f4       	brne	.+8      	; 0x2310 <steady_state+0x18c>
    2308:	8f ef       	ldi	r24, 0xFF	; 255
    230a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
    230e:	58 c0       	rjmp	.+176    	; 0x23c0 <steady_state+0x23c>
            // make it ramp down instead, if already at max
            else if (actual_level >= mode_max) { ramp_direction = -1; }
    2310:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2314:	8c 15       	cp	r24, r12
    2316:	20 f0       	brcs	.+8      	; 0x2320 <steady_state+0x19c>
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
    231e:	50 c0       	rjmp	.+160    	; 0x23c0 <steady_state+0x23c>
            // make it ramp up if already at min
            // (off->hold->stepped_min->release causes this state)
            else if (actual_level <= mode_min) { ramp_direction = 1; }
    2320:	d8 16       	cp	r13, r24
    2322:	08 f4       	brcc	.+2      	; 0x2326 <steady_state+0x1a2>
    2324:	4d c0       	rjmp	.+154    	; 0x23c0 <steady_state+0x23c>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
    232c:	49 c0       	rjmp	.+146    	; 0x23c0 <steady_state+0x23c>
        // if the button is stuck, err on the side of safety and ramp down
        else if ((arg > TICKS_PER_SECOND * 5
                    #ifdef USE_RAMP_SPEED_CONFIG
                    // FIXME: count from time actual_level hits mode_max,
                    //   not from beginning of button hold
                    * ramp_speed
    232e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <ramp_stepss>
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	ac 01       	movw	r20, r24
    2336:	44 0f       	add	r20, r20
    2338:	55 1f       	adc	r21, r21
    233a:	44 0f       	add	r20, r20
    233c:	55 1f       	adc	r21, r21
    233e:	48 0f       	add	r20, r24
    2340:	59 1f       	adc	r21, r25
    2342:	9a 01       	movw	r18, r20
    2344:	22 0f       	add	r18, r18
    2346:	33 1f       	adc	r19, r19
    2348:	22 95       	swap	r18
    234a:	32 95       	swap	r19
    234c:	30 7f       	andi	r19, 0xF0	; 240
    234e:	32 27       	eor	r19, r18
    2350:	20 7f       	andi	r18, 0xF0	; 240
    2352:	32 27       	eor	r19, r18
    2354:	24 1b       	sub	r18, r20
    2356:	35 0b       	sbc	r19, r21
    2358:	22 0f       	add	r18, r18
    235a:	33 1f       	adc	r19, r19
            // make it ramp up if already at min
            // (off->hold->stepped_min->release causes this state)
            else if (actual_level <= mode_min) { ramp_direction = 1; }
        }
        // if the button is stuck, err on the side of safety and ramp down
        else if ((arg > TICKS_PER_SECOND * 5
    235c:	20 17       	cp	r18, r16
    235e:	31 07       	cpc	r19, r17
    2360:	40 f4       	brcc	.+16     	; 0x2372 <steady_state+0x1ee>
                    #ifdef USE_RAMP_SPEED_CONFIG
                    // FIXME: count from time actual_level hits mode_max,
                    //   not from beginning of button hold
                    * ramp_speed
                    #endif
                    ) && (actual_level >= mode_max)) {
    2362:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <actual_level>
    2366:	2c 15       	cp	r18, r12
    2368:	20 f0       	brcs	.+8      	; 0x2372 <steady_state+0x1ee>
            ramp_direction = -1;
    236a:	8f ef       	ldi	r24, 0xFF	; 255
    236c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
    2370:	27 c0       	rjmp	.+78     	; 0x23c0 <steady_state+0x23c>
        // if the button is still stuck, lock the light
        else if ((arg > TICKS_PER_SECOND * 10
                    #ifdef USE_RAMP_SPEED_CONFIG
                    // FIXME: count from time actual_level hits mode_min,
                    //   not from beginning of button hold
                    * ramp_speed
    2372:	9c 01       	movw	r18, r24
    2374:	22 0f       	add	r18, r18
    2376:	33 1f       	adc	r19, r19
    2378:	22 0f       	add	r18, r18
    237a:	33 1f       	adc	r19, r19
    237c:	82 0f       	add	r24, r18
    237e:	93 1f       	adc	r25, r19
    2380:	9c 01       	movw	r18, r24
    2382:	22 0f       	add	r18, r18
    2384:	33 1f       	adc	r19, r19
    2386:	22 95       	swap	r18
    2388:	32 95       	swap	r19
    238a:	30 7f       	andi	r19, 0xF0	; 240
    238c:	32 27       	eor	r19, r18
    238e:	20 7f       	andi	r18, 0xF0	; 240
    2390:	32 27       	eor	r19, r18
    2392:	a9 01       	movw	r20, r18
    2394:	48 1b       	sub	r20, r24
    2396:	59 0b       	sbc	r21, r25
    2398:	ca 01       	movw	r24, r20
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
                    ) && (actual_level >= mode_max)) {
            ramp_direction = -1;
        }
        #ifdef USE_LOCKOUT_MODE
        // if the button is still stuck, lock the light
        else if ((arg > TICKS_PER_SECOND * 10
    23a2:	80 17       	cp	r24, r16
    23a4:	91 07       	cpc	r25, r17
    23a6:	60 f4       	brcc	.+24     	; 0x23c0 <steady_state+0x23c>
                    #ifdef USE_RAMP_SPEED_CONFIG
                    // FIXME: count from time actual_level hits mode_min,
                    //   not from beginning of button hold
                    * ramp_speed
                    #endif
                    ) && (actual_level <= mode_min)) {
    23a8:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    23ac:	d8 16       	cp	r13, r24
    23ae:	40 f0       	brcs	.+16     	; 0x23c0 <steady_state+0x23c>
            blink_once();
    23b0:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
            set_state(lockout_state, 0);
    23b4:	60 e0       	ldi	r22, 0x00	; 0
    23b6:	70 e0       	ldi	r23, 0x00	; 0
    23b8:	81 e0       	ldi	r24, 0x01	; 1
    23ba:	9f e0       	ldi	r25, 0x0F	; 15
    23bc:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        }
        #endif
        memorized_level = nearest_level((int16_t)actual_level \
    23c0:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <actual_level>
                          + (step_size * ramp_direction));
    23c4:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ramp_direction.2455>
    23c8:	6e 2d       	mov	r22, r14
    23ca:	70 e0       	ldi	r23, 0x00	; 0
    23cc:	08 2e       	mov	r0, r24
    23ce:	00 0c       	add	r0, r0
    23d0:	99 0b       	sbc	r25, r25
    23d2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
                    ) && (actual_level <= mode_min)) {
            blink_once();
            set_state(lockout_state, 0);
        }
        #endif
        memorized_level = nearest_level((int16_t)actual_level \
    23d6:	82 0f       	add	r24, r18
    23d8:	91 1d       	adc	r25, r1
    23da:	0e 94 8b 0a 	call	0x1516	; 0x1516 <nearest_level>
    23de:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <memorized_level>
                          + (step_size * ramp_direction));
        #if defined(BLINK_AT_RAMP_CEIL) || defined(BLINK_AT_RAMP_MIDDLE)
        // only blink once for each threshold
        if ((memorized_level != actual_level) && (
    23e2:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <actual_level>
    23e6:	89 17       	cp	r24, r25
    23e8:	21 f0       	breq	.+8      	; 0x23f2 <steady_state+0x26e>
    23ea:	c8 12       	cpse	r12, r24
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <steady_state+0x26e>
                #endif
                #ifdef BLINK_AT_RAMP_FLOOR
                || (memorized_level == mode_min)
                #endif
                )) {
            blip();
    23ee:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <blip>
                    )
        {
            blip();
        }
        #endif
        set_level_and_therm_target(memorized_level);
    23f2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    23f6:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
        #ifdef USE_SUNSET_TIMER
        timer_orig_level = actual_level;
    23fa:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    23fe:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timer_orig_level.2462>
        #endif
        return MISCHIEF_MANAGED;
    2402:	b1 2c       	mov	r11, r1
    2404:	31 c1       	rjmp	.+610    	; 0x2668 <steady_state+0x4e4>
    }
    // reverse ramp direction on hold release
    else if ((event == EV_click1_hold_release)
             || (event == EV_click2_hold_release)) {
    2406:	8f e1       	ldi	r24, 0x1F	; 31
    2408:	8c 0f       	add	r24, r28
        timer_orig_level = actual_level;
        #endif
        return MISCHIEF_MANAGED;
    }
    // reverse ramp direction on hold release
    else if ((event == EV_click1_hold_release)
    240a:	82 30       	cpi	r24, 0x02	; 2
    240c:	38 f4       	brcc	.+14     	; 0x241c <steady_state+0x298>
             || (event == EV_click2_hold_release)) {
        ramp_direction = -ramp_direction;
    240e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <ramp_direction.2455>
    2412:	81 95       	neg	r24
    2414:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>
        #ifdef START_AT_MEMORIZED_LEVEL
        save_config_wl();
        #endif
        return MISCHIEF_MANAGED;
    2418:	b1 2c       	mov	r11, r1
    241a:	26 c1       	rjmp	.+588    	; 0x2668 <steady_state+0x4e4>
    }

    else if (event == EV_tick) {
    241c:	c1 30       	cpi	r28, 0x01	; 1
    241e:	09 f0       	breq	.+2      	; 0x2422 <steady_state+0x29e>
    2420:	55 c0       	rjmp	.+170    	; 0x24cc <steady_state+0x348>
        // un-reverse after 1 second
        if (arg == AUTO_REVERSE_TIME) ramp_direction = 1;
    2422:	09 32       	cpi	r16, 0x29	; 41
    2424:	11 05       	cpc	r17, r1
    2426:	19 f4       	brne	.+6      	; 0x242e <steady_state+0x2aa>
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <ramp_direction.2455>

        #ifdef USE_SUNSET_TIMER
        // reduce output if shutoff timer is active
        if (sunset_timer) {
    242e:	bb 20       	and	r11, r11
    2430:	a9 f0       	breq	.+42     	; 0x245c <steady_state+0x2d8>
            uint8_t dimmed_level = timer_orig_level * (sunset_timer-1) / sunset_timer_peak;
    2432:	6b 2d       	mov	r22, r11
    2434:	70 e0       	ldi	r23, 0x00	; 0
    2436:	61 50       	subi	r22, 0x01	; 1
    2438:	71 09       	sbc	r23, r1
    243a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <timer_orig_level.2462>
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
    2444:	60 91 75 01 	lds	r22, 0x0175	; 0x800175 <sunset_timer_peak>
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
            if (dimmed_level < 1) dimmed_level = 1;
    244e:	61 11       	cpse	r22, r1
    2450:	01 c0       	rjmp	.+2      	; 0x2454 <steady_state+0x2d0>
    2452:	61 e0       	ldi	r22, 0x01	; 1
    #endif
}

#ifdef USE_SET_LEVEL_GRADUALLY
inline void set_level_gradually(uint8_t lvl) {
    gradual_target = lvl;
    2454:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <gradual_target>
            #ifdef USE_SET_LEVEL_GRADUALLY
            set_level_gradually(dimmed_level);
            target_level = dimmed_level;
    2458:	60 93 7d 01 	sts	0x017D, r22	; 0x80017d <target_level>
            #endif
        }
        #endif  // ifdef USE_SUNSET_TIMER

        #ifdef USE_SET_LEVEL_GRADUALLY
        int16_t diff = gradual_target - actual_level;
    245c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <gradual_target>
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <actual_level>
    2466:	82 1b       	sub	r24, r18
    2468:	91 09       	sbc	r25, r1
        static uint16_t ticks_since_adjust = 0;
        ticks_since_adjust++;
    246a:	60 91 58 01 	lds	r22, 0x0158	; 0x800158 <ticks_since_adjust.2466>
    246e:	70 91 59 01 	lds	r23, 0x0159	; 0x800159 <ticks_since_adjust.2466+0x1>
    2472:	6f 5f       	subi	r22, 0xFF	; 255
    2474:	7f 4f       	sbci	r23, 0xFF	; 255
    2476:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <ticks_since_adjust.2466+0x1>
    247a:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <ticks_since_adjust.2466>
        if (diff) {
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	09 f4       	brne	.+2      	; 0x2484 <steady_state+0x300>
    2482:	e3 c0       	rjmp	.+454    	; 0x264a <steady_state+0x4c6>
            uint16_t ticks_per_adjust = 256;
            if (diff < 0) {
    2484:	2c f4       	brge	.+10     	; 0x2490 <steady_state+0x30c>
                //diff = -diff;
                if (actual_level > THERM_FASTER_LEVEL) {
    2486:	23 38       	cpi	r18, 0x83	; 131
    2488:	30 f4       	brcc	.+12     	; 0x2496 <steady_state+0x312>
        #ifdef USE_SET_LEVEL_GRADUALLY
        int16_t diff = gradual_target - actual_level;
        static uint16_t ticks_since_adjust = 0;
        ticks_since_adjust++;
        if (diff) {
            uint16_t ticks_per_adjust = 256;
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	51 e0       	ldi	r21, 0x01	; 1
    248e:	10 c0       	rjmp	.+32     	; 0x24b0 <steady_state+0x32c>
                    #endif
                    ticks_per_adjust >>= 2;
                }
            } else {
                // rise at half speed
                ticks_per_adjust <<= 1;
    2490:	40 e0       	ldi	r20, 0x00	; 0
    2492:	52 e0       	ldi	r21, 0x02	; 2
    2494:	0d c0       	rjmp	.+26     	; 0x24b0 <steady_state+0x32c>
                //diff = -diff;
                if (actual_level > THERM_FASTER_LEVEL) {
                    #ifdef THERM_HARD_TURBO_DROP
                    ticks_per_adjust >>= 2;
                    #endif
                    ticks_per_adjust >>= 2;
    2496:	40 e4       	ldi	r20, 0x40	; 64
    2498:	50 e0       	ldi	r21, 0x00	; 0
    249a:	0a c0       	rjmp	.+20     	; 0x24b0 <steady_state+0x32c>
            } else {
                // rise at half speed
                ticks_per_adjust <<= 1;
            }
            while (diff) {
                ticks_per_adjust >>= 1;
    249c:	56 95       	lsr	r21
    249e:	47 95       	ror	r20
                //diff >>= 1;
                diff /= 2;  // because shifting produces weird behavior
    24a0:	9c 01       	movw	r18, r24
    24a2:	99 23       	and	r25, r25
    24a4:	14 f4       	brge	.+4      	; 0x24aa <steady_state+0x326>
    24a6:	2f 5f       	subi	r18, 0xFF	; 255
    24a8:	3f 4f       	sbci	r19, 0xFF	; 255
    24aa:	c9 01       	movw	r24, r18
    24ac:	95 95       	asr	r25
    24ae:	87 95       	ror	r24
                }
            } else {
                // rise at half speed
                ticks_per_adjust <<= 1;
            }
            while (diff) {
    24b0:	00 97       	sbiw	r24, 0x00	; 0
    24b2:	a1 f7       	brne	.-24     	; 0x249c <steady_state+0x318>
                ticks_per_adjust >>= 1;
                //diff >>= 1;
                diff /= 2;  // because shifting produces weird behavior
            }
            if (ticks_since_adjust > ticks_per_adjust)
    24b4:	46 17       	cp	r20, r22
    24b6:	57 07       	cpc	r21, r23
    24b8:	08 f0       	brcs	.+2      	; 0x24bc <steady_state+0x338>
    24ba:	c9 c0       	rjmp	.+402    	; 0x264e <steady_state+0x4ca>
            {
                gradual_tick();
    24bc:	0e 94 20 09 	call	0x1240	; 0x1240 <gradual_tick>
                ticks_since_adjust = 0;
    24c0:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <ticks_since_adjust.2466+0x1>
    24c4:	10 92 58 01 	sts	0x0158, r1	; 0x800158 <ticks_since_adjust.2466>
            }
        }
        #endif  // ifdef USE_SET_LEVEL_GRADUALLY
        return MISCHIEF_MANAGED;
    24c8:	b1 2c       	mov	r11, r1
    24ca:	ce c0       	rjmp	.+412    	; 0x2668 <steady_state+0x4e4>
    }

    #ifdef USE_THERMAL_REGULATION
    // overheating: drop by an amount proportional to how far we are above the ceiling
    else if (event == EV_temperature_high) {
    24cc:	c5 30       	cpi	r28, 0x05	; 5
    24ce:	b9 f4       	brne	.+46     	; 0x24fe <steady_state+0x37a>
            #else
            set_level_and_therm_target(THERM_FASTER_LEVEL);
            #endif
        } else
        #endif
        if (actual_level > MIN_THERM_STEPDOWN) {
    24d0:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    24d4:	82 34       	cpi	r24, 0x42	; 66
    24d6:	08 f4       	brcc	.+2      	; 0x24da <steady_state+0x356>
    24d8:	bc c0       	rjmp	.+376    	; 0x2652 <steady_state+0x4ce>
            int16_t stepdown = actual_level - arg;
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	80 1b       	sub	r24, r16
    24de:	91 0b       	sbc	r25, r17
    24e0:	28 2f       	mov	r18, r24
            if (stepdown < MIN_THERM_STEPDOWN) stepdown = MIN_THERM_STEPDOWN;
    24e2:	81 34       	cpi	r24, 0x41	; 65
    24e4:	91 05       	cpc	r25, r1
    24e6:	24 f0       	brlt	.+8      	; 0x24f0 <steady_state+0x36c>
            else if (stepdown > MAX_LEVEL) stepdown = MAX_LEVEL;
    24e8:	87 39       	cpi	r24, 0x97	; 151
    24ea:	91 05       	cpc	r25, r1
    24ec:	18 f4       	brcc	.+6      	; 0x24f4 <steady_state+0x370>
    24ee:	03 c0       	rjmp	.+6      	; 0x24f6 <steady_state+0x372>
            #endif
        } else
        #endif
        if (actual_level > MIN_THERM_STEPDOWN) {
            int16_t stepdown = actual_level - arg;
            if (stepdown < MIN_THERM_STEPDOWN) stepdown = MIN_THERM_STEPDOWN;
    24f0:	21 e4       	ldi	r18, 0x41	; 65
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <steady_state+0x372>
            else if (stepdown > MAX_LEVEL) stepdown = MAX_LEVEL;
    24f4:	26 e9       	ldi	r18, 0x96	; 150
    24f6:	20 93 b0 01 	sts	0x01B0, r18	; 0x8001b0 <gradual_target>
            set_level_gradually(stepdown);
            #else
            set_level(stepdown);
            #endif
        }
        return MISCHIEF_MANAGED;
    24fa:	b1 2c       	mov	r11, r1
    24fc:	b5 c0       	rjmp	.+362    	; 0x2668 <steady_state+0x4e4>
    }
    // underheating: increase slowly if we're lower than the target
    //               (proportional to how low we are)
    else if (event == EV_temperature_low) {
    24fe:	c6 30       	cpi	r28, 0x06	; 6
    2500:	c1 f4       	brne	.+48     	; 0x2532 <steady_state+0x3ae>
        #if 0
        blip();
        #endif
        if (actual_level < target_level) {
    2502:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <actual_level>
    2506:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <target_level>
    250a:	98 17       	cp	r25, r24
    250c:	08 f0       	brcs	.+2      	; 0x2510 <steady_state+0x38c>
    250e:	a3 c0       	rjmp	.+326    	; 0x2656 <steady_state+0x4d2>
            //int16_t stepup = actual_level + (arg>>1);
            int16_t stepup = actual_level + arg;
    2510:	09 0f       	add	r16, r25
    2512:	11 1d       	adc	r17, r1
            if (stepup > target_level) stepup = target_level;
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	80 17       	cp	r24, r16
    2518:	91 07       	cpc	r25, r17
    251a:	3c f0       	brlt	.+14     	; 0x252a <steady_state+0x3a6>
            else if (stepup < MIN_THERM_STEPDOWN) stepup = MIN_THERM_STEPDOWN;
    251c:	01 34       	cpi	r16, 0x41	; 65
    251e:	11 05       	cpc	r17, r1
    2520:	14 f0       	brlt	.+4      	; 0x2526 <steady_state+0x3a2>
        #if 0
        blip();
        #endif
        if (actual_level < target_level) {
            //int16_t stepup = actual_level + (arg>>1);
            int16_t stepup = actual_level + arg;
    2522:	c8 01       	movw	r24, r16
    2524:	02 c0       	rjmp	.+4      	; 0x252a <steady_state+0x3a6>
            if (stepup > target_level) stepup = target_level;
            else if (stepup < MIN_THERM_STEPDOWN) stepup = MIN_THERM_STEPDOWN;
    2526:	81 e4       	ldi	r24, 0x41	; 65
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gradual_target>
            set_level_gradually(stepup);
            #else
            set_level(stepup);
            #endif
        }
        return MISCHIEF_MANAGED;
    252e:	b1 2c       	mov	r11, r1
    2530:	9b c0       	rjmp	.+310    	; 0x2668 <steady_state+0x4e4>
    }
    #ifdef USE_SET_LEVEL_GRADUALLY
    // temperature is within target window
    // (so stop trying to adjust output)
    else if (event == EV_temperature_okay) {
    2532:	c7 30       	cpi	r28, 0x07	; 7
    2534:	99 f4       	brne	.+38     	; 0x255c <steady_state+0x3d8>
        // if we're still adjusting output...  stop after the current step
        if (gradual_target > actual_level)
    2536:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <gradual_target>
    253a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    253e:	89 17       	cp	r24, r25
    2540:	28 f4       	brcc	.+10     	; 0x254c <steady_state+0x3c8>
            gradual_target = actual_level + 1;
    2542:	8f 5f       	subi	r24, 0xFF	; 255
    2544:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gradual_target>
        else if (gradual_target < actual_level)
            gradual_target = actual_level - 1;
        return MISCHIEF_MANAGED;
    2548:	b1 2c       	mov	r11, r1
    254a:	8e c0       	rjmp	.+284    	; 0x2668 <steady_state+0x4e4>
    // (so stop trying to adjust output)
    else if (event == EV_temperature_okay) {
        // if we're still adjusting output...  stop after the current step
        if (gradual_target > actual_level)
            gradual_target = actual_level + 1;
        else if (gradual_target < actual_level)
    254c:	98 17       	cp	r25, r24
    254e:	08 f0       	brcs	.+2      	; 0x2552 <steady_state+0x3ce>
    2550:	84 c0       	rjmp	.+264    	; 0x265a <steady_state+0x4d6>
            gradual_target = actual_level - 1;
    2552:	81 50       	subi	r24, 0x01	; 1
    2554:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <gradual_target>
        return MISCHIEF_MANAGED;
    2558:	b1 2c       	mov	r11, r1
    255a:	86 c0       	rjmp	.+268    	; 0x2668 <steady_state+0x4e4>
    #endif  // ifdef USE_SET_LEVEL_GRADUALLY
    #endif  // ifdef USE_THERMAL_REGULATION

    ////////// Every action below here is blocked in the simple UI //////////
    #ifdef USE_SIMPLE_UI
    if (simple_ui_active) {
    255c:	b0 90 1c 01 	lds	r11, 0x011C	; 0x80011c <simple_ui_active>
    2560:	b1 10       	cpse	r11, r1
    2562:	7d c0       	rjmp	.+250    	; 0x265e <steady_state+0x4da>
        return EVENT_NOT_HANDLED;
    }
    #endif

    // 5 clicks: toggle smooth vs discrete ramping
    else if (event == EV_5clicks) {
    2564:	c5 3c       	cpi	r28, 0xC5	; 197
    2566:	c9 f4       	brne	.+50     	; 0x259a <steady_state+0x416>
        ramp_style = !ramp_style;
    2568:	81 e0       	ldi	r24, 0x01	; 1
    256a:	90 91 79 01 	lds	r25, 0x0179	; 0x800179 <ramp_style>
    256e:	91 11       	cpse	r25, r1
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <ramp_style>
        save_config();
    2576:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        #ifdef START_AT_MEMORIZED_LEVEL
        save_config_wl();
        #endif
        blip();
    257a:	0e 94 d7 0f 	call	0x1fae	; 0x1fae <blip>
        memorized_level = nearest_level(actual_level);
    257e:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	0e 94 8b 0a 	call	0x1516	; 0x1516 <nearest_level>
    2588:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <memorized_level>
        set_level_and_therm_target(memorized_level);
    258c:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
        #ifdef USE_SUNSET_TIMER
        timer_orig_level = actual_level;
    2590:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    2594:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <timer_orig_level.2462>
        #endif
        return MISCHIEF_MANAGED;
    2598:	67 c0       	rjmp	.+206    	; 0x2668 <steady_state+0x4e4>
    }


    // 3H: momentary turbo (on lights with no tint ramping)
    else if (event == EV_click3_hold) {
    259a:	c3 3b       	cpi	r28, 0xB3	; 179
    259c:	c1 f4       	brne	.+48     	; 0x25ce <steady_state+0x44a>
        if (! arg) {  // first frame only, to allow thermal regulation to work
    259e:	01 2b       	or	r16, r17
    25a0:	09 f0       	breq	.+2      	; 0x25a4 <steady_state+0x420>
    25a2:	62 c0       	rjmp	.+196    	; 0x2668 <steady_state+0x4e4>
		    #ifdef USE_TINT_RAMPING
				prev_tint = tint;
    25a4:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    25a8:	80 93 57 01 	sts	0x0157, r24	; 0x800157 <prev_tint.2456>
				if(tint <= 127){tint = 254;}
    25ac:	88 23       	and	r24, r24
    25ae:	24 f0       	brlt	.+8      	; 0x25b8 <steady_state+0x434>
    25b0:	8e ef       	ldi	r24, 0xFE	; 254
    25b2:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <steady_state+0x43a>
				else {tint = 1;}
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
				set_level(actual_level);
    25be:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    25c2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
			#endif
            set_level_and_therm_target(turbo_level);
    25c6:	8f 2d       	mov	r24, r15
    25c8:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
    25cc:	4d c0       	rjmp	.+154    	; 0x2668 <steady_state+0x4e4>
        }
        return MISCHIEF_MANAGED;
    }
    else if (event == EV_click3_hold_release) {
    25ce:	c3 3e       	cpi	r28, 0xE3	; 227
    25d0:	69 f4       	brne	.+26     	; 0x25ec <steady_state+0x468>
		#ifdef USE_TINT_RAMPING
			tint = prev_tint;
    25d2:	80 91 57 01 	lds	r24, 0x0157	; 0x800157 <prev_tint.2456>
    25d6:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <tint>
			set_level(actual_level);
    25da:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    25de:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
		#endif
        set_level_and_therm_target(memorized_level);
    25e2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    25e6:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
        return MISCHIEF_MANAGED;
    25ea:	3e c0       	rjmp	.+124    	; 0x2668 <steady_state+0x4e4>
    }

    #ifdef USE_MOMENTARY_MODE
    // 6 clicks: shortcut to momentary mode
    else if (event == EV_6clicks) {
    25ec:	c6 3c       	cpi	r28, 0xC6	; 198
    25ee:	51 f4       	brne	.+20     	; 0x2604 <steady_state+0x480>
        set_level(0);
    25f0:	80 e0       	ldi	r24, 0x00	; 0
    25f2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        set_state(momentary_state, 0);
    25f6:	60 e0       	ldi	r22, 0x00	; 0
    25f8:	70 e0       	ldi	r23, 0x00	; 0
    25fa:	8a e6       	ldi	r24, 0x6A	; 106
    25fc:	95 e1       	ldi	r25, 0x15	; 21
    25fe:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    2602:	32 c0       	rjmp	.+100    	; 0x2668 <steady_state+0x4e4>
    }
    #endif

    #ifdef USE_RAMP_CONFIG
    // 7H: configure this ramp mode
    else if (event == EV_click7_hold) {
    2604:	c7 3b       	cpi	r28, 0xB7	; 183
    2606:	39 f4       	brne	.+14     	; 0x2616 <steady_state+0x492>
        push_state(ramp_config_state, 0);
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	84 e2       	ldi	r24, 0x24	; 36
    260e:	9c e0       	ldi	r25, 0x0C	; 12
    2610:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
        return MISCHIEF_MANAGED;
    2614:	29 c0       	rjmp	.+82     	; 0x2668 <steady_state+0x4e4>
    }
    #endif

    #ifdef USE_MANUAL_MEMORY
    else if (event == EV_10clicks) {
    2616:	ca 3c       	cpi	r28, 0xCA	; 202
    2618:	69 f4       	brne	.+26     	; 0x2634 <steady_state+0x4b0>
        // turn on manual memory and save current brightness
        manual_memory = actual_level;
    261a:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <actual_level>
    261e:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <manual_memory>
        #ifdef USE_TINT_RAMPING
        manual_memory_tint = tint;  // remember tint too
    2622:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <tint>
    2626:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <manual_memory_tint>
        #endif
        save_config();
    262a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        blink_once();
    262e:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>
        return MISCHIEF_MANAGED;
    2632:	1a c0       	rjmp	.+52     	; 0x2668 <steady_state+0x4e4>
    }
    else if (event == EV_click10_hold) {
    2634:	ca 3b       	cpi	r28, 0xBA	; 186
    2636:	b1 f4       	brne	.+44     	; 0x2664 <steady_state+0x4e0>
        #ifdef USE_RAMP_EXTRAS_CONFIG
        // let user configure a bunch of extra ramp options
        push_state(ramp_extras_config_state, 0);
    2638:	60 e0       	ldi	r22, 0x00	; 0
    263a:	70 e0       	ldi	r23, 0x00	; 0
    263c:	80 e3       	ldi	r24, 0x30	; 48
    263e:	9c e0       	ldi	r25, 0x0C	; 12
    2640:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
            manual_memory = 0;
            save_config();
            blink_once();
        }
        #endif
        return MISCHIEF_MANAGED;
    2644:	11 c0       	rjmp	.+34     	; 0x2668 <steady_state+0x4e4>
    // hold: change brightness (brighter, dimmer)
    // click, hold: change brightness (dimmer)
    else if ((event == EV_click1_hold) || (event == EV_click2_hold)) {
        // ramp slower in discrete mode
        if (ramp_style  &&  (arg % HOLD_TIMEOUT != 0)) {
            return MISCHIEF_MANAGED;
    2646:	b1 2c       	mov	r11, r1
    2648:	0f c0       	rjmp	.+30     	; 0x2668 <steady_state+0x4e4>
                gradual_tick();
                ticks_since_adjust = 0;
            }
        }
        #endif  // ifdef USE_SET_LEVEL_GRADUALLY
        return MISCHIEF_MANAGED;
    264a:	b1 2c       	mov	r11, r1
    264c:	0d c0       	rjmp	.+26     	; 0x2668 <steady_state+0x4e4>
    264e:	b1 2c       	mov	r11, r1
    2650:	0b c0       	rjmp	.+22     	; 0x2668 <steady_state+0x4e4>
            set_level_gradually(stepdown);
            #else
            set_level(stepdown);
            #endif
        }
        return MISCHIEF_MANAGED;
    2652:	b1 2c       	mov	r11, r1
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <steady_state+0x4e4>
            set_level_gradually(stepup);
            #else
            set_level(stepup);
            #endif
        }
        return MISCHIEF_MANAGED;
    2656:	b1 2c       	mov	r11, r1
    2658:	07 c0       	rjmp	.+14     	; 0x2668 <steady_state+0x4e4>
        // if we're still adjusting output...  stop after the current step
        if (gradual_target > actual_level)
            gradual_target = actual_level + 1;
        else if (gradual_target < actual_level)
            gradual_target = actual_level - 1;
        return MISCHIEF_MANAGED;
    265a:	b1 2c       	mov	r11, r1
    265c:	05 c0       	rjmp	.+10     	; 0x2668 <steady_state+0x4e4>
    #endif  // ifdef USE_THERMAL_REGULATION

    ////////// Every action below here is blocked in the simple UI //////////
    #ifdef USE_SIMPLE_UI
    if (simple_ui_active) {
        return EVENT_NOT_HANDLED;
    265e:	bb 24       	eor	r11, r11
    2660:	b3 94       	inc	r11
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <steady_state+0x4e4>
        #endif
        return MISCHIEF_MANAGED;
    }
    #endif  // ifdef USE_MANUAL_MEMORY

    return EVENT_NOT_HANDLED;
    2664:	bb 24       	eor	r11, r11
    2666:	b3 94       	inc	r11
}
    2668:	8b 2d       	mov	r24, r11
    266a:	df 91       	pop	r29
    266c:	cf 91       	pop	r28
    266e:	1f 91       	pop	r17
    2670:	0f 91       	pop	r16
    2672:	ff 90       	pop	r15
    2674:	ef 90       	pop	r14
    2676:	df 90       	pop	r13
    2678:	cf 90       	pop	r12
    267a:	bf 90       	pop	r11
    267c:	08 95       	ret

0000267e <factory_reset>:
#ifndef FACTORY_RESET_C
#define FACTORY_RESET_C

#include "factory-reset.h"

void factory_reset() {
    267e:	cf 93       	push	r28
    #define SPLODEY_STEPS 64
    #define SPLODEY_TIME_PER_STEP (SPLODEY_TIME/SPLODEY_STEPS)
    uint8_t bright;
    uint8_t reset = 1;
    // wind up to an explosion
    for (bright=0; bright<SPLODEY_STEPS; bright++) {
    2680:	c0 e0       	ldi	r28, 0x00	; 0
    2682:	14 c0       	rjmp	.+40     	; 0x26ac <factory_reset+0x2e>
        set_level(bright);
    2684:	8c 2f       	mov	r24, r28
    2686:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(SPLODEY_TIME_PER_STEP/2);
    268a:	83 e1       	ldi	r24, 0x13	; 19
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        set_level(bright>>1);
    2692:	8c 2f       	mov	r24, r28
    2694:	86 95       	lsr	r24
    2696:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(SPLODEY_TIME_PER_STEP/2);
    269a:	83 e1       	ldi	r24, 0x13	; 19
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        if (! button_is_pressed()) {
    26a2:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <button_is_pressed>
    26a6:	88 23       	and	r24, r24
    26a8:	29 f0       	breq	.+10     	; 0x26b4 <factory_reset+0x36>
    #define SPLODEY_STEPS 64
    #define SPLODEY_TIME_PER_STEP (SPLODEY_TIME/SPLODEY_STEPS)
    uint8_t bright;
    uint8_t reset = 1;
    // wind up to an explosion
    for (bright=0; bright<SPLODEY_STEPS; bright++) {
    26aa:	cf 5f       	subi	r28, 0xFF	; 255
    26ac:	c0 34       	cpi	r28, 0x40	; 64
    26ae:	50 f3       	brcs	.-44     	; 0x2684 <factory_reset+0x6>
    // so the user has time to abort if they want
    #define SPLODEY_TIME 2500
    #define SPLODEY_STEPS 64
    #define SPLODEY_TIME_PER_STEP (SPLODEY_TIME/SPLODEY_STEPS)
    uint8_t bright;
    uint8_t reset = 1;
    26b0:	81 e0       	ldi	r24, 0x01	; 1
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <factory_reset+0x38>
        set_level(bright);
        nice_delay_ms(SPLODEY_TIME_PER_STEP/2);
        set_level(bright>>1);
        nice_delay_ms(SPLODEY_TIME_PER_STEP/2);
        if (! button_is_pressed()) {
            reset = 0;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
            break;
        }
    }
    // explode, if button pressed long enough
    if (reset) {
    26b6:	88 23       	and	r24, r24
    26b8:	d9 f0       	breq	.+54     	; 0x26f0 <factory_reset+0x72>
        #if defined(USE_THERMAL_REGULATION) && defined(USE_THERM_AUTOCALIBRATE)
        // auto-calibrate temperature...  assume current temperature is 21 C
        thermal_config_save(1, 21);
    26ba:	65 e1       	ldi	r22, 0x15	; 21
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	0e 94 80 02 	call	0x500	; 0x500 <thermal_config_save>
        #endif
        // save all settings to eeprom
        // (assuming they're all at default because we haven't loaded them yet)
        save_config();
    26c2:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>

        bright = MAX_LEVEL;
    26c6:	c6 e9       	ldi	r28, 0x96	; 150
        for (; bright > 0; bright--) {
    26c8:	08 c0       	rjmp	.+16     	; 0x26da <factory_reset+0x5c>
            set_level(bright);
    26ca:	8c 2f       	mov	r24, r28
    26cc:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
            nice_delay_ms(SPLODEY_TIME_PER_STEP/8);
    26d0:	84 e0       	ldi	r24, 0x04	; 4
    26d2:	90 e0       	ldi	r25, 0x00	; 0
    26d4:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        // save all settings to eeprom
        // (assuming they're all at default because we haven't loaded them yet)
        save_config();

        bright = MAX_LEVEL;
        for (; bright > 0; bright--) {
    26d8:	c1 50       	subi	r28, 0x01	; 1
    26da:	c1 11       	cpse	r28, r1
    26dc:	f6 cf       	rjmp	.-20     	; 0x26ca <factory_reset+0x4c>
    26de:	0a c0       	rjmp	.+20     	; 0x26f4 <factory_reset+0x76>
        }
    }
    // explosion cancelled, fade away
    else {
        for (; bright > 0; bright--) {
            set_level(bright);
    26e0:	8c 2f       	mov	r24, r28
    26e2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
            nice_delay_ms(SPLODEY_TIME_PER_STEP/3);
    26e6:	8d e0       	ldi	r24, 0x0D	; 13
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
            nice_delay_ms(SPLODEY_TIME_PER_STEP/8);
        }
    }
    // explosion cancelled, fade away
    else {
        for (; bright > 0; bright--) {
    26ee:	c1 50       	subi	r28, 0x01	; 1
    26f0:	c1 11       	cpse	r28, r1
    26f2:	f6 cf       	rjmp	.-20     	; 0x26e0 <factory_reset+0x62>
            set_level(bright);
            nice_delay_ms(SPLODEY_TIME_PER_STEP/3);
        }
    }
}
    26f4:	cf 91       	pop	r28
    26f6:	08 95       	ret

000026f8 <candle_mode_state>:

#ifdef USE_SUNSET_TIMER
#include "sunset-timer.h"
#endif

uint8_t candle_mode_state(Event event, uint16_t arg) {
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	c8 2f       	mov	r28, r24
    2702:	8b 01       	movw	r16, r22

    #ifdef USE_SUNSET_TIMER
    // let the candle "burn out" and shut itself off
    // if the user told it to
    // cache this in case it changes when the timer is called
    uint8_t sunset_active = sunset_timer;
    2704:	d0 91 76 01 	lds	r29, 0x0176	; 0x800176 <sunset_timer>
    // clock tick
    sunset_timer_state(event, arg);
    2708:	0e 94 69 10 	call	0x20d2	; 0x20d2 <sunset_timer_state>
    // if the timer just expired, shut off
    if (sunset_active  &&  (! sunset_timer)) {
    270c:	dd 23       	and	r29, r29
    270e:	59 f0       	breq	.+22     	; 0x2726 <candle_mode_state+0x2e>
    2710:	d0 91 76 01 	lds	r29, 0x0176	; 0x800176 <sunset_timer>
    2714:	d1 11       	cpse	r29, r1
    2716:	07 c0       	rjmp	.+14     	; 0x2726 <candle_mode_state+0x2e>
        set_state(off_state, 0);
    2718:	60 e0       	ldi	r22, 0x00	; 0
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	86 e2       	ldi	r24, 0x26	; 38
    271e:	9d e0       	ldi	r25, 0x0D	; 13
    2720:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    2724:	05 c1       	rjmp	.+522    	; 0x2930 <candle_mode_state+0x238>
    }
    #endif  // ifdef USE_SUNSET_TIMER


    if (event == EV_enter_state) {
    2726:	c8 30       	cpi	r28, 0x08	; 8
    2728:	29 f4       	brne	.+10     	; 0x2734 <candle_mode_state+0x3c>
        ramp_direction = 1;
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>
        return MISCHIEF_MANAGED;
    2730:	d0 e0       	ldi	r29, 0x00	; 0
    2732:	fe c0       	rjmp	.+508    	; 0x2930 <candle_mode_state+0x238>
    }
    #ifdef USE_SUNSET_TIMER
    // 2 clicks: cancel timer
    else if (event == EV_2clicks) {
    2734:	c2 3c       	cpi	r28, 0xC2	; 194
    2736:	21 f4       	brne	.+8      	; 0x2740 <candle_mode_state+0x48>
        // parent state just rotated through strobe/flasher modes,
        // so cancel timer...  in case any time was left over from earlier
        sunset_timer = 0;
    2738:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <sunset_timer>
        return MISCHIEF_MANAGED;
    273c:	d0 e0       	ldi	r29, 0x00	; 0
    273e:	f8 c0       	rjmp	.+496    	; 0x2930 <candle_mode_state+0x238>
    }
    #endif  // ifdef USE_SUNSET_TIMER
    // hold: change brightness (brighter)
    else if (event == EV_click1_hold) {
    2740:	c1 3b       	cpi	r28, 0xB1	; 177
    2742:	21 f5       	brne	.+72     	; 0x278c <candle_mode_state+0x94>
        // ramp away from extremes
        if (! arg) {
    2744:	01 2b       	or	r16, r17
    2746:	69 f4       	brne	.+26     	; 0x2762 <candle_mode_state+0x6a>
            if (candle_mode_brightness >= MAX_CANDLE_LEVEL) { ramp_direction = -1; }
    2748:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <candle_mode_brightness.2735>
    274c:	8f 35       	cpi	r24, 0x5F	; 95
    274e:	20 f0       	brcs	.+8      	; 0x2758 <candle_mode_state+0x60>
    2750:	8f ef       	ldi	r24, 0xFF	; 255
    2752:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>
    2756:	05 c0       	rjmp	.+10     	; 0x2762 <candle_mode_state+0x6a>
            else if (candle_mode_brightness <= 1) { ramp_direction = 1; }
    2758:	82 30       	cpi	r24, 0x02	; 2
    275a:	18 f4       	brcc	.+6      	; 0x2762 <candle_mode_state+0x6a>
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>
        }
        // change brightness, but not too far
        candle_mode_brightness += ramp_direction;
    2762:	d0 91 02 01 	lds	r29, 0x0102	; 0x800102 <candle_mode_brightness.2735>
    2766:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ramp_direction.2727>
    276a:	d8 0f       	add	r29, r24
    276c:	d0 93 02 01 	sts	0x0102, r29	; 0x800102 <candle_mode_brightness.2735>
        if (candle_mode_brightness < 1) candle_mode_brightness = 1;
    2770:	d1 11       	cpse	r29, r1
    2772:	04 c0       	rjmp	.+8      	; 0x277c <candle_mode_state+0x84>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <candle_mode_brightness.2735>
    277a:	da c0       	rjmp	.+436    	; 0x2930 <candle_mode_state+0x238>
        else if (candle_mode_brightness > MAX_CANDLE_LEVEL) candle_mode_brightness = MAX_CANDLE_LEVEL;
    277c:	d0 36       	cpi	r29, 0x60	; 96
    277e:	08 f4       	brcc	.+2      	; 0x2782 <candle_mode_state+0x8a>
    2780:	d0 c0       	rjmp	.+416    	; 0x2922 <candle_mode_state+0x22a>
    2782:	8f e5       	ldi	r24, 0x5F	; 95
    2784:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <candle_mode_brightness.2735>
        return MISCHIEF_MANAGED;
    2788:	d0 e0       	ldi	r29, 0x00	; 0
    278a:	d2 c0       	rjmp	.+420    	; 0x2930 <candle_mode_state+0x238>
    }
    // reverse ramp direction on hold release
    else if (event == EV_click1_hold_release) {
    278c:	c1 3e       	cpi	r28, 0xE1	; 225
    278e:	39 f4       	brne	.+14     	; 0x279e <candle_mode_state+0xa6>
        ramp_direction = -ramp_direction;
    2790:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <ramp_direction.2727>
    2794:	81 95       	neg	r24
    2796:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>
        return MISCHIEF_MANAGED;
    279a:	d0 e0       	ldi	r29, 0x00	; 0
    279c:	c9 c0       	rjmp	.+402    	; 0x2930 <candle_mode_state+0x238>
    }
    // click, hold: change brightness (dimmer)
    else if (event == EV_click2_hold) {
    279e:	c2 3b       	cpi	r28, 0xB2	; 178
    27a0:	69 f4       	brne	.+26     	; 0x27bc <candle_mode_state+0xc4>
        ramp_direction = 1;
    27a2:	81 e0       	ldi	r24, 0x01	; 1
    27a4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>
        if (candle_mode_brightness > 1)
    27a8:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <candle_mode_brightness.2735>
    27ac:	82 30       	cpi	r24, 0x02	; 2
    27ae:	08 f4       	brcc	.+2      	; 0x27b2 <candle_mode_state+0xba>
    27b0:	ba c0       	rjmp	.+372    	; 0x2926 <candle_mode_state+0x22e>
            candle_mode_brightness --;
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <candle_mode_brightness.2735>
        return MISCHIEF_MANAGED;
    27b8:	d0 e0       	ldi	r29, 0x00	; 0
    27ba:	ba c0       	rjmp	.+372    	; 0x2930 <candle_mode_state+0x238>
    }
    // clock tick: animate candle brightness
    else if (event == EV_tick) {
    27bc:	c1 30       	cpi	r28, 0x01	; 1
    27be:	09 f0       	breq	.+2      	; 0x27c2 <candle_mode_state+0xca>
    27c0:	b4 c0       	rjmp	.+360    	; 0x292a <candle_mode_state+0x232>
        // un-reverse after 1 second
        if (arg == AUTO_REVERSE_TIME) ramp_direction = 1;
    27c2:	09 32       	cpi	r16, 0x29	; 41
    27c4:	11 05       	cpc	r17, r1
    27c6:	19 f4       	brne	.+6      	; 0x27ce <candle_mode_state+0xd6>
    27c8:	81 e0       	ldi	r24, 0x01	; 1
    27ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <ramp_direction.2727>

        // 3-oscillator synth for a relatively organic pattern
        uint8_t add;
        add = ((triangle_wave(candle_wave1) * candle_wave1_depth) >> 8)
    27ce:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <candle_wave1.2728>
    27d2:	0e 94 df 09 	call	0x13be	; 0x13be <triangle_wave>
    27d6:	90 e0       	ldi	r25, 0x00	; 0
    27d8:	ec 01       	movw	r28, r24
    27da:	cc 0f       	add	r28, r28
    27dc:	dd 1f       	adc	r29, r29
    27de:	8c 0f       	add	r24, r28
    27e0:	9d 1f       	adc	r25, r29
    27e2:	ec 01       	movw	r28, r24
    27e4:	cc 0f       	add	r28, r28
    27e6:	dd 1f       	adc	r29, r29
    27e8:	cc 0f       	add	r28, r28
    27ea:	dd 1f       	adc	r29, r29
            + ((triangle_wave(candle_wave2) * candle_wave2_depth) >> 8)
    27ec:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <candle_wave2.2729>
    27f0:	0e 94 df 09 	call	0x13be	; 0x13be <triangle_wave>
    27f4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <candle_wave2_depth.2733>
    27f8:	68 2f       	mov	r22, r24
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	89 2f       	mov	r24, r25
    27fe:	90 e0       	ldi	r25, 0x00	; 0
    2800:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
        // un-reverse after 1 second
        if (arg == AUTO_REVERSE_TIME) ramp_direction = 1;

        // 3-oscillator synth for a relatively organic pattern
        uint8_t add;
        add = ((triangle_wave(candle_wave1) * candle_wave1_depth) >> 8)
    2804:	cd 2f       	mov	r28, r29
    2806:	c9 0f       	add	r28, r25
            + ((triangle_wave(candle_wave2) * candle_wave2_depth) >> 8)
            + ((triangle_wave(candle_wave3) * candle_wave3_depth) >> 8);
    2808:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <candle_wave3.2730>
    280c:	0e 94 df 09 	call	0x13be	; 0x13be <triangle_wave>
    2810:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2814:	68 2f       	mov	r22, r24
    2816:	70 e0       	ldi	r23, 0x00	; 0
    2818:	89 2f       	mov	r24, r25
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
        // un-reverse after 1 second
        if (arg == AUTO_REVERSE_TIME) ramp_direction = 1;

        // 3-oscillator synth for a relatively organic pattern
        uint8_t add;
        add = ((triangle_wave(candle_wave1) * candle_wave1_depth) >> 8)
    2820:	9c 0f       	add	r25, r28
            + ((triangle_wave(candle_wave2) * candle_wave2_depth) >> 8)
            + ((triangle_wave(candle_wave3) * candle_wave3_depth) >> 8);
        uint16_t brightness = candle_mode_brightness + add;
    2822:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <candle_mode_brightness.2735>
    2826:	29 2f       	mov	r18, r25
    2828:	30 e0       	ldi	r19, 0x00	; 0
    282a:	28 0f       	add	r18, r24
    282c:	31 1d       	adc	r19, r1
    282e:	82 2f       	mov	r24, r18

        // self-timer dims the light during the final minute
        #ifdef USE_SUNSET_TIMER
        if (1 == sunset_timer) {
    2830:	90 91 76 01 	lds	r25, 0x0176	; 0x800176 <sunset_timer>
    2834:	91 30       	cpi	r25, 0x01	; 1
    2836:	c9 f4       	brne	.+50     	; 0x286a <candle_mode_state+0x172>
            brightness = brightness
                         * ((TICKS_PER_MINUTE>>5) - (sunset_ticks>>5))
    2838:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <sunset_ticks>
    283c:	90 91 74 01 	lds	r25, 0x0174	; 0x800174 <sunset_ticks+0x1>
    2840:	96 95       	lsr	r25
    2842:	87 95       	ror	r24
    2844:	92 95       	swap	r25
    2846:	82 95       	swap	r24
    2848:	8f 70       	andi	r24, 0x0F	; 15
    284a:	89 27       	eor	r24, r25
    284c:	9f 70       	andi	r25, 0x0F	; 15
    284e:	89 27       	eor	r24, r25
    2850:	e4 e7       	ldi	r30, 0x74	; 116
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	bf 01       	movw	r22, r30
    2856:	68 1b       	sub	r22, r24
    2858:	79 0b       	sbc	r23, r25
    285a:	82 2f       	mov	r24, r18
    285c:	93 2f       	mov	r25, r19
    285e:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__mulhi3>
        uint16_t brightness = candle_mode_brightness + add;

        // self-timer dims the light during the final minute
        #ifdef USE_SUNSET_TIMER
        if (1 == sunset_timer) {
            brightness = brightness
    2862:	bf 01       	movw	r22, r30
    2864:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    2868:	86 2f       	mov	r24, r22
                         * ((TICKS_PER_MINUTE>>5) - (sunset_ticks>>5))
                         / (TICKS_PER_MINUTE>>5);
        }
        #endif  // ifdef USE_SUNSET_TIMER

        set_level(brightness);
    286a:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>

        // wave1: slow random LFO
        // TODO: make wave slower and more erratic?
        if ((arg & 1) == 0) candle_wave1 += pseudo_rand() & 1;
    286e:	00 fd       	sbrc	r16, 0
    2870:	08 c0       	rjmp	.+16     	; 0x2882 <candle_mode_state+0x18a>
    2872:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2876:	81 70       	andi	r24, 0x01	; 1
    2878:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <candle_wave1.2728>
    287c:	89 0f       	add	r24, r25
    287e:	80 93 4f 01 	sts	0x014F, r24	; 0x80014f <candle_wave1.2728>
        // wave2: medium-speed erratic LFO
        candle_wave2 += candle_wave2_speed;
    2882:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <candle_wave2.2729>
    2886:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
    288a:	89 0f       	add	r24, r25
    288c:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <candle_wave2.2729>
        // wave3: erratic fast wave
        candle_wave3 += pseudo_rand() % 37;
    2890:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2894:	65 e2       	ldi	r22, 0x25	; 37
    2896:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    289a:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <candle_wave3.2730>
    289e:	98 0f       	add	r25, r24
    28a0:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <candle_wave3.2730>
        // S&H on wave2 frequency to make it more erratic
        if ((pseudo_rand() & 0b00111111) == 0)
    28a4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28a8:	8f 73       	andi	r24, 0x3F	; 63
    28aa:	39 f4       	brne	.+14     	; 0x28ba <candle_mode_state+0x1c2>
            candle_wave2_speed = pseudo_rand() % 13;
    28ac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28b0:	6d e0       	ldi	r22, 0x0D	; 13
    28b2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    28b6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__data_end>
        // downward sawtooth on wave2 depth to simulate stabilizing
        if ((candle_wave2_depth > 0) && ((pseudo_rand() & 0b00111111) == 0))
    28ba:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <candle_wave2_depth.2733>
    28be:	88 23       	and	r24, r24
    28c0:	49 f0       	breq	.+18     	; 0x28d4 <candle_mode_state+0x1dc>
    28c2:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28c6:	8f 73       	andi	r24, 0x3F	; 63
    28c8:	29 f4       	brne	.+10     	; 0x28d4 <candle_mode_state+0x1dc>
            candle_wave2_depth --;
    28ca:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <candle_wave2_depth.2733>
    28ce:	81 50       	subi	r24, 0x01	; 1
    28d0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <candle_wave2_depth.2733>
        // random sawtooth retrigger
        if (pseudo_rand() == 0) {
    28d4:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28d8:	81 11       	cpse	r24, r1
    28da:	09 c0       	rjmp	.+18     	; 0x28ee <candle_mode_state+0x1f6>
            // random amplitude
            //candle_wave2_depth = 2 + (pseudo_rand() % ((CANDLE_WAVE2_MAXDEPTH * CANDLE_AMPLITUDE / 100) - 2));
            candle_wave2_depth = pseudo_rand() % (CANDLE_WAVE2_MAXDEPTH * CANDLE_AMPLITUDE / 100);
    28dc:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28e0:	62 e1       	ldi	r22, 0x12	; 18
    28e2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    28e6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <candle_wave2_depth.2733>
            //candle_wave3_depth = 5;
            candle_wave2 = 0;
    28ea:	10 92 4e 01 	sts	0x014E, r1	; 0x80014e <candle_wave2.2729>
        }
        // downward sawtooth on wave3 depth to simulate stabilizing
        if ((candle_wave3_depth > 2) && ((pseudo_rand() & 0b00011111) == 0))
    28ee:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    28f2:	83 30       	cpi	r24, 0x03	; 3
    28f4:	48 f0       	brcs	.+18     	; 0x2908 <candle_mode_state+0x210>
    28f6:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    28fa:	8f 71       	andi	r24, 0x1F	; 31
    28fc:	29 f4       	brne	.+10     	; 0x2908 <candle_mode_state+0x210>
            candle_wave3_depth --;
    28fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2902:	81 50       	subi	r24, 0x01	; 1
    2904:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
        if ((pseudo_rand() & 0b01111111) == 0)
    2908:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    290c:	d8 2f       	mov	r29, r24
    290e:	df 77       	andi	r29, 0x7F	; 127
    2910:	71 f4       	brne	.+28     	; 0x292e <candle_mode_state+0x236>
            // random amplitude
            //candle_wave3_depth = 2 + (pseudo_rand() % ((CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100) - 2));
            candle_wave3_depth = pseudo_rand() % (CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100);
    2912:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2916:	6a e0       	ldi	r22, 0x0A	; 10
    2918:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    291c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__DATA_REGION_ORIGIN__>
    2920:	07 c0       	rjmp	.+14     	; 0x2930 <candle_mode_state+0x238>
        }
        // change brightness, but not too far
        candle_mode_brightness += ramp_direction;
        if (candle_mode_brightness < 1) candle_mode_brightness = 1;
        else if (candle_mode_brightness > MAX_CANDLE_LEVEL) candle_mode_brightness = MAX_CANDLE_LEVEL;
        return MISCHIEF_MANAGED;
    2922:	d0 e0       	ldi	r29, 0x00	; 0
    2924:	05 c0       	rjmp	.+10     	; 0x2930 <candle_mode_state+0x238>
    // click, hold: change brightness (dimmer)
    else if (event == EV_click2_hold) {
        ramp_direction = 1;
        if (candle_mode_brightness > 1)
            candle_mode_brightness --;
        return MISCHIEF_MANAGED;
    2926:	d0 e0       	ldi	r29, 0x00	; 0
    2928:	03 c0       	rjmp	.+6      	; 0x2930 <candle_mode_state+0x238>
            // random amplitude
            //candle_wave3_depth = 2 + (pseudo_rand() % ((CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100) - 2));
            candle_wave3_depth = pseudo_rand() % (CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100);
        return MISCHIEF_MANAGED;
    }
    return EVENT_NOT_HANDLED;
    292a:	d1 e0       	ldi	r29, 0x01	; 1
    292c:	01 c0       	rjmp	.+2      	; 0x2930 <candle_mode_state+0x238>
            candle_wave3_depth --;
        if ((pseudo_rand() & 0b01111111) == 0)
            // random amplitude
            //candle_wave3_depth = 2 + (pseudo_rand() % ((CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100) - 2));
            candle_wave3_depth = pseudo_rand() % (CANDLE_WAVE3_MAXDEPTH * CANDLE_AMPLITUDE / 100);
        return MISCHIEF_MANAGED;
    292e:	d0 e0       	ldi	r29, 0x00	; 0
    }
    return EVENT_NOT_HANDLED;
}
    2930:	8d 2f       	mov	r24, r29
    2932:	df 91       	pop	r29
    2934:	cf 91       	pop	r28
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	08 95       	ret

0000293c <strobe_state>:
#define STROBE_MODES_C

#include "strobe-modes.h"

#ifdef USE_STROBE_STATE
uint8_t strobe_state(Event event, uint16_t arg) {
    293c:	0f 93       	push	r16
    293e:	1f 93       	push	r17
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	c8 2f       	mov	r28, r24
    2946:	8b 01       	movw	r16, r22
    static int8_t ramp_direction = 1;

    // 'st' reduces ROM size slightly
    strobe_mode_te st = strobe_type;
    2948:	d0 91 0c 01 	lds	r29, 0x010C	; 0x80010c <strobe_type>

    #ifdef USE_MOMENTARY_MODE
    momentary_mode = 1;  // 0 = ramping, 1 = strobes
    294c:	81 e0       	ldi	r24, 0x01	; 1
    294e:	80 93 71 01 	sts	0x0171, r24	; 0x800171 <momentary_mode>
    #endif

    #ifdef USE_CANDLE_MODE
    // pass all events to candle mode, when it's active
    // (the code is in its own pseudo-state to keep things cleaner)
    if (st == candle_mode_e) {
    2952:	d3 30       	cpi	r29, 0x03	; 3
    2954:	19 f4       	brne	.+6      	; 0x295c <strobe_state+0x20>
        candle_mode_state(event, arg);
    2956:	8c 2f       	mov	r24, r28
    2958:	0e 94 7c 13 	call	0x26f8	; 0x26f8 <candle_mode_state>
    }
    #endif

    if (0) {}  // placeholder
    // init anything which needs to be initialized
    else if (event == EV_enter_state) {
    295c:	c8 30       	cpi	r28, 0x08	; 8
    295e:	29 f4       	brne	.+10     	; 0x296a <strobe_state+0x2e>
        ramp_direction = 1;
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ramp_direction.2693>
        return MISCHIEF_MANAGED;
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	b0 c0       	rjmp	.+352    	; 0x2aca <strobe_state+0x18e>
    }
    // 1 click: off
    else if (event == EV_1click) {
    296a:	c1 3c       	cpi	r28, 0xC1	; 193
    296c:	41 f4       	brne	.+16     	; 0x297e <strobe_state+0x42>
        set_state(off_state, 0);
    296e:	60 e0       	ldi	r22, 0x00	; 0
    2970:	70 e0       	ldi	r23, 0x00	; 0
    2972:	86 e2       	ldi	r24, 0x26	; 38
    2974:	9d e0       	ldi	r25, 0x0D	; 13
    2976:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        return MISCHIEF_MANAGED;
    297a:	80 e0       	ldi	r24, 0x00	; 0
    297c:	a6 c0       	rjmp	.+332    	; 0x2aca <strobe_state+0x18e>
    }
    // 2 clicks: rotate through strobe/flasher modes
    else if (event == EV_2clicks) {
    297e:	c2 3c       	cpi	r28, 0xC2	; 194
    2980:	69 f4       	brne	.+26     	; 0x299c <strobe_state+0x60>
        strobe_type = (st + 1) % NUM_STROBES;
    2982:	8d 2f       	mov	r24, r29
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	01 96       	adiw	r24, 0x01	; 1
    2988:	65 e0       	ldi	r22, 0x05	; 5
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    2990:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <strobe_type>
        save_config();
    2994:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    2998:	80 e0       	ldi	r24, 0x00	; 0
    299a:	97 c0       	rjmp	.+302    	; 0x2aca <strobe_state+0x18e>
    }
    // hold: change speed (go faster)
    //       or change brightness (brighter)
    else if (event == EV_click1_hold) {
    299c:	c1 3b       	cpi	r28, 0xB1	; 177
    299e:	b1 f5       	brne	.+108    	; 0x2a0c <strobe_state+0xd0>
        if (0) {}  // placeholder

        // party / tactical strobe faster
        #if defined(USE_PARTY_STROBE_MODE) || defined(USE_TACTICAL_STROBE_MODE)
        #ifdef USE_TACTICAL_STROBE_MODE
        else if (st <= tactical_strobe_e) {
    29a0:	d2 30       	cpi	r29, 0x02	; 2
    29a2:	c8 f4       	brcc	.+50     	; 0x29d6 <strobe_state+0x9a>
        #else
        else if (st == party_strobe_e) {
        #endif
            if ((arg & 1) == 0) {
    29a4:	00 fd       	sbrc	r16, 0
    29a6:	86 c0       	rjmp	.+268    	; 0x2ab4 <strobe_state+0x178>
                uint8_t d = strobe_delays[st];
    29a8:	8d 2f       	mov	r24, r29
    29aa:	90 e0       	ldi	r25, 0x00	; 0
    29ac:	fc 01       	movw	r30, r24
    29ae:	e6 5f       	subi	r30, 0xF6	; 246
    29b0:	fe 4f       	sbci	r31, 0xFE	; 254
    29b2:	20 81       	ld	r18, Z
                d -= ramp_direction;
    29b4:	30 91 04 01 	lds	r19, 0x0104	; 0x800104 <ramp_direction.2693>
    29b8:	23 1b       	sub	r18, r19
                if (d < 8) d = 8;
    29ba:	28 30       	cpi	r18, 0x08	; 8
    29bc:	18 f0       	brcs	.+6      	; 0x29c4 <strobe_state+0x88>
                else if (d > 254) d = 254;
    29be:	2f 3f       	cpi	r18, 0xFF	; 255
    29c0:	21 f4       	brne	.+8      	; 0x29ca <strobe_state+0x8e>
    29c2:	02 c0       	rjmp	.+4      	; 0x29c8 <strobe_state+0x8c>
        else if (st == party_strobe_e) {
        #endif
            if ((arg & 1) == 0) {
                uint8_t d = strobe_delays[st];
                d -= ramp_direction;
                if (d < 8) d = 8;
    29c4:	28 e0       	ldi	r18, 0x08	; 8
    29c6:	01 c0       	rjmp	.+2      	; 0x29ca <strobe_state+0x8e>
                else if (d > 254) d = 254;
    29c8:	2e ef       	ldi	r18, 0xFE	; 254
                strobe_delays[st] = d;
    29ca:	fc 01       	movw	r30, r24
    29cc:	e6 5f       	subi	r30, 0xF6	; 246
    29ce:	fe 4f       	sbci	r31, 0xFE	; 254
    29d0:	20 83       	st	Z, r18
            else if (bike_flasher_brightness > MAX_BIKING_LEVEL) bike_flasher_brightness = MAX_BIKING_LEVEL;
            set_level(bike_flasher_brightness);
        }
        #endif

        return MISCHIEF_MANAGED;
    29d2:	80 e0       	ldi	r24, 0x00	; 0
    29d4:	7a c0       	rjmp	.+244    	; 0x2aca <strobe_state+0x18e>
        // lightning has no adjustments
        //else if (st == lightning_storm_e) {}

        // biking mode brighter
        #ifdef USE_BIKE_FLASHER_MODE
        else if (st == bike_flasher_e) {
    29d6:	d4 30       	cpi	r29, 0x04	; 4
    29d8:	09 f0       	breq	.+2      	; 0x29dc <strobe_state+0xa0>
    29da:	6e c0       	rjmp	.+220    	; 0x2ab8 <strobe_state+0x17c>
            bike_flasher_brightness += ramp_direction;
    29dc:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <bike_flasher_brightness>
    29e0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ramp_direction.2693>
    29e4:	89 0f       	add	r24, r25
    29e6:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bike_flasher_brightness>
            if (bike_flasher_brightness < 2) bike_flasher_brightness = 2;
    29ea:	82 30       	cpi	r24, 0x02	; 2
    29ec:	20 f4       	brcc	.+8      	; 0x29f6 <strobe_state+0xba>
    29ee:	82 e0       	ldi	r24, 0x02	; 2
    29f0:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bike_flasher_brightness>
    29f4:	05 c0       	rjmp	.+10     	; 0x2a00 <strobe_state+0xc4>
            else if (bike_flasher_brightness > MAX_BIKING_LEVEL) bike_flasher_brightness = MAX_BIKING_LEVEL;
    29f6:	89 37       	cpi	r24, 0x79	; 121
    29f8:	18 f0       	brcs	.+6      	; 0x2a00 <strobe_state+0xc4>
    29fa:	88 e7       	ldi	r24, 0x78	; 120
    29fc:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bike_flasher_brightness>
            set_level(bike_flasher_brightness);
    2a00:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bike_flasher_brightness>
    2a04:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        }
        #endif

        return MISCHIEF_MANAGED;
    2a08:	80 e0       	ldi	r24, 0x00	; 0
    2a0a:	5f c0       	rjmp	.+190    	; 0x2aca <strobe_state+0x18e>
    }
    // reverse ramp direction on hold release
    // ... and save new strobe settings
    else if (event == EV_click1_hold_release) {
    2a0c:	c1 3e       	cpi	r28, 0xE1	; 225
    2a0e:	49 f4       	brne	.+18     	; 0x2a22 <strobe_state+0xe6>
        ramp_direction = -ramp_direction;
    2a10:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <ramp_direction.2693>
    2a14:	81 95       	neg	r24
    2a16:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ramp_direction.2693>
        save_config();
    2a1a:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	54 c0       	rjmp	.+168    	; 0x2aca <strobe_state+0x18e>
    }
    // click, hold: change speed (go slower)
    //       or change brightness (dimmer)
    else if (event == EV_click2_hold) {
    2a22:	c2 3b       	cpi	r28, 0xB2	; 178
    2a24:	29 f5       	brne	.+74     	; 0x2a70 <strobe_state+0x134>
        ramp_direction = 1;
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ramp_direction.2693>
        if (0) {}  // placeholder

        // party / tactical strobe slower
        #if defined(USE_PARTY_STROBE_MODE) || defined(USE_TACTICAL_STROBE_MODE)
        #ifdef USE_TACTICAL_STROBE_MODE
        else if (st <= tactical_strobe_e) {
    2a2c:	d2 30       	cpi	r29, 0x02	; 2
    2a2e:	88 f4       	brcc	.+34     	; 0x2a52 <strobe_state+0x116>
        #else
        else if (st == party_strobe_e) {
        #endif
            if ((arg & 1) == 0) {
    2a30:	00 fd       	sbrc	r16, 0
    2a32:	44 c0       	rjmp	.+136    	; 0x2abc <strobe_state+0x180>
                if (strobe_delays[st] < 255) strobe_delays[st] ++;
    2a34:	8d 2f       	mov	r24, r29
    2a36:	90 e0       	ldi	r25, 0x00	; 0
    2a38:	fc 01       	movw	r30, r24
    2a3a:	e6 5f       	subi	r30, 0xF6	; 246
    2a3c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a3e:	20 81       	ld	r18, Z
    2a40:	2f 3f       	cpi	r18, 0xFF	; 255
    2a42:	f1 f1       	breq	.+124    	; 0x2ac0 <strobe_state+0x184>
    2a44:	fc 01       	movw	r30, r24
    2a46:	e6 5f       	subi	r30, 0xF6	; 246
    2a48:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4a:	2f 5f       	subi	r18, 0xFF	; 255
    2a4c:	20 83       	st	Z, r18
                bike_flasher_brightness --;
            set_level(bike_flasher_brightness);
        }
        #endif

        return MISCHIEF_MANAGED;
    2a4e:	80 e0       	ldi	r24, 0x00	; 0
    2a50:	3c c0       	rjmp	.+120    	; 0x2aca <strobe_state+0x18e>
        // lightning has no adjustments
        //else if (st == lightning_storm_e) {}

        // biking mode dimmer
        #ifdef USE_BIKE_FLASHER_MODE
        else if (st == bike_flasher_e) {
    2a52:	d4 30       	cpi	r29, 0x04	; 4
    2a54:	b9 f5       	brne	.+110    	; 0x2ac4 <strobe_state+0x188>
            if (bike_flasher_brightness > 2)
    2a56:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bike_flasher_brightness>
    2a5a:	83 30       	cpi	r24, 0x03	; 3
    2a5c:	18 f0       	brcs	.+6      	; 0x2a64 <strobe_state+0x128>
                bike_flasher_brightness --;
    2a5e:	81 50       	subi	r24, 0x01	; 1
    2a60:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <bike_flasher_brightness>
            set_level(bike_flasher_brightness);
    2a64:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bike_flasher_brightness>
    2a68:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        }
        #endif

        return MISCHIEF_MANAGED;
    2a6c:	80 e0       	ldi	r24, 0x00	; 0
    2a6e:	2d c0       	rjmp	.+90     	; 0x2aca <strobe_state+0x18e>
    }
    // release hold: save new strobe settings
    else if (event == EV_click2_hold_release) {
    2a70:	c2 3e       	cpi	r28, 0xE2	; 226
    2a72:	21 f4       	brne	.+8      	; 0x2a7c <strobe_state+0x140>
        save_config();
    2a74:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <save_config>
        return MISCHIEF_MANAGED;
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	27 c0       	rjmp	.+78     	; 0x2aca <strobe_state+0x18e>
    }
    #ifdef USE_MOMENTARY_MODE
    // 5 clicks: go to momentary mode (momentary strobe)
    else if (event == EV_5clicks) {
    2a7c:	c5 3c       	cpi	r28, 0xC5	; 197
    2a7e:	59 f4       	brne	.+22     	; 0x2a96 <strobe_state+0x15a>
        set_state(momentary_state, 0);
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	8a e6       	ldi	r24, 0x6A	; 106
    2a86:	95 e1       	ldi	r25, 0x15	; 21
    2a88:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
        set_level(0);
    2a8c:	80 e0       	ldi	r24, 0x00	; 0
    2a8e:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        return MISCHIEF_MANAGED;
    2a92:	80 e0       	ldi	r24, 0x00	; 0
    2a94:	1a c0       	rjmp	.+52     	; 0x2aca <strobe_state+0x18e>
    }
    #endif
    #if defined(USE_LIGHTNING_MODE) || defined(USE_CANDLE_MODE)
    // clock tick: bump the random seed
    else if (event == EV_tick) {
    2a96:	c1 30       	cpi	r28, 0x01	; 1
    2a98:	b9 f4       	brne	.+46     	; 0x2ac8 <strobe_state+0x18c>
        // un-reverse after 1 second
        if (arg == AUTO_REVERSE_TIME) ramp_direction = 1;
    2a9a:	09 32       	cpi	r16, 0x29	; 41
    2a9c:	11 05       	cpc	r17, r1
    2a9e:	19 f4       	brne	.+6      	; 0x2aa6 <strobe_state+0x16a>
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <ramp_direction.2693>

        pseudo_rand_seed += arg;
    2aa6:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <pseudo_rand_seed>
    2aaa:	08 0f       	add	r16, r24
    2aac:	00 93 7f 01 	sts	0x017F, r16	; 0x80017f <pseudo_rand_seed>
        return MISCHIEF_MANAGED;
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	0b c0       	rjmp	.+22     	; 0x2aca <strobe_state+0x18e>
            else if (bike_flasher_brightness > MAX_BIKING_LEVEL) bike_flasher_brightness = MAX_BIKING_LEVEL;
            set_level(bike_flasher_brightness);
        }
        #endif

        return MISCHIEF_MANAGED;
    2ab4:	80 e0       	ldi	r24, 0x00	; 0
    2ab6:	09 c0       	rjmp	.+18     	; 0x2aca <strobe_state+0x18e>
    2ab8:	80 e0       	ldi	r24, 0x00	; 0
    2aba:	07 c0       	rjmp	.+14     	; 0x2aca <strobe_state+0x18e>
                bike_flasher_brightness --;
            set_level(bike_flasher_brightness);
        }
        #endif

        return MISCHIEF_MANAGED;
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	05 c0       	rjmp	.+10     	; 0x2aca <strobe_state+0x18e>
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	03 c0       	rjmp	.+6      	; 0x2aca <strobe_state+0x18e>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	01 c0       	rjmp	.+2      	; 0x2aca <strobe_state+0x18e>

        pseudo_rand_seed += arg;
        return MISCHIEF_MANAGED;
    }
    #endif
    return EVENT_NOT_HANDLED;
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
}
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	08 95       	ret

00002ad4 <momentary_state>:
#ifndef MOMENTARY_MODE_C
#define MOMENTARY_MODE_C

#include "momentary-mode.h"

uint8_t momentary_state(Event event, uint16_t arg) {
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	c8 2f       	mov	r28, r24
    2ade:	8b 01       	movw	r16, r22
    // init strobe mode, if relevant
    #ifdef USE_STROBE_STATE
    if ((event == EV_enter_state) && (momentary_mode == 1)) {
    2ae0:	88 30       	cpi	r24, 0x08	; 8
    2ae2:	39 f4       	brne	.+14     	; 0x2af2 <momentary_state+0x1e>
    2ae4:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <momentary_mode>
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	19 f4       	brne	.+6      	; 0x2af2 <momentary_state+0x1e>
        strobe_state(event, arg);
    2aec:	8c 2f       	mov	r24, r28
    2aee:	0e 94 9e 14 	call	0x293c	; 0x293c <strobe_state>
    2af2:	8c 2f       	mov	r24, r28
    2af4:	80 79       	andi	r24, 0x90	; 144
    }
    #endif

    // light up when the button is pressed; go dark otherwise
    // button is being held
    if ((event & (B_CLICK | B_PRESS)) == (B_CLICK | B_PRESS)) {
    2af6:	80 39       	cpi	r24, 0x90	; 144
    2af8:	61 f4       	brne	.+24     	; 0x2b12 <momentary_state+0x3e>
        momentary_active = 1;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <momentary_active>
        // 0 = ramping, 1 = strobes
        if (momentary_mode == 0) {
    2b00:	d0 91 71 01 	lds	r29, 0x0171	; 0x800171 <momentary_mode>
    2b04:	d1 11       	cpse	r29, r1
    2b06:	29 c0       	rjmp	.+82     	; 0x2b5a <momentary_state+0x86>
            set_level(memorized_level);
    2b08:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    2b0c:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    2b10:	29 c0       	rjmp	.+82     	; 0x2b64 <momentary_state+0x90>
        }
        return MISCHIEF_MANAGED;
    }
    // button was released
    else if ((event & (B_CLICK | B_PRESS)) == (B_CLICK)) {
    2b12:	80 38       	cpi	r24, 0x80	; 128
    2b14:	39 f4       	brne	.+14     	; 0x2b24 <momentary_state+0x50>
        momentary_active = 0;
    2b16:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <momentary_active>
        set_level(0);
    2b1a:	80 e0       	ldi	r24, 0x00	; 0
    2b1c:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        //go_to_standby = 1;  // sleep while light is off
        return MISCHIEF_MANAGED;
    2b20:	d0 e0       	ldi	r29, 0x00	; 0
    2b22:	20 c0       	rjmp	.+64     	; 0x2b64 <momentary_state+0x90>
    // Sleep, dammit!  (but wait a few seconds first)
    // (because standby mode uses such little power that it can interfere
    //  with exiting via tailcap loosen+tighten unless you leave power
    //  disconnected for several seconds, so we want to be awake when that
    //  happens to speed up the process)
    else if (event == EV_tick) {
    2b24:	c1 30       	cpi	r28, 0x01	; 1
    2b26:	d9 f4       	brne	.+54     	; 0x2b5e <momentary_state+0x8a>
        #ifdef USE_STROBE_STATE
        if (momentary_active) {
    2b28:	d0 91 70 01 	lds	r29, 0x0170	; 0x800170 <momentary_active>
    2b2c:	dd 23       	and	r29, r29
    2b2e:	51 f0       	breq	.+20     	; 0x2b44 <momentary_state+0x70>
            // 0 = ramping, 1 = strobes
            if (momentary_mode == 1) {
    2b30:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <momentary_mode>
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	a9 f4       	brne	.+42     	; 0x2b62 <momentary_state+0x8e>
                return strobe_state(event, arg);
    2b38:	b8 01       	movw	r22, r16
    2b3a:	8c 2f       	mov	r24, r28
    2b3c:	0e 94 9e 14 	call	0x293c	; 0x293c <strobe_state>
    2b40:	d8 2f       	mov	r29, r24
    2b42:	10 c0       	rjmp	.+32     	; 0x2b64 <momentary_state+0x90>
            }
        }
        else {
        #endif
            if (arg > TICKS_PER_SECOND*5) {  // sleep after 5 seconds
    2b44:	07 33       	cpi	r16, 0x37	; 55
    2b46:	11 40       	sbci	r17, 0x01	; 1
    2b48:	68 f0       	brcs	.+26     	; 0x2b64 <momentary_state+0x90>
                go_to_standby = 1;  // sleep while light is off
    2b4a:	81 e0       	ldi	r24, 0x01	; 1
    2b4c:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <go_to_standby>
                // turn off lighted button
                #ifdef USE_INDICATOR_LED
                indicator_led(0);
                #elif defined(USE_AUX_RGB_LEDS)
                rgb_led_update(0, 0);
    2b50:	60 e0       	ldi	r22, 0x00	; 0
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <rgb_led_update>
    2b58:	05 c0       	rjmp	.+10     	; 0x2b64 <momentary_state+0x90>
        momentary_active = 1;
        // 0 = ramping, 1 = strobes
        if (momentary_mode == 0) {
            set_level(memorized_level);
        }
        return MISCHIEF_MANAGED;
    2b5a:	d0 e0       	ldi	r29, 0x00	; 0
    2b5c:	03 c0       	rjmp	.+6      	; 0x2b64 <momentary_state+0x90>
        }
        #endif
        return MISCHIEF_MANAGED;
    }

    return EVENT_NOT_HANDLED;
    2b5e:	d1 e0       	ldi	r29, 0x01	; 1
    2b60:	01 c0       	rjmp	.+2      	; 0x2b64 <momentary_state+0x90>
                #endif
            }
        #ifdef USE_STROBE_STATE
        }
        #endif
        return MISCHIEF_MANAGED;
    2b62:	d0 e0       	ldi	r29, 0x00	; 0
    }

    return EVENT_NOT_HANDLED;
}
    2b64:	8d 2f       	mov	r24, r29
    2b66:	df 91       	pop	r29
    2b68:	cf 91       	pop	r28
    2b6a:	1f 91       	pop	r17
    2b6c:	0f 91       	pop	r16
    2b6e:	08 95       	ret

00002b70 <setup>:
    #ifndef START_AT_MEMORIZED_LEVEL

        // regular e-switch light, no hard clicky power button

        // blink at power-on to let user know power is connected
        blink_once();
    2b70:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <blink_once>

        #ifdef USE_FACTORY_RESET
        if (button_is_pressed())
    2b74:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <button_is_pressed>
    2b78:	81 11       	cpse	r24, r1
            factory_reset();
    2b7a:	0e 94 3f 13 	call	0x267e	; 0x267e <factory_reset>
        #endif

        load_config();
    2b7e:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <load_config>

        #if defined(USE_MANUAL_MEMORY) && defined(USE_MANUAL_MEMORY_TIMER)
        // without this, initial boot-up brightness is wrong
        // when manual mem is enabled with a non-zero timer
        if (manual_memory) memorized_level = manual_memory;
    2b82:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <manual_memory>
    2b86:	81 11       	cpse	r24, r1
    2b88:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <memorized_level>
        #endif

        #ifdef USE_TINT_RAMPING
        // add tint ramping underneath every other state
        push_state(tint_ramping_state, 0);
    2b8c:	60 e0       	ldi	r22, 0x00	; 0
    2b8e:	70 e0       	ldi	r23, 0x00	; 0
    2b90:	85 ee       	ldi	r24, 0xE5	; 229
    2b92:	9f e0       	ldi	r25, 0x0F	; 15
    2b94:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
        #endif  // ifdef USE_TINT_RAMPING

        push_state(off_state, 1);
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	70 e0       	ldi	r23, 0x00	; 0
    2b9c:	86 e2       	ldi	r24, 0x26	; 38
    2b9e:	9d e0       	ldi	r25, 0x0D	; 13
    2ba0:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
    2ba4:	08 95       	ret

00002ba6 <loop>:

}


// runs repeatedly whenever light is "on" (not in standby)
void loop() {
    2ba6:	ef 92       	push	r14
    2ba8:	ff 92       	push	r15
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29

    // "current_state" is volatile, so cache it to reduce code size
    StatePtr state = current_state;
    2bb2:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <current_state>
    2bb6:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <current_state+0x1>
    #endif

    if (0) {}  // placeholder

    #ifdef USE_VERSION_CHECK
    else if (state == version_check_state) {
    2bba:	22 e0       	ldi	r18, 0x02	; 2
    2bbc:	8a 37       	cpi	r24, 0x7A	; 122
    2bbe:	92 07       	cpc	r25, r18
    2bc0:	c9 f4       	brne	.+50     	; 0x2bf4 <loop+0x4e>
    2bc2:	0e c0       	rjmp	.+28     	; 0x2be0 <loop+0x3a>
}

// this happens in FSM loop()
inline void version_check_iter() {
    for (uint8_t i=0; i<sizeof(version_number)-1; i++) {
        blink_digit(pgm_read_byte(version_number + i) - '0');
    2bc4:	ec 2f       	mov	r30, r28
    2bc6:	f0 e0       	ldi	r31, 0x00	; 0
    2bc8:	e0 59       	subi	r30, 0x90	; 144
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	84 91       	lpm	r24, Z
    2bce:	80 53       	subi	r24, 0x30	; 48
    2bd0:	0e 94 2c 0a 	call	0x1458	; 0x1458 <blink_digit>
        nice_delay_ms(300);
    2bd4:	8c e2       	ldi	r24, 0x2C	; 44
    2bd6:	91 e0       	ldi	r25, 0x01	; 1
    2bd8:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    return EVENT_NOT_HANDLED;
}

// this happens in FSM loop()
inline void version_check_iter() {
    for (uint8_t i=0; i<sizeof(version_number)-1; i++) {
    2bdc:	cf 5f       	subi	r28, 0xFF	; 255
    2bde:	01 c0       	rjmp	.+2      	; 0x2be2 <loop+0x3c>
    2be0:	c0 e0       	ldi	r28, 0x00	; 0
    2be2:	cc 30       	cpi	r28, 0x0C	; 12
    2be4:	78 f3       	brcs	.-34     	; 0x2bc4 <loop+0x1e>
    //  before it'll turn back on, because the click to cancel gets sent
    //  to the "off" state instead of version_check_state
    //while (button_is_pressed()) {}
    //empty_event_sequence();

    set_state_deferred(off_state, 0);
    2be6:	60 e0       	ldi	r22, 0x00	; 0
    2be8:	70 e0       	ldi	r23, 0x00	; 0
    2bea:	86 e2       	ldi	r24, 0x26	; 38
    2bec:	9d e0       	ldi	r25, 0x0D	; 13
    2bee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <set_state_deferred>
    2bf2:	29 c1       	rjmp	.+594    	; 0x2e46 <loop+0x2a0>
        version_check_iter();
    }
    #endif

    #ifdef USE_STROBE_STATE
    else if ((state == strobe_state)
    2bf4:	24 e1       	ldi	r18, 0x14	; 20
    2bf6:	8e 39       	cpi	r24, 0x9E	; 158
    2bf8:	92 07       	cpc	r25, r18
    2bfa:	79 f0       	breq	.+30     	; 0x2c1a <loop+0x74>
         #ifdef USE_MOMENTARY_MODE
         // also handle momentary strobes
         ||  ((state == momentary_state) && (momentary_mode == 1) && (momentary_active))
    2bfc:	25 e1       	ldi	r18, 0x15	; 21
    2bfe:	8a 36       	cpi	r24, 0x6A	; 106
    2c00:	92 07       	cpc	r25, r18
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <loop+0x60>
    2c04:	ca c0       	rjmp	.+404    	; 0x2d9a <loop+0x1f4>
    2c06:	20 91 71 01 	lds	r18, 0x0171	; 0x800171 <momentary_mode>
    2c0a:	21 30       	cpi	r18, 0x01	; 1
    2c0c:	09 f0       	breq	.+2      	; 0x2c10 <loop+0x6a>
    2c0e:	c5 c0       	rjmp	.+394    	; 0x2d9a <loop+0x1f4>
    2c10:	20 91 70 01 	lds	r18, 0x0170	; 0x800170 <momentary_active>
    2c14:	22 23       	and	r18, r18
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <loop+0x74>
    2c18:	c0 c0       	rjmp	.+384    	; 0x2d9a <loop+0x1f4>

// runs repeatedly in FSM loop() whenever UI is in strobe_state or momentary strobe
inline void strobe_state_iter() {
    uint8_t st = strobe_type;  // can't use switch() on an enum
    2c1a:	c0 91 0c 01 	lds	r28, 0x010C	; 0x80010c <strobe_type>

    switch(st) {
    2c1e:	c2 30       	cpi	r28, 0x02	; 2
    2c20:	31 f1       	breq	.+76     	; 0x2c6e <loop+0xc8>
    2c22:	20 f0       	brcs	.+8      	; 0x2c2c <loop+0x86>
    2c24:	c4 30       	cpi	r28, 0x04	; 4
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <loop+0x84>
    2c28:	96 c0       	rjmp	.+300    	; 0x2d56 <loop+0x1b0>
    2c2a:	0d c1       	rjmp	.+538    	; 0x2e46 <loop+0x2a0>
#endif  // ifdef USE_STROBE_STATE

#if defined(USE_PARTY_STROBE_MODE) || defined(USE_TACTICAL_STROBE_MODE)
inline void party_tactical_strobe_mode_iter(uint8_t st) {
    // one iteration of main loop()
    uint8_t del = strobe_delays[st];
    2c2c:	ec 2f       	mov	r30, r28
    2c2e:	f0 e0       	ldi	r31, 0x00	; 0
    2c30:	e6 5f       	subi	r30, 0xF6	; 246
    2c32:	fe 4f       	sbci	r31, 0xFE	; 254
    2c34:	d0 81       	ld	r29, Z
    // TODO: make tac strobe brightness configurable?
    set_level(STROBE_BRIGHTNESS);
    2c36:	86 e9       	ldi	r24, 0x96	; 150
    2c38:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    if (0) {}  // placeholde0
    #ifdef USE_PARTY_STROBE_MODE
    else if (st == party_strobe_e) {  // party strobe
    2c3c:	c1 11       	cpse	r28, r1
    2c3e:	0a c0       	rjmp	.+20     	; 0x2c54 <loop+0xae>
        #ifdef PARTY_STROBE_ONTIME
        nice_delay_ms(PARTY_STROBE_ONTIME);
        #else
        if (del < 42) delay_zero();
    2c40:	da 32       	cpi	r29, 0x2A	; 42
    2c42:	18 f4       	brcc	.+6      	; 0x2c4a <loop+0xa4>
    2c44:	0e 94 9e 02 	call	0x53c	; 0x53c <_delay_zero>
    2c48:	0a c0       	rjmp	.+20     	; 0x2c5e <loop+0xb8>
        else nice_delay_ms(1);
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2c52:	05 c0       	rjmp	.+10     	; 0x2c5e <loop+0xb8>
        #endif
    }
    #endif
    #ifdef USE_TACTICAL_STROBE_MODE
    else {  //tactical strobe
        nice_delay_ms(del >> 1);
    2c54:	8d 2f       	mov	r24, r29
    2c56:	86 95       	lsr	r24
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    }
    #endif
    set_level(0);
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    nice_delay_ms(del);  // no return check necessary on final delay
    2c64:	8d 2f       	mov	r24, r29
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2c6c:	ec c0       	rjmp	.+472    	; 0x2e46 <loop+0x2a0>
    uint16_t rand_time;

    // turn the emitter on at a random level,
    // for a random amount of time between 1ms and 32ms
    //rand_time = 1 << (pseudo_rand() % 7);
    rand_time = pseudo_rand() & 63;
    2c6e:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2c72:	8f 73       	andi	r24, 0x3F	; 63
    2c74:	08 2f       	mov	r16, r24
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    brightness = 1 << (pseudo_rand() % 7);  // 1, 2, 4, 8, 16, 32, 64
    2c78:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2c7c:	67 e0       	ldi	r22, 0x07	; 7
    2c7e:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    2c82:	ee 24       	eor	r14, r14
    2c84:	e3 94       	inc	r14
    2c86:	f1 2c       	mov	r15, r1
    2c88:	e7 01       	movw	r28, r14
    2c8a:	02 c0       	rjmp	.+4      	; 0x2c90 <loop+0xea>
    2c8c:	cc 0f       	add	r28, r28
    2c8e:	dd 1f       	adc	r29, r29
    2c90:	9a 95       	dec	r25
    2c92:	e2 f7       	brpl	.-8      	; 0x2c8c <loop+0xe6>
    brightness += 1 << (pseudo_rand() % 5);  // 2 to 80 now
    2c94:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2c98:	65 e0       	ldi	r22, 0x05	; 5
    2c9a:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    2c9e:	02 c0       	rjmp	.+4      	; 0x2ca4 <loop+0xfe>
    2ca0:	ee 0c       	add	r14, r14
    2ca2:	ff 1c       	adc	r15, r15
    2ca4:	9a 95       	dec	r25
    2ca6:	e2 f7       	brpl	.-8      	; 0x2ca0 <loop+0xfa>
    2ca8:	ce 0d       	add	r28, r14
    2caa:	df 1d       	adc	r29, r15
    brightness += pseudo_rand() % brightness;  // 2 to 159 now (w/ low bias)
    2cac:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2cb0:	90 e0       	ldi	r25, 0x00	; 0
    2cb2:	be 01       	movw	r22, r28
    2cb4:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
    2cb8:	c8 0f       	add	r28, r24
    2cba:	d9 1f       	adc	r29, r25
    if (brightness > MAX_LEVEL) brightness = MAX_LEVEL;
    2cbc:	c7 39       	cpi	r28, 0x97	; 151
    2cbe:	d1 05       	cpc	r29, r1
    2cc0:	10 f0       	brcs	.+4      	; 0x2cc6 <loop+0x120>
    2cc2:	c6 e9       	ldi	r28, 0x96	; 150
    2cc4:	d0 e0       	ldi	r29, 0x00	; 0
    set_level(brightness);
    2cc6:	8c 2f       	mov	r24, r28
    2cc8:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    nice_delay_ms(rand_time);
    2ccc:	c8 01       	movw	r24, r16
    2cce:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>

    // decrease the brightness somewhat more gradually, like lightning
    uint8_t stepdown = brightness >> 3;
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	95 95       	asr	r25
    2cd6:	87 95       	ror	r24
    2cd8:	95 95       	asr	r25
    2cda:	87 95       	ror	r24
    2cdc:	95 95       	asr	r25
    2cde:	87 95       	ror	r24
    2ce0:	f8 2e       	mov	r15, r24
    if (stepdown < 1) stepdown = 1;
    2ce2:	81 11       	cpse	r24, r1
    2ce4:	1a c0       	rjmp	.+52     	; 0x2d1a <loop+0x174>
    2ce6:	ff 24       	eor	r15, r15
    2ce8:	f3 94       	inc	r15
    2cea:	17 c0       	rjmp	.+46     	; 0x2d1a <loop+0x174>
    while(brightness > 1) {
        nice_delay_ms(rand_time);
    2cec:	c8 01       	movw	r24, r16
    2cee:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        brightness -= stepdown;
    2cf2:	cf 19       	sub	r28, r15
    2cf4:	d1 09       	sbc	r29, r1
        if (brightness < 0) brightness = 0;
    2cf6:	12 f4       	brpl	.+4      	; 0x2cfc <loop+0x156>
    2cf8:	c0 e0       	ldi	r28, 0x00	; 0
    2cfa:	d0 e0       	ldi	r29, 0x00	; 0
        set_level(brightness);
    2cfc:	8c 2f       	mov	r24, r28
    2cfe:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
           if ((brightness < MAX_LEVEL/2) && (! (pseudo_rand() & 15))) {
           brightness <<= 1;
           set_level(brightness);
           }
           */
        if (! (pseudo_rand() & 3)) {
    2d02:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2d06:	83 70       	andi	r24, 0x03	; 3
    2d08:	41 f4       	brne	.+16     	; 0x2d1a <loop+0x174>
            nice_delay_ms(rand_time);
    2d0a:	c8 01       	movw	r24, r16
    2d0c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
            set_level(brightness>>1);
    2d10:	ce 01       	movw	r24, r28
    2d12:	95 95       	asr	r25
    2d14:	87 95       	ror	r24
    2d16:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    nice_delay_ms(rand_time);

    // decrease the brightness somewhat more gradually, like lightning
    uint8_t stepdown = brightness >> 3;
    if (stepdown < 1) stepdown = 1;
    while(brightness > 1) {
    2d1a:	c2 30       	cpi	r28, 0x02	; 2
    2d1c:	d1 05       	cpc	r29, r1
    2d1e:	34 f7       	brge	.-52     	; 0x2cec <loop+0x146>
    }

    // turn the emitter off,
    // for a random amount of time between 1ms and 8192ms
    // (with a low bias)
    rand_time = 1 << (pseudo_rand() % 13);
    2d20:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2d24:	6d e0       	ldi	r22, 0x0D	; 13
    2d26:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__udivmodqi4>
    2d2a:	c1 e0       	ldi	r28, 0x01	; 1
    2d2c:	d0 e0       	ldi	r29, 0x00	; 0
    2d2e:	02 c0       	rjmp	.+4      	; 0x2d34 <loop+0x18e>
    2d30:	cc 0f       	add	r28, r28
    2d32:	dd 1f       	adc	r29, r29
    2d34:	9a 95       	dec	r25
    2d36:	e2 f7       	brpl	.-8      	; 0x2d30 <loop+0x18a>
    rand_time += pseudo_rand() % rand_time;
    2d38:	0e 94 ad 07 	call	0xf5a	; 0xf5a <pseudo_rand>
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	be 01       	movw	r22, r28
    2d40:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    2d44:	c8 0f       	add	r28, r24
    2d46:	d9 1f       	adc	r29, r25
    set_level(0);
    2d48:	80 e0       	ldi	r24, 0x00	; 0
    2d4a:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    nice_delay_ms(rand_time);  // no return check necessary on final delay
    2d4e:	ce 01       	movw	r24, r28
    2d50:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2d54:	78 c0       	rjmp	.+240    	; 0x2e46 <loop+0x2a0>
#endif

#ifdef USE_BIKE_FLASHER_MODE
inline void bike_flasher_iter() {
    // one iteration of main loop()
    uint8_t burst = bike_flasher_brightness << 1;
    2d56:	d0 91 09 01 	lds	r29, 0x0109	; 0x800109 <bike_flasher_brightness>
    2d5a:	dd 0f       	add	r29, r29
    if (burst > MAX_LEVEL) burst = MAX_LEVEL;
    2d5c:	d7 39       	cpi	r29, 0x97	; 151
    2d5e:	08 f0       	brcs	.+2      	; 0x2d62 <loop+0x1bc>
    2d60:	d6 e9       	ldi	r29, 0x96	; 150
    for(uint8_t i=0; i<4; i++) {
    2d62:	c0 e0       	ldi	r28, 0x00	; 0
    2d64:	10 c0       	rjmp	.+32     	; 0x2d86 <loop+0x1e0>
        set_level(burst);
    2d66:	8d 2f       	mov	r24, r29
    2d68:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(5);
    2d6c:	85 e0       	ldi	r24, 0x05	; 5
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        set_level(bike_flasher_brightness);
    2d74:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <bike_flasher_brightness>
    2d78:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(65);
    2d7c:	81 e4       	ldi	r24, 0x41	; 65
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
#ifdef USE_BIKE_FLASHER_MODE
inline void bike_flasher_iter() {
    // one iteration of main loop()
    uint8_t burst = bike_flasher_brightness << 1;
    if (burst > MAX_LEVEL) burst = MAX_LEVEL;
    for(uint8_t i=0; i<4; i++) {
    2d84:	cf 5f       	subi	r28, 0xFF	; 255
    2d86:	c4 30       	cpi	r28, 0x04	; 4
    2d88:	70 f3       	brcs	.-36     	; 0x2d66 <loop+0x1c0>
        set_level(burst);
        nice_delay_ms(5);
        set_level(bike_flasher_brightness);
        nice_delay_ms(65);
    }
    nice_delay_ms(720);  // no return check necessary on final delay
    2d8a:	80 ed       	ldi	r24, 0xD0	; 208
    2d8c:	92 e0       	ldi	r25, 0x02	; 2
    2d8e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    set_level(0);
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
    2d98:	56 c0       	rjmp	.+172    	; 0x2e46 <loop+0x2a0>
        boring_strobe_state_iter();
    }
    #endif

    #ifdef USE_BATTCHECK
    else if (state == battcheck_state) {
    2d9a:	23 e0       	ldi	r18, 0x03	; 3
    2d9c:	84 32       	cpi	r24, 0x24	; 36
    2d9e:	92 07       	cpc	r25, r18
    2da0:	91 f4       	brne	.+36     	; 0x2dc6 <loop+0x220>
        battcheck();
    2da2:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <battcheck>
        #ifdef USE_SIMPLE_UI
        // in simple mode, turn off after one readout
        // FIXME: can eat the next button press
        //        (state changes in loop() act weird)
        if (simple_ui_active) set_state_deferred(off_state, 0);
    2da6:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <simple_ui_active>
    2daa:	88 23       	and	r24, r24
    2dac:	39 f0       	breq	.+14     	; 0x2dbc <loop+0x216>
    2dae:	60 e0       	ldi	r22, 0x00	; 0
    2db0:	70 e0       	ldi	r23, 0x00	; 0
    2db2:	86 e2       	ldi	r24, 0x26	; 38
    2db4:	9d e0       	ldi	r25, 0x0D	; 13
    2db6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <set_state_deferred>
    2dba:	45 c0       	rjmp	.+138    	; 0x2e46 <loop+0x2a0>
        else nice_delay_ms(1000);
    2dbc:	88 ee       	ldi	r24, 0xE8	; 232
    2dbe:	93 e0       	ldi	r25, 0x03	; 3
    2dc0:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2dc4:	40 c0       	rjmp	.+128    	; 0x2e46 <loop+0x2a0>
    }
    #endif

    #ifdef USE_THERMAL_REGULATION
    // TODO: blink out therm_ceil during thermal_config_state?
    else if (state == tempcheck_state) {
    2dc6:	23 e0       	ldi	r18, 0x03	; 3
    2dc8:	8a 34       	cpi	r24, 0x4A	; 74
    2dca:	92 07       	cpc	r25, r18
    2dcc:	49 f4       	brne	.+18     	; 0x2de0 <loop+0x23a>
        blink_num(temperature);
    2dce:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <temperature>
    2dd2:	0e 94 4e 0a 	call	0x149c	; 0x149c <blink_num>
        nice_delay_ms(1000);
    2dd6:	88 ee       	ldi	r24, 0xE8	; 232
    2dd8:	93 e0       	ldi	r25, 0x03	; 3
    2dda:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2dde:	33 c0       	rjmp	.+102    	; 0x2e46 <loop+0x2a0>
    }
    #endif

    #ifdef USE_BEACON_MODE
    else if (state == beacon_state) {
    2de0:	8e 5c       	subi	r24, 0xCE	; 206
    2de2:	9e 40       	sbci	r25, 0x0E	; 14
    2de4:	71 f5       	brne	.+92     	; 0x2e42 <loop+0x29c>

#include "beacon-mode.h"

inline void beacon_mode_iter() {
    // one iteration of main loop()
    if (! button_last_state) {
    2de6:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <button_last_state>
    2dea:	81 11       	cpse	r24, r1
    2dec:	2c c0       	rjmp	.+88     	; 0x2e46 <loop+0x2a0>
        set_level(memorized_level);
    2dee:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <memorized_level>
    2df2:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(100);
    2df6:	84 e6       	ldi	r24, 0x64	; 100
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
        set_level(0);
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
        nice_delay_ms(((beacon_seconds) * 1000) - 100);
    2e04:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <beacon_seconds>
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	9c 01       	movw	r18, r24
    2e0c:	22 0f       	add	r18, r18
    2e0e:	33 1f       	adc	r19, r19
    2e10:	22 95       	swap	r18
    2e12:	32 95       	swap	r19
    2e14:	30 7f       	andi	r19, 0xF0	; 240
    2e16:	32 27       	eor	r19, r18
    2e18:	20 7f       	andi	r18, 0xF0	; 240
    2e1a:	32 27       	eor	r19, r18
    2e1c:	28 1b       	sub	r18, r24
    2e1e:	39 0b       	sbc	r19, r25
    2e20:	22 0f       	add	r18, r18
    2e22:	33 1f       	adc	r19, r19
    2e24:	22 0f       	add	r18, r18
    2e26:	33 1f       	adc	r19, r19
    2e28:	82 0f       	add	r24, r18
    2e2a:	93 1f       	adc	r25, r19
    2e2c:	88 0f       	add	r24, r24
    2e2e:	99 1f       	adc	r25, r25
    2e30:	88 0f       	add	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	88 0f       	add	r24, r24
    2e36:	99 1f       	adc	r25, r25
    2e38:	84 56       	subi	r24, 0x64	; 100
    2e3a:	91 09       	sbc	r25, r1
    2e3c:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <nice_delay_ms>
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <loop+0x2a0>
    #endif

    #ifdef USE_IDLE_MODE
    else {
        // doze until next clock tick
        idle_mode();
    2e42:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <idle_mode>
    }
    #endif

}
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	08 95       	ret

00002e54 <main>:
//#endif


int main() {
    // Don't allow interrupts while booting
    cli();
    2e54:	f8 94       	cli
static inline void prevent_reboot_loop() {
    // prevent WDT from rebooting MCU again
    #ifdef AVRXMEGA3  // ATTINY816, 817, etc
    RSTCTRL.RSTFR &= ~(RSTCTRL_WDRF_bm);  // reset status flag
    #else
    MCUSR &= ~(1<<WDRF);  // reset status flag
    2e56:	85 b7       	in	r24, 0x35	; 53
    2e58:	87 7f       	andi	r24, 0xF7	; 247
    2e5a:	85 bf       	out	0x35, r24	; 53
				);
	}
	else
	{
        uint8_t temp_wd;
        __asm__ __volatile__ (
    2e5c:	88 ed       	ldi	r24, 0xD8	; 216
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0f b6       	in	r0, 0x3f	; 63
    2e62:	f8 94       	cli
    2e64:	a8 95       	wdr
    2e66:	8f bd       	out	0x2f, r24	; 47
    2e68:	90 b7       	in	r25, 0x30	; 48
    2e6a:	97 7f       	andi	r25, 0xF7	; 247
    2e6c:	90 bf       	out	0x30, r25	; 48
    2e6e:	0f be       	out	0x3f, r0	; 63

// with so many pins, doing this all with #ifdefs gets awkward...
// ... so just hardcode it in each hwdef file instead
inline void hwdef_setup() {
  // enable output ports
  DDRC = (1 << PWM2_PIN);
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	88 b9       	out	0x08, r24	; 8
  DDRB = (1 << PWM1_PIN);
    2e74:	98 e0       	ldi	r25, 0x08	; 8
    2e76:	9c b9       	out	0x0c, r25	; 12
  DDRA = (1 << PWM3_PIN)
    2e78:	9f e7       	ldi	r25, 0x7F	; 127
    2e7a:	90 bb       	out	0x10, r25	; 16
  // Linear opamp PWM for both main and 2nd LEDs (10-bit)
  // WGM1[3:0]: 1,0,1,0: PWM, Phase Correct, adjustable (DS table 12-5)
  // CS1[2:0]:    0,0,1: clk/1 (No prescaling) (DS table 12-6)
  // COM1A[1:0]:    1,0: PWM OC1A in the normal direction (DS table 12-4)
  // COM1B[1:0]:    1,0: PWM OC1B in the normal direction (DS table 12-4)
  TCCR1A  = (1<<WGM11)  | (0<<WGM10)   // adjustable PWM (TOP=ICR1) (DS table 12-5)
    2e7c:	92 ea       	ldi	r25, 0xA2	; 162
    2e7e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <__TEXT_REGION_LENGTH__+0x7fc072>
          | (1<<COM1A1) | (0<<COM1A0)  // PWM 1A in normal direction (DS table 12-4)
          | (1<<COM1B1) | (0<<COM1B0)  // PWM 1B in normal direction (DS table 12-4)
          ;
  TCCR1B  = (0<<CS12)   | (0<<CS11) | (1<<CS10)  // clk/1 (no prescaling) (DS table 12-6)
    2e82:	91 e1       	ldi	r25, 0x11	; 17
    2e84:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <__TEXT_REGION_LENGTH__+0x7fc071>
  // FET PWM (8-bit; this channel can't do 10-bit)
  // WGM0[2:0]: 0,0,1: PWM, Phase Correct, 8-bit (DS table 11-8)
  // CS0[2:0]:  0,0,1: clk/1 (No prescaling) (DS table 11-9)
  // COM0A[1:0]:  1,0: PWM OC0A in the normal direction (DS table 11-4)
  // COM0B[1:0]:  1,0: PWM OC0B in the normal direction (DS table 11-7)
  TCCR0A  = (0<<WGM01)  | (1<<WGM00)   // 8-bit (TOP=0xFF) (DS table 11-8)
    2e88:	91 e8       	ldi	r25, 0x81	; 129
    2e8a:	9b bb       	out	0x1b, r25	; 27
          | (1<<COM0A1) | (0<<COM0A0)  // PWM 0A in normal direction (DS table 11-4)
          //| (1<<COM0B1) | (0<<COM0B0)  // PWM 0B in normal direction (DS table 11-7)
          ;
  TCCR0B  = (0<<CS02)   | (0<<CS01) | (1<<CS00)  // clk/1 (no prescaling) (DS table 11-9)
    2e8c:	8a bb       	out	0x1a, r24	; 26
          | (0<<WGM02)  // phase-correct PWM (DS table 11-8)
          ;
  // set PWM resolution
  PWM1_TOP = PWM_TOP;
    2e8e:	8f ef       	ldi	r24, 0xFF	; 255
    2e90:	91 e0       	ldi	r25, 0x01	; 1
    2e92:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <__TEXT_REGION_LENGTH__+0x7fc069>
    2e96:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7fc068>

  // set up e-switch
  SWITCH_PUE = (1 << SWITCH_PIN);  // pull-up for e-switch
    2e9a:	80 e8       	ldi	r24, 0x80	; 128
    2e9c:	82 bb       	out	0x12, r24	; 18
  SWITCH_PCMSK = (1 << SWITCH_PCINT);  // enable pin change interrupt
    2e9e:	87 bd       	out	0x27, r24	; 39
    #elif (ATTINY == 1634)
        // enable pin change interrupt
        #ifdef SWITCH2_PCIE
        GIMSK |= ((1 << SWITCH_PCIE) | (1 << SWITCH2_PCIE));
        #else
        GIMSK |= (1 << SWITCH_PCIE);
    2ea0:	8c b7       	in	r24, 0x3c	; 60
    2ea2:	88 60       	ori	r24, 0x08	; 8
    2ea4:	8c bf       	out	0x3c, r24	; 60
    //debug_blink(1);
    #endif

    // all booted -- turn interrupts back on
    PCINT_on();
    WDT_on();
    2ea6:	0e 94 cd 05 	call	0xb9a	; 0xb9a <WDT_on>
}

inline void set_admux_voltage() {
    #if (ATTINY == 1634)
        #ifdef USE_VOLTAGE_DIVIDER // 1.1V / pin7
            ADMUX = ADMUX_VOLTAGE_DIVIDER;
    2eaa:	86 e8       	ldi	r24, 0x86	; 134
    2eac:	84 b9       	out	0x04, r24	; 4
            ADC0.CTRLC = ADC_SAMPCAP_bm | ADC_PRESC_DIV64_gc | ADC_REFSEL_VDDREF_gc; // Vdd (Vcc) be ADC reference
        #endif
    #else
        #error Unrecognized MCU type
    #endif
    adc_channel = 0;
    2eae:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <adc_channel>
    adc_sample_count = 0;  // first result is unstable
    2eb2:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <adc_sample_count>
    ADC_start_measurement();
}

inline void ADC_start_measurement() {
    #if (ATTINY == 25) || (ATTINY == 45) || (ATTINY == 85) || (ATTINY == 841) || (ATTINY == 1634)
        ADCSRA |= (1 << ADSC) | (1 << ADIE);
    2eb6:	83 b1       	in	r24, 0x03	; 3
    2eb8:	88 64       	ori	r24, 0x48	; 72
    2eba:	83 b9       	out	0x03, r24	; 3
{
    #if (ATTINY == 25) || (ATTINY == 45) || (ATTINY == 85) || (ATTINY == 1634)
        set_admux_voltage();
        #ifdef USE_VOLTAGE_DIVIDER
            // disable digital input on divider pin to reduce power consumption
            VOLTAGE_ADC_DIDR |= (1 << VOLTAGE_ADC);
    2ebc:	e1 e6       	ldi	r30, 0x61	; 97
    2ebe:	f0 e0       	ldi	r31, 0x00	; 0
    2ec0:	80 81       	ld	r24, Z
    2ec2:	82 60       	ori	r24, 0x02	; 2
    2ec4:	80 83       	st	Z, r24
            // disable digital input on VCC pin to reduce power consumption
            //VOLTAGE_ADC_DIDR |= (1 << VOLTAGE_ADC);  // FIXME: unsure how to handle for VCC pin
        #endif
        #if (ATTINY == 1634)
            //ACSRA |= (1 << ACD);  // turn off analog comparator to save power
            ADCSRB |= (1 << ADLAR);  // left-adjust flag is here instead of ADMUX
    2ec6:	82 b1       	in	r24, 0x02	; 2
    2ec8:	88 60       	ori	r24, 0x08	; 8
    2eca:	82 b9       	out	0x02, r24	; 2
        #endif
        // enable, start, auto-retrigger, prescale
        ADCSRA = (1 << ADEN) | (1 << ADSC) | (1 << ADATE) | ADC_PRSCL;
    2ecc:	87 ee       	ldi	r24, 0xE7	; 231
    2ece:	83 b9       	out	0x03, r24	; 3
    ADC_on();
    sei();
    2ed0:	78 94       	sei

    // in case any spurious button presses were detected at boot
    #ifdef USE_DELAY_MS
    delay_ms(1);
    #else
    delay_4ms(1);
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	0e 94 2c 04 	call	0x858	; 0x858 <delay_4ms>
    #endif

    // fallback for handling a few things
    #ifndef DONT_USE_DEFAULT_STATE
    push_state(default_state, 0);
    2ed8:	60 e0       	ldi	r22, 0x00	; 0
    2eda:	70 e0       	ldi	r23, 0x00	; 0
    2edc:	84 ec       	ldi	r24, 0xC4	; 196
    2ede:	97 e1       	ldi	r25, 0x17	; 23
    2ee0:	0e 94 cd 02 	call	0x59a	; 0x59a <push_state>
    nice_delay_interrupt = 0;
    2ee4:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <nice_delay_interrupt>
    #endif

    // call recipe's setup
    setup();
    2ee8:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <setup>

    // main loop
    while (1) {
        // if event queue not empty, empty it
        process_emissions();
    2eec:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <process_emissions>

        // if loop() tried to change state, process that now
        StatePtr df = deferred_state;
    2ef0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <deferred_state>
    2ef4:	90 91 b3 01 	lds	r25, 0x01B3	; 0x8001b3 <deferred_state+0x1>
        if (df) {
    2ef8:	00 97       	sbiw	r24, 0x00	; 0
    2efa:	51 f0       	breq	.+20     	; 0x2f10 <main+0xbc>
            set_state(df, deferred_state_arg);
    2efc:	60 91 b4 01 	lds	r22, 0x01B4	; 0x8001b4 <deferred_state_arg>
    2f00:	70 91 b5 01 	lds	r23, 0x01B5	; 0x8001b5 <deferred_state_arg+0x1>
    2f04:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
            deferred_state = NULL;
    2f08:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <deferred_state+0x1>
    2f0c:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <deferred_state>
            //deferred_state_arg = 0;  // unnecessary
        }

        // enter standby mode if requested
        // (works better if deferred like this)
        if (go_to_standby) {
    2f10:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <go_to_standby>
    2f14:	88 23       	and	r24, r24
    2f16:	29 f0       	breq	.+10     	; 0x2f22 <main+0xce>
            #ifdef USE_RAMPING
            set_level(0);
    2f18:	80 e0       	ldi	r24, 0x00	; 0
    2f1a:	0e 94 a8 08 	call	0x1150	; 0x1150 <set_level>
            #endif
            #if PWM_CHANNELS >= 4
            PWM4_LVL = 255;  // inverted  :(
            #endif
            #endif
            standby_mode();
    2f1e:	0e 94 a3 06 	call	0xd46	; 0xd46 <sleep_until_eswitch_pressed>
        }

        // catch up on interrupts
        handle_deferred_interrupts();
    2f22:	0e 94 ee 09 	call	0x13dc	; 0x13dc <handle_deferred_interrupts>

        // turn delays back on, if they were off
        nice_delay_interrupt = 0;
    2f26:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <nice_delay_interrupt>

        // give the recipe some time slices
        loop();
    2f2a:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <loop>

    }
    2f2e:	de cf       	rjmp	.-68     	; 0x2eec <main+0x98>

00002f30 <low_voltage>:
// instead of handling EV_low_voltage in each mode,
// it's handled globally here to make the code smaller and simpler
void low_voltage() {

    // "current_state" is volatile, so cache it to reduce code size
    StatePtr state = current_state;
    2f30:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <current_state>
    2f34:	90 91 ac 01 	lds	r25, 0x01AC	; 0x8001ac <current_state+0x1>

    if (0) {}  // placeholder

    #ifdef USE_STROBE_STATE
    // "step down" from strobe to something low
    else if (state == strobe_state) {
    2f38:	24 e1       	ldi	r18, 0x14	; 20
    2f3a:	8e 39       	cpi	r24, 0x9E	; 158
    2f3c:	92 07       	cpc	r25, r18
    2f3e:	39 f4       	brne	.+14     	; 0x2f4e <low_voltage+0x1e>
        set_state(steady_state, RAMP_SIZE/6);
    2f40:	69 e1       	ldi	r22, 0x19	; 25
    2f42:	70 e0       	ldi	r23, 0x00	; 0
    2f44:	82 ec       	ldi	r24, 0xC2	; 194
    2f46:	90 e1       	ldi	r25, 0x10	; 16
    2f48:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
    2f4c:	08 95       	ret
    }
    #endif

    // in normal mode, step down or turn off
    else if (state == steady_state) {
    2f4e:	82 5c       	subi	r24, 0xC2	; 194
    2f50:	90 41       	sbci	r25, 0x10	; 16
    2f52:	99 f4       	brne	.+38     	; 0x2f7a <low_voltage+0x4a>
        if (actual_level > 1) {
    2f54:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <actual_level>
    2f58:	92 30       	cpi	r25, 0x02	; 2
    2f5a:	40 f0       	brcs	.+16     	; 0x2f6c <low_voltage+0x3c>
            uint8_t lvl = (actual_level >> 1) + (actual_level >> 2);
    2f5c:	89 2f       	mov	r24, r25
    2f5e:	86 95       	lsr	r24
    2f60:	96 95       	lsr	r25
    2f62:	96 95       	lsr	r25
            set_level_and_therm_target(lvl);
    2f64:	89 0f       	add	r24, r25
    2f66:	0e 94 ef 0a 	call	0x15de	; 0x15de <set_level_and_therm_target>
    2f6a:	08 95       	ret
        }
        else {
            set_state(off_state, 0);
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	70 e0       	ldi	r23, 0x00	; 0
    2f70:	86 e2       	ldi	r24, 0x26	; 38
    2f72:	9d e0       	ldi	r25, 0x0D	; 13
    2f74:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
    2f78:	08 95       	ret
        }
    }
    // all other modes, just turn off when voltage is low
    else {
        set_state(off_state, 0);
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	86 e2       	ldi	r24, 0x26	; 38
    2f80:	9d e0       	ldi	r25, 0x0D	; 13
    2f82:	0e 94 13 03 	call	0x626	; 0x626 <set_state>
    2f86:	08 95       	ret

00002f88 <default_state>:
// handles default actions for LVP, thermal regulation, etc
uint8_t default_state(Event event, uint16_t arg) {
    if (0) {}  // this should get compiled out

    #ifdef USE_LVP
    else if (event == EV_voltage_low) {
    2f88:	84 30       	cpi	r24, 0x04	; 4
    2f8a:	21 f4       	brne	.+8      	; 0x2f94 <default_state+0xc>
        low_voltage();
    2f8c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <low_voltage>
        return EVENT_HANDLED;
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	08 95       	ret
    }
    #endif
    #endif

    // event not handled
    return EVENT_NOT_HANDLED;
    2f94:	81 e0       	ldi	r24, 0x01	; 1
}
    2f96:	08 95       	ret

00002f98 <__mulhi3>:
    2f98:	00 24       	eor	r0, r0
    2f9a:	55 27       	eor	r21, r21
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <__mulhi3+0xe>
    2f9e:	08 0e       	add	r0, r24
    2fa0:	59 1f       	adc	r21, r25
    2fa2:	88 0f       	add	r24, r24
    2fa4:	99 1f       	adc	r25, r25
    2fa6:	00 97       	sbiw	r24, 0x00	; 0
    2fa8:	29 f0       	breq	.+10     	; 0x2fb4 <__mulhi3+0x1c>
    2faa:	76 95       	lsr	r23
    2fac:	67 95       	ror	r22
    2fae:	b8 f3       	brcs	.-18     	; 0x2f9e <__mulhi3+0x6>
    2fb0:	71 05       	cpc	r23, r1
    2fb2:	b9 f7       	brne	.-18     	; 0x2fa2 <__mulhi3+0xa>
    2fb4:	80 2d       	mov	r24, r0
    2fb6:	95 2f       	mov	r25, r21
    2fb8:	08 95       	ret

00002fba <__mulsi3>:
    2fba:	ee 27       	eor	r30, r30
    2fbc:	ff 27       	eor	r31, r31

00002fbe <__mulsi3_helper>:
    2fbe:	aa 27       	eor	r26, r26
    2fc0:	bb 27       	eor	r27, r27
    2fc2:	08 c0       	rjmp	.+16     	; 0x2fd4 <__mulsi3_helper+0x16>
    2fc4:	a2 0f       	add	r26, r18
    2fc6:	b3 1f       	adc	r27, r19
    2fc8:	e4 1f       	adc	r30, r20
    2fca:	f5 1f       	adc	r31, r21
    2fcc:	22 0f       	add	r18, r18
    2fce:	33 1f       	adc	r19, r19
    2fd0:	44 1f       	adc	r20, r20
    2fd2:	55 1f       	adc	r21, r21
    2fd4:	96 95       	lsr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	77 95       	ror	r23
    2fda:	67 95       	ror	r22
    2fdc:	98 f3       	brcs	.-26     	; 0x2fc4 <__mulsi3_helper+0x6>
    2fde:	70 40       	sbci	r23, 0x00	; 0
    2fe0:	a9 f7       	brne	.-22     	; 0x2fcc <__mulsi3_helper+0xe>
    2fe2:	00 97       	sbiw	r24, 0x00	; 0
    2fe4:	99 f7       	brne	.-26     	; 0x2fcc <__mulsi3_helper+0xe>
    2fe6:	bd 01       	movw	r22, r26
    2fe8:	cf 01       	movw	r24, r30
    2fea:	08 95       	ret

00002fec <__udivmodqi4>:
    2fec:	99 1b       	sub	r25, r25
    2fee:	79 e0       	ldi	r23, 0x09	; 9
    2ff0:	04 c0       	rjmp	.+8      	; 0x2ffa <__udivmodqi4_ep>

00002ff2 <__udivmodqi4_loop>:
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	96 17       	cp	r25, r22
    2ff6:	08 f0       	brcs	.+2      	; 0x2ffa <__udivmodqi4_ep>
    2ff8:	96 1b       	sub	r25, r22

00002ffa <__udivmodqi4_ep>:
    2ffa:	88 1f       	adc	r24, r24
    2ffc:	7a 95       	dec	r23
    2ffe:	c9 f7       	brne	.-14     	; 0x2ff2 <__udivmodqi4_loop>
    3000:	80 95       	com	r24
    3002:	08 95       	ret

00003004 <__udivmodhi4>:
    3004:	aa 1b       	sub	r26, r26
    3006:	bb 1b       	sub	r27, r27
    3008:	51 e1       	ldi	r21, 0x11	; 17
    300a:	07 c0       	rjmp	.+14     	; 0x301a <__udivmodhi4_ep>

0000300c <__udivmodhi4_loop>:
    300c:	aa 1f       	adc	r26, r26
    300e:	bb 1f       	adc	r27, r27
    3010:	a6 17       	cp	r26, r22
    3012:	b7 07       	cpc	r27, r23
    3014:	10 f0       	brcs	.+4      	; 0x301a <__udivmodhi4_ep>
    3016:	a6 1b       	sub	r26, r22
    3018:	b7 0b       	sbc	r27, r23

0000301a <__udivmodhi4_ep>:
    301a:	88 1f       	adc	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	5a 95       	dec	r21
    3020:	a9 f7       	brne	.-22     	; 0x300c <__udivmodhi4_loop>
    3022:	80 95       	com	r24
    3024:	90 95       	com	r25
    3026:	bc 01       	movw	r22, r24
    3028:	cd 01       	movw	r24, r26
    302a:	08 95       	ret

0000302c <__divmodhi4>:
    302c:	97 fb       	bst	r25, 7
    302e:	07 2e       	mov	r0, r23
    3030:	16 f4       	brtc	.+4      	; 0x3036 <__divmodhi4+0xa>
    3032:	00 94       	com	r0
    3034:	07 d0       	rcall	.+14     	; 0x3044 <__divmodhi4_neg1>
    3036:	77 fd       	sbrc	r23, 7
    3038:	09 d0       	rcall	.+18     	; 0x304c <__divmodhi4_neg2>
    303a:	0e 94 02 18 	call	0x3004	; 0x3004 <__udivmodhi4>
    303e:	07 fc       	sbrc	r0, 7
    3040:	05 d0       	rcall	.+10     	; 0x304c <__divmodhi4_neg2>
    3042:	3e f4       	brtc	.+14     	; 0x3052 <__divmodhi4_exit>

00003044 <__divmodhi4_neg1>:
    3044:	90 95       	com	r25
    3046:	81 95       	neg	r24
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	08 95       	ret

0000304c <__divmodhi4_neg2>:
    304c:	70 95       	com	r23
    304e:	61 95       	neg	r22
    3050:	7f 4f       	sbci	r23, 0xFF	; 255

00003052 <__divmodhi4_exit>:
    3052:	08 95       	ret

00003054 <__udivmodsi4>:
    3054:	a1 e2       	ldi	r26, 0x21	; 33
    3056:	1a 2e       	mov	r1, r26
    3058:	aa 1b       	sub	r26, r26
    305a:	bb 1b       	sub	r27, r27
    305c:	fd 01       	movw	r30, r26
    305e:	0d c0       	rjmp	.+26     	; 0x307a <__udivmodsi4_ep>

00003060 <__udivmodsi4_loop>:
    3060:	aa 1f       	adc	r26, r26
    3062:	bb 1f       	adc	r27, r27
    3064:	ee 1f       	adc	r30, r30
    3066:	ff 1f       	adc	r31, r31
    3068:	a2 17       	cp	r26, r18
    306a:	b3 07       	cpc	r27, r19
    306c:	e4 07       	cpc	r30, r20
    306e:	f5 07       	cpc	r31, r21
    3070:	20 f0       	brcs	.+8      	; 0x307a <__udivmodsi4_ep>
    3072:	a2 1b       	sub	r26, r18
    3074:	b3 0b       	sbc	r27, r19
    3076:	e4 0b       	sbc	r30, r20
    3078:	f5 0b       	sbc	r31, r21

0000307a <__udivmodsi4_ep>:
    307a:	66 1f       	adc	r22, r22
    307c:	77 1f       	adc	r23, r23
    307e:	88 1f       	adc	r24, r24
    3080:	99 1f       	adc	r25, r25
    3082:	1a 94       	dec	r1
    3084:	69 f7       	brne	.-38     	; 0x3060 <__udivmodsi4_loop>
    3086:	60 95       	com	r22
    3088:	70 95       	com	r23
    308a:	80 95       	com	r24
    308c:	90 95       	com	r25
    308e:	9b 01       	movw	r18, r22
    3090:	ac 01       	movw	r20, r24
    3092:	bd 01       	movw	r22, r26
    3094:	cf 01       	movw	r24, r30
    3096:	08 95       	ret

00003098 <eeprom_read_byte>:
    3098:	e1 99       	sbic	0x1c, 1	; 28
    309a:	fe cf       	rjmp	.-4      	; 0x3098 <eeprom_read_byte>
    309c:	1f ba       	out	0x1f, r1	; 31
    309e:	8e bb       	out	0x1e, r24	; 30
    30a0:	e0 9a       	sbi	0x1c, 0	; 28
    30a2:	99 27       	eor	r25, r25
    30a4:	8d b3       	in	r24, 0x1d	; 29
    30a6:	08 95       	ret

000030a8 <eeprom_update_byte>:
    30a8:	26 2f       	mov	r18, r22

000030aa <eeprom_update_r18>:
    30aa:	e1 99       	sbic	0x1c, 1	; 28
    30ac:	fe cf       	rjmp	.-4      	; 0x30aa <eeprom_update_r18>
    30ae:	1f ba       	out	0x1f, r1	; 31
    30b0:	8e bb       	out	0x1e, r24	; 30
    30b2:	e0 9a       	sbi	0x1c, 0	; 28
    30b4:	81 50       	subi	r24, 0x01	; 1
    30b6:	0d b2       	in	r0, 0x1d	; 29
    30b8:	02 16       	cp	r0, r18
    30ba:	39 f0       	breq	.+14     	; 0x30ca <eeprom_update_r18+0x20>
    30bc:	1c ba       	out	0x1c, r1	; 28
    30be:	2d bb       	out	0x1d, r18	; 29
    30c0:	0f b6       	in	r0, 0x3f	; 63
    30c2:	f8 94       	cli
    30c4:	e2 9a       	sbi	0x1c, 2	; 28
    30c6:	e1 9a       	sbi	0x1c, 1	; 28
    30c8:	0f be       	out	0x3f, r0	; 63
    30ca:	08 95       	ret

000030cc <_exit>:
    30cc:	f8 94       	cli

000030ce <__stop_program>:
    30ce:	ff cf       	rjmp	.-2      	; 0x30ce <__stop_program>
